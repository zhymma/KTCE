{"Compound Interest": [{"Iter": 0, "delete": [{"tool": "def simple_interest(principal, annual_rate, time_period):\n    \n    total_amount = principal * (1 + annual_rate * time_period)\n    return round(total_amount, 2)", "subfield": "Compound Interest", "tool_name": "simple_interest", "tool_type": "function", "description": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.", "docstring": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The simple annual interest rate in decimal (e.g., 0.03 for 3%).\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> simple_interest(1000, 0.03, 5)\n    1150.0", "Freq": 3, "TSR": 2}, {"tool": "def financial_round(value, decimals=2):\n    \n    rounded_value = round(value, decimals)\n    return rounded_value", "subfield": "Compound Interest", "tool_name": "financial_round", "tool_type": "function", "description": "Rounds a value to a specified number of decimal places, typically used for financial purposes.", "docstring": "Rounds a value to a specified number of decimal places, typically used for financial purposes.\n    Parameters:\n    - value (float): The value to be rounded.\n    - decimals (int): The number of decimal places to round to.\n    Returns:\n    - float: The rounded value.\n    Examples:\n    - financial_round(123.4567)\n    - financial_round(123.4567, 4)", "Freq": 0, "TSR": 0}, {"tool": "def compare_compounding_frequencies(principal, annual_rate, year_list, freq_list):\n    \n    results = {}\n    for t in year_list:\n        for n in freq_list:\n            accumulated = compound_interest(principal, annual_rate, n, t)\n            results[(t, n)] = accumulated\n    return results", "subfield": "Compound Interest", "tool_name": "compare_compounding_frequencies", "tool_type": "function", "description": "Compare the accumulated amounts under different compounding frequencies over specified years.", "docstring": "Compare the accumulated amounts under different compounding frequencies over specified years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    year_list : list of float\n        A list of time periods (in years) to compare.\n    freq_list : list of int\n        A list of compounding frequencies to compare (e.g., 1 for annual, 12 for monthly).\n    Returns\n    -------\n    dict\n        A dictionary with keys as tuples representing the (years, frequency) and values as the compounded amounts.\n    \n    Examples\n    --------\n    >>> compare_compounding_frequencies(1000, 0.05, [10], [1, 4, 12])\n    {(10, 1): 1628.8946248160008, (10, 4): 1648.5960857350588, (10, 12): 1647.0094976902805}", "Freq": 0, "TSR": 0}, {"tool": "def calculate_present_value(future_value, rate, periods):\n    \n    # Present Value = Future Value / (1 + rate)^periods\n    present_value = future_value / (1 + rate) ** periods\n    return present_value", "subfield": "Compound Interest", "tool_name": "calculate_present_value", "tool_type": "function", "description": "Calculate the present value given the future value, annual interest rate, and periods.", "docstring": "Calculate the present value given the future value, annual interest rate, and periods.\n    Parameters:\n        future_value (float): The value at a future date.\n        rate (float): Annual interest rate expressed as fraction (e.g., 0.05 for 5%).\n        periods (int or float): Number of periods into the future the value is considered.\n    Returns:\n        float: Present value based on given inputs.\n    Examples:\n        >>> calculate_present_value(2000, 0.05, 5)\n        1565.2891607605546", "Freq": 2, "TSR": 1}], "add": [{"tool": "def simple_interest(principal, rate, time):\n    \n    interest = principal * rate * time\n    return round(interest, 2)", "subfield": "Compound Interest", "tool_name": "simple_interest", "tool_type": "function", "description": "Calculate the simple interest for a given principal amount, interest rate, and time period.", "docstring": "Calculate the simple interest for a given principal amount, interest rate, and time period.\n    Parameters:\n    principal (float): The principal amount.\n    rate (float): The interest rate.\n    time (float): The time period.\n    Returns:\n    float: The simple interest.", "Freq": 0, "TSR": 0}], "update": []}, {"Iter": 1, "delete": [{"tool": "def financial_round(value, decimals=2):\n    \n    rounded_value = round(value, decimals)\n    return rounded_value", "subfield": "Compound Interest", "tool_name": "financial_round", "tool_type": "function", "description": "Rounds a value to a specified number of decimal places, typically used for financial purposes.", "docstring": "Rounds a value to a specified number of decimal places, typically used for financial purposes.\n    Parameters:\n    - value (float): The value to be rounded.\n    - decimals (int): The number of decimal places to round to.\n    Returns:\n    - float: The rounded value.\n    Examples:\n    - financial_round(123.4567)\n    - financial_round(123.4567, 4)", "Freq": 0, "TSR": 0}, {"tool": "def compare_compounding_frequencies(principal, annual_rate, year_list, freq_list):\n    \n    results = {}\n    for t in year_list:\n        for n in freq_list:\n            accumulated = compound_interest(principal, annual_rate, n, t)\n            results[(t, n)] = accumulated\n    return results", "subfield": "Compound Interest", "tool_name": "compare_compounding_frequencies", "tool_type": "function", "description": "Compare the accumulated amounts under different compounding frequencies over specified years.", "docstring": "Compare the accumulated amounts under different compounding frequencies over specified years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    year_list : list of float\n        A list of time periods (in years) to compare.\n    freq_list : list of int\n        A list of compounding frequencies to compare (e.g., 1 for annual, 12 for monthly).\n    Returns\n    -------\n    dict\n        A dictionary with keys as tuples representing the (years, frequency) and values as the compounded amounts.\n    \n    Examples\n    --------\n    >>> compare_compounding_frequencies(1000, 0.05, [10], [1, 4, 12])\n    {(10, 1): 1628.8946248160008, (10, 4): 1648.5960857350588, (10, 12): 1647.0094976902805}", "Freq": 0, "TSR": 0}, {"tool": "def calculate_present_value(future_value, rate, periods):\n    \n    # Present Value = Future Value / (1 + rate)^periods\n    present_value = future_value / (1 + rate) ** periods\n    return present_value", "subfield": "Compound Interest", "tool_name": "calculate_present_value", "tool_type": "function", "description": "Calculate the present value given the future value, annual interest rate, and periods.", "docstring": "Calculate the present value given the future value, annual interest rate, and periods.\n    Parameters:\n        future_value (float): The value at a future date.\n        rate (float): Annual interest rate expressed as fraction (e.g., 0.05 for 5%).\n        periods (int or float): Number of periods into the future the value is considered.\n    Returns:\n        float: Present value based on given inputs.\n    Examples:\n        >>> calculate_present_value(2000, 0.05, 5)\n        1565.2891607605546", "Freq": 2, "TSR": 1}], "add": [{"tool": "def find_minimum_days(principal, annual_rate, target_multiple):\n    \n    daily_rate = annual_rate / 365\n    borrowed_amount = principal\n    days = 0\n    \n    while borrowed_amount < principal * target_multiple:\n        borrowed_amount += borrowed_amount * daily_rate\n        days += 1\n    \n    return days", "subfield": "Compound Interest", "tool_name": "find_minimum_days", "tool_type": "function", "description": "Calculates the minimum number of days after which the borrowed amount will be at least twice as much.\n    \n    Args:\n        principal (float): The principal amount borrowed.\n        annual_rate (float): The annual interest rate.\n        target_multiple (float): The desired multiple of the borrowed amount.\n        \n    Returns:\n        int: The minimum number of days.", "docstring": "Calculates the minimum number of days after which the borrowed amount will be at least twice as much.\n    \n    Args:\n        principal (float): The principal amount borrowed.\n        annual_rate (float): The annual interest rate.\n        target_multiple (float): The desired multiple of the borrowed amount.\n        \n    Returns:\n        int: The minimum number of days.", "Freq": 0, "TSR": 0}], "update": [[{"tool": "def simple_interest(principal, annual_rate, time_period):\n    \n    total_amount = principal * (1 + annual_rate * time_period)\n    return round(total_amount, 2)", "subfield": "Compound Interest", "tool_name": "simple_interest", "tool_type": "function", "description": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.", "docstring": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The simple annual interest rate in decimal (e.g., 0.03 for 3%).\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> simple_interest(1000, 0.03, 5)\n    1150.0", "Freq": 3, "TSR": 2}, {"tool": "def compound_interest(principal, annual_rate, compounding_frequency, time_period):\n    \n    if compounding_frequency == 'annually':\n        total_amount = principal * (1 + annual_rate) ** time_period\n    elif compounding_frequency == 'semi-annually':\n        total_amount = principal * (1 + annual_rate / 2) ** (2 * time_period)\n    elif compounding_frequency == 'quarterly':\n        total_amount = principal * (1 + annual_rate / 4) ** (4 * time_period)\n    elif compounding_frequency == 'monthly':\n        total_amount = principal * (1 + annual_rate / 12) ** (12 * time_period)\n    else:\n        raise ValueError(\"Invalid compounding frequency.\")\n    return round(total_amount, 2)", "subfield": "Compound Interest", "tool_name": "compound_interest", "tool_type": "function", "description": "Calculates the compound interest for a given principal amount, annual interest rate, compounding frequency, and time period.", "docstring": "Calculates the compound interest for a given principal amount, annual interest rate, compounding frequency, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The annual interest rate in decimal (e.g., 0.03 for 3%).\n    - compounding_frequency (str): The frequency at which the interest is compounded (e.g., 'quarterly', 'monthly', 'annually').\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> compound_interest(1000, 0.1, 'quarterly', 5)\n    1610.51", "Freq": 1.5, "TSR": 1, "experience_pool": "- Experience: The tool has been modified to handle compound interest calculations and include the compounding frequency as a parameter.\n- Solution: The solution code has been updated to use the new compound_interest function."}]]}, {"Iter": 2, "delete": [{"tool": "def simple_interest(principal, annual_rate, time_period):\n    \n    total_amount = principal * (1 + annual_rate * time_period)\n    return round(total_amount, 2)", "subfield": "Compound Interest", "tool_name": "simple_interest", "tool_type": "function", "description": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.", "docstring": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The simple annual interest rate in decimal (e.g., 0.03 for 3%).\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> simple_interest(1000, 0.03, 5)\n    1150.0", "Freq": 3, "TSR": 2}, {"tool": "def calculate_present_value(future_value, rate, periods):\n    \n    # Present Value = Future Value / (1 + rate)^periods\n    present_value = future_value / (1 + rate) ** periods\n    return present_value", "subfield": "Compound Interest", "tool_name": "calculate_present_value", "tool_type": "function", "description": "Calculate the present value given the future value, annual interest rate, and periods.", "docstring": "Calculate the present value given the future value, annual interest rate, and periods.\n    Parameters:\n        future_value (float): The value at a future date.\n        rate (float): Annual interest rate expressed as fraction (e.g., 0.05 for 5%).\n        periods (int or float): Number of periods into the future the value is considered.\n    Returns:\n        float: Present value based on given inputs.\n    Examples:\n        >>> calculate_present_value(2000, 0.05, 5)\n        1565.2891607605546", "Freq": 2, "TSR": 1}], "add": [{"tool": "def find_minimum_days(principal, annual_rate, target_multiple):\n    \n    daily_rate = annual_rate / 365\n    borrowed_amount = principal\n    days = 0\n    \n    while borrowed_amount < principal * target_multiple:\n        borrowed_amount += borrowed_amount * daily_rate\n        days += 1\n    \n    return days", "subfield": "Compound Interest", "tool_name": "find_minimum_days", "tool_type": "function", "description": "Calculates the minimum number of days after which the borrowed amount will be at least twice as much.\n    Args:\n        principal (float): The principal amount borrowed.\n        annual_rate (float): The annual interest rate.\n        target_multiple (float): The desired multiple of the borrowed amount.\n        \n    Returns:\n        int: The minimum number of days.", "docstring": "Calculates the minimum number of days after which the borrowed amount will be at least twice as much.\n    Args:\n        principal (float): The principal amount borrowed.\n        annual_rate (float): The annual interest rate.\n        target_multiple (float): The desired multiple of the borrowed amount.\n        \n    Returns:\n        int: The minimum number of days.", "Freq": 0, "TSR": 0}], "update": []}, {"Iter": 3, "delete": [{"tool": "def financial_round(value, decimals=2):\n    \n    rounded_value = round(value, decimals)\n    return rounded_value", "subfield": "Compound Interest", "tool_name": "financial_round", "tool_type": "function", "description": "Rounds a value to a specified number of decimal places, typically used for financial purposes.", "docstring": "Rounds a value to a specified number of decimal places, typically used for financial purposes.\n    Parameters:\n    - value (float): The value to be rounded.\n    - decimals (int): The number of decimal places to round to.\n    Returns:\n    - float: The rounded value.\n    Examples:\n    - financial_round(123.4567)\n    - financial_round(123.4567, 4)", "Freq": 0, "TSR": 0}, {"tool": "def compare_compounding_frequencies(principal, annual_rate, year_list, freq_list):\n    \n    results = {}\n    for t in year_list:\n        for n in freq_list:\n            accumulated = compound_interest(principal, annual_rate, n, t)\n            results[(t, n)] = accumulated\n    return results", "subfield": "Compound Interest", "tool_name": "compare_compounding_frequencies", "tool_type": "function", "description": "Compare the accumulated amounts under different compounding frequencies over specified years.", "docstring": "Compare the accumulated amounts under different compounding frequencies over specified years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    year_list : list of float\n        A list of time periods (in years) to compare.\n    freq_list : list of int\n        A list of compounding frequencies to compare (e.g., 1 for annual, 12 for monthly).\n    Returns\n    -------\n    dict\n        A dictionary with keys as tuples representing the (years, frequency) and values as the compounded amounts.\n    \n    Examples\n    --------\n    >>> compare_compounding_frequencies(1000, 0.05, [10], [1, 4, 12])\n    {(10, 1): 1628.8946248160008, (10, 4): 1648.5960857350588, (10, 12): 1647.0094976902805}", "Freq": 0, "TSR": 0}, {"tool": "def calculate_present_value(future_value, rate, periods):\n    \n    # Present Value = Future Value / (1 + rate)^periods\n    present_value = future_value / (1 + rate) ** periods\n    return present_value", "subfield": "Compound Interest", "tool_name": "calculate_present_value", "tool_type": "function", "description": "Calculate the present value given the future value, annual interest rate, and periods.", "docstring": "Calculate the present value given the future value, annual interest rate, and periods.\n    Parameters:\n        future_value (float): The value at a future date.\n        rate (float): Annual interest rate expressed as fraction (e.g., 0.05 for 5%).\n        periods (int or float): Number of periods into the future the value is considered.\n    Returns:\n        float: Present value based on given inputs.\n    Examples:\n        >>> calculate_present_value(2000, 0.05, 5)\n        1565.2891607605546", "Freq": 2, "TSR": 1}], "add": [{"tool": "def find_minimum_days(principal, annual_rate, target_multiple):\n    \n    daily_rate = annual_rate / 365\n    borrowed_amount = principal\n    days = 0\n    \n    while borrowed_amount < principal * target_multiple:\n        borrowed_amount += borrowed_amount * daily_rate\n        days += 1\n    \n    return days", "subfield": "Compound Interest", "tool_name": "find_minimum_days", "tool_type": "function", "description": "Calculates the minimum number of days after which the borrowed amount will be at least twice as much.\n    Args:\n        principal (float): The principal amount borrowed.\n        annual_rate (float): The annual interest rate.\n        target_multiple (float): The desired multiple of the borrowed amount.\n        \n    Returns:\n        int: The minimum number of days.", "docstring": "Calculates the minimum number of days after which the borrowed amount will be at least twice as much.\n    Args:\n        principal (float): The principal amount borrowed.\n        annual_rate (float): The annual interest rate.\n        target_multiple (float): The desired multiple of the borrowed amount.\n        \n    Returns:\n        int: The minimum number of days.", "Freq": 0, "TSR": 0}], "update": [[{"tool": "def simple_interest(principal, annual_rate, time_period):\n    \n    total_amount = principal * (1 + annual_rate * time_period)\n    return round(total_amount, 2)", "subfield": "Compound Interest", "tool_name": "simple_interest", "tool_type": "function", "description": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.", "docstring": "Calculates the simple interest for a given principal amount, annual interest rate, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The simple annual interest rate in decimal (e.g., 0.03 for 3%).\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> simple_interest(1000, 0.03, 5)\n    1150.0", "Freq": 3, "TSR": 2}, {"tool": "def compound_interest(principal, annual_rate, compounding_frequency, time_period):\n    \n    if compounding_frequency == 'annually':\n        total_amount = principal * (1 + annual_rate) ** time_period\n    elif compounding_frequency == 'semi-annually':\n        total_amount = principal * (1 + annual_rate / 2) ** (2 * time_period)\n    elif compounding_frequency == 'quarterly':\n        total_amount = principal * (1 + annual_rate / 4) ** (4 * time_period)\n    elif compounding_frequency == 'monthly':\n        total_amount = principal * (1 + annual_rate / 12) ** (12 * time_period)\n    else:\n        raise ValueError(\"Invalid compounding frequency\")\n    return round(total_amount, 2)", "subfield": "Compound Interest", "tool_name": "compound_interest", "tool_type": "function", "description": "Calculates the compound interest for a given principal amount, annual interest rate, compounding frequency, and time period.", "docstring": "Calculates the compound interest for a given principal amount, annual interest rate, compounding frequency, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The annual interest rate in decimal (e.g., 0.03 for 3%).\n    - compounding_frequency (str): The frequency at which interest is compounded (e.g., 'quarterly', 'monthly', 'annually').\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> compound_interest(1000, 0.1, 'quarterly', 10)\n    2593.74", "Freq": 1.5, "TSR": 1, "experience_pool": "- Experience 1:\n    - Field: Financial Mathematics\n    - Subfield: Compound Interest\n    - Tool Usage Frequency: 1\n    - Tool Success Rate: 100%\n    - Tool docstring: Calculates the compound interest for a given principal amount, annual interest rate, compounding frequency, and time period.\n    - Tool code:\n    ```python\n    def compound_interest(principal, annual_rate, compounding_frequency, time_period):\n        \"\"\"\n        Calculates the compound interest for a given principal amount, annual interest rate, compounding frequency, and time period.\n        Parameters:\n        - principal (float): The initial amount of money.\n        - annual_rate (float): The annual interest rate in decimal (e.g., 0.03 for 3%).\n        - compounding_frequency (str): The frequency at which interest is compounded (e.g., 'quarterly', 'monthly', 'annually').\n        - time_period (int): The time period over which the money is invested or borrowed, in years.\n        Returns:\n        - float: The total amount after interest.\n        Example:\n        >>> compound_interest(1000, 0.1, 'quarterly', 10)\n        2593.74\n        \"\"\"\n        if compounding_frequency == 'annually':\n            total_amount = principal * (1 + annual_rate) ** time_period\n        elif compounding_frequency == 'semi-annually':\n            total_amount = principal * (1 + annual_rate / 2) ** (2 * time_period)\n        elif compounding_frequency == 'quarterly':\n            total_amount = principal * (1 + annual_rate / 4) ** (4 * time_period)\n        elif compounding_frequency == 'monthly':\n            total_amount = principal * (1 + annual_rate / 12) ** (12 * time_period)\n        else:\n            raise ValueError(\"Invalid compounding frequency\")\n\n        return round(total_amount, 2)\n    ```"}]]}]}