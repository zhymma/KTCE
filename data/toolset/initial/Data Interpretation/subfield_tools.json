{"Bar Graphs": [["def find_min_max_difference(data):\n    \"\"\"\n    Finds the minimum, maximum, and their difference from the bar graph data.\n    Parameters:\n    - data (dict): A dictionary with numerical values from which min, max and their difference are calculated.\n    Returns:\n    - tuple: A tuple containing minimum value, maximum value, and their difference.\n    \n    Example:\n    >>> find_min_max_difference({'Jan': 50, 'Feb': 75, 'Mar': 65})\n    (50, 75, 25)\n    \"\"\"\n    values = data.values()\n    min_value = min(values)\n    max_value = max(values)\n    difference = max_value - min_value\n    return min_value, max_value, difference", "def find_max_min_difference(bar_values):\n    \"\"\"\n    Find the maximum and minimum values and their difference from a list of bar graph values.\n    Parameters:\n        bar_values (list or np.array): The numeric heights of the bars in the bar graph.\n    Returns:\n        tuple: max value, min value, difference between max and min\n    Example:\n        >>> find_max_min_difference([5, 10, 15, 20])\n        (20, 5, 15)\n    \"\"\"\n    data = np.array(bar_values)\n    max_val = np.max(data)\n    min_val = np.min(data)\n    difference = max_val - min_val\n    return max_val, min_val, difference"], ["def cumulative_total(bar_values):\n    \"\"\"\n    Compute the cumulative total of the bar values.\n    Parameters:\n        bar =alues (list or np.array): The numeric heights of the bars in the bar graph, assumed to be sequential.\n    Returns:\n        np.array: Cumulative sum of the values.\n    Example:\n        >>> cumulative_total([5, 10, 15, 20])\n        array([ 5, 15, 30, 50])\n    \"\"\"\n    return np.cumsum(bar_values)"], ["def extract_data(bar_values):\n    \"\"\"\n    Extract data from a given list of bar values representing heights of the bars in a bar graph.\n    Parameters:\n        bar_values (list or np.array): The numeric heights of the bars in the bar graph.\n    Returns:\n        np.array: An array of the extracted data numbers.\n    Example:\n        >>> extract_data([5, 10, 15, 20])\n        array([ 5, 10, 15, 20])\n    \"\"\"\n    return np.array(bar_values)"], ["def plot_data_and_percentage(labels, values, chart_type='bar', figsize=(10, 7), title=\"Data Distribution\"):\n    \"\"\"\n    Plots a bar chart or a pie chart from given labels and values and annotates percentages.\n    Parameters:\n    - labels (list): A list of labels for the data elements.\n    - values (list or np.array): Numerical data corresponding to the labels.\n    - chart_type (str): Type of chart to plot (\"bar\" or \"pie\"). Default is 'bar'.\n    - figsize (tuple): Figure size, passed as (width, height) in inches.\n    - title (str): Title of the plot.\n    Returns:\n    None. Displays a plot with annotated data percentages.\n    \n    Examples:\n    >>> labels = ['Apples', 'Oranges', 'Bananas']\n    >>> values = [93, 77, 54]\n    >>> plot_data_and_percentage(labels, values, 'bar', title=\"Fruit Sales Data\")\n    \n    >>> plot_data_and_tip_percentage(labels, values, 'pie', title=\"Fruit Market Share\")\n    \"\"\"\n    plt.figure(figsize=figsize)\n    total = sum(values)\n    percentages = [100 * v / total for v in values]\n    if chart_type.lower() == 'bar':\n        plt.bar(labels, values, color='skyblue')\n        plt.ylabel('Values')\n        for i, (value, percentage) in enumerate(zip(values, percentages)):\n            plt.text(i, value, '{:.1f}%'.format(percentage), ha='center', va='bottom')\n    elif chart_type.lower() == 'pie':\n        plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)\n    else:\n        raise ValueError(\"chart_type must be either 'bar' or 'pie'\")\n    plt.title(title)\n    plt.show()"], ["def calculate_percentages(values, round_digits=2):\n    \"\"\"\n    Calculate the percentages for a list of numerical values relative to their sum.\n    \n    Parameters:\n    - values (list of float/int): List of numbers which represent discrete quantitative data, like heights of bars in a bar graph.\n    - round_digits (int): Precision of the computed percentage values, default is 2.\n    \n    Returns:\n    - list of float: List of percentages, each corresponding to the percentage value of the input values relative to their sum.\n    \n    Example:\n    >>> calculate_percentages([100, 200, 700])\n    [10.0, 20.0, 70.0]\n    \"\"\"\n    import numpy as np\n    total = np.sum(values)\n    if total == 0:\n        return [0] * len(values)\n    percentages = [(x / total * 100) for x in values]\n    return [round(pct, round_digits) for pct in percentages]"], ["def data_to_percentage(data):\n    \"\"\"\n    Converts a list of data into percentages of their collective total. Useful for preparing data for pie charts.\n    Parameters:\n    - data (list or np.array): The list of numerical data.\n    Returns:\n    - list: Percentages corresponding to each data value.\n    \n    Examples:\n    >>> data_to_percentage([50, 150, 300])\n    [10.0, 30.0, 60.0]\n    \"\"\"\n    total = sum(data)\n    if total == 0:\n        return [0]*len(data)\n    return [(100.0 * x / total) for x in data]"], ["def calculate_cumulative_total(data):\n    \"\"\"\n    Calculates the cumulative total of numerical values from the bar graph data, assuming the keys represent\n    sequential time periods or categories.\n    Parameters:\n    - data (dict): A dictionary with numerical values to be cumulatively totaled.\n    Returns:\n    - list: A list of tuples where each tuple has a key and the cumulative total up to that key.\n    \n    Example:\n    >>> calculate_cumulative_total({'Jan': 50, 'Feb': 75, 'Mar': 65})\n    [('Jan', 50), ('Feb', 125), ('Mar', 190)]\n    \"\"\"\n    keys = list(data.keys())\n    cumulative_total = 0\n    result = []\n    for key in keys:\n        cumulative_total += data[key]\n        result.append((key, cumulative_total))\n    return result"], ["def percentages_from_counts(counts):\n    \"\"\"\n    Given an array of counts, compute the percentage of each count relative to the total count.\n    Parameters:\n    - counts (np.array): Array or list of counts.\n    Returns:\n    - np.array: Array of percentages corresponding to the given counts.\n    \n    Example:\n    >>> percentages_from_counts([100, 200, 300])\n    array([16.66666667, 33.33333333, 50.        ])\n    \"\"\"\n    counts = np.array(counts)\n    total = counts.sum()\n    if total == 0:\n        return np.zeros_like(counts)  # Avoid division by zero\n    percentages = 100 * counts / total\n    return percentages"], ["def aggregate_data_by_categories(values, categories):\n    \"\"\"\n    Aggregate numerical values based on their categories. This function sums up values that fall under the same category.\n    \n    Parameters:\n    - values (list of float/int): List of numerical values.\n    - categories (list of any): List of categories corresponding to the values; must be the same length as values.\n    \n    Returns:\n    - dict: Dictionary with categories as keys and aggregated sums as values.\n    \n    Example:\n    >>> aggregate_data_by_categories([10, 15, 25, 5], ['Fruit', 'Vegetable', 'Fruit', 'Vegetable'])\n    {'Fruit': 35, 'Vegetable': 20}\n    \"\"\"\n    from collections import defaultdict\n    aggregate = defaultdict(int)\n    for val, cat in zip(values, categories):\n        aggregate[cat] += val\n    return dict(aggregate)"], ["def interpret_bar_graph(data):\n    \"\"\"\n    Simulates the reading and interpreting of data from a bar graph. Typically, this data would be visual on a\n    graph, but here it will be input as a dictionary where keys represent categories or time periods and values\n    represent the numerical data.\n    Parameters:\n    - data (dict): A dictionary where the keys are the categories or labels (e.g., dates) and the values are\n      the numerical data represented by the bars in a bar graph.\n    Returns:\n    - dict: The same dictionary confirming representation of the bar graph data in structured format.\n    \n    Example:\n    >>> interpret_bar_graph({'Jan': 50, 'Feb': 75, 'Mar': 65})\n    {'Jan': 50, 'Feb': 75, 'Mar': 65}\n    \"\"\"\n    return data"], ["def categorize_data(data, categories):\n    \"\"\"\n    Categorize numerical data based on the provided categories.\n    Parameters:\n    - data (np.array): Array or list of numerical data.\n    - categories (list): List of tuples describing the categories, each tuple should be in the form\n                         (category_name, lower_bound, upper_bound)\n    Returns:\n    - dict: Dictionary with keys as category names and values as lists of data points that belong to each category.\n    Example:\n    >>> categorize_data([10, 20, 30, 15, 25], [('low', 0, 15), ('mid', 16, 25)])\n    {'low': [10, 15], 'mid': [20, 25]}\n    \"\"\"\n    categorized_data = {cat[0]: [] for cat in categories}\n    for number in data:\n        for name, lower, upper in categories:\n            if lower <= number <= upper:\n                categorized_data[name].append(number)\n                break\n    return categorized_cats"], ["def extract_data_from_mock_graph(bars_details):\n    \"\"\"\n    Simulates the extraction of data from a representation of a bar graph.\n    \n    Parameters:\n    - bars_details (list of tuples): A list where each tuple represents\n      a bar on the graph, typically (label, value).\n    \n    Returns:\n    - dict: A dictionary with bar labels as keys and their corresponding values as values.\n    \n    Example:\n    >>> extract_data_from_mock_graph([('A', 10), ('B', 20), ('C', 15)])\n    {'A': 10, 'B': 20, 'C': 15}\n    \"\"\"\n    return {label: value for label, value in bars_details}"], ["def analyze_bar_graph_data(data):\n    \"\"\"\n    Conducts various analyses including max, min, and difference calculations on data extracted from a bar graph.\n    Parameters:\n    - data (dict): Dictionary with bar labels as keys and numeric values as values (extracted bar graph data).\n    \n    Returns:\n    - dict: A dictionary containing maximum, minimum, and cumulative sums of the data.\n    \n    Example:\n    >>> data = {'A': 10, 'B': 20, 'C': 15}\n    >>> analyze_bar_graph_data(data)\n    {'max_value': 20, 'max_label': 'B', 'min_value': 10, 'min_label': 'A', \n     'total_sum': 45, 'differences': {'B-A': 10, 'C-A': 5, 'C-B': -5}}\n    \"\"\"\n    max_label = max(data, key=data.get)\n    min_label = min(data, key=data.get)\n    response = {\n        'max_value': data[max_label],\n        'max_label': max_label,\n        'min_value': data[min_label],\n        'min_label': min_label,\n        'total_sum': sum(data.values())\n    }\n    # Calculating differences\n    labels = list(data.keys())\n    response['differences'] = {}\n    for i, label1 in enumerate(labels):\n        for label2 in labels[i+1:]:\n            diff_key = f'{label2}-{label1}'\n            response['differences'][diff_key] = data[label2] - data[label1]\n    \n    return response"]]}