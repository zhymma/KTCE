{"Unit Conversion": [{"tool": "def convert_volume(value, from_unit, to_unit):\n    \n    # Conversion factors based on 1 liter.\n    conversion_factors = {\n        'liters': 1, \n        'pints': 2.11338, \n        'quarts': 1.05669, \n        'gallons': 0.264172,\n        'cubic_feet': 0.0353147,\n        'cubic_yards': 0.00130795\n    }\n    \n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError(\"Unsupported unit conversion. Available units: {}\".format(', '.join(conversion_factors.keys())))\n    \n    # Normalize input to 'liters' first\n    value_in_liters = value / conversion_factors[from_unit]\n    # Convert from 'liters' to the target unit\n    converted_value = value_in_liters * conversion_factors[to_unit]\n    \n    return converted_value", "subfield": "Unit Conversion", "tool_name": "convert_volume", "tool_type": "function", "description": "None", "docstring": null, "Freq": 13.5, "TSR": 13, "experience_pool": "- Experience: When using the convert_volume function, make sure to provide the value, from_unit, and to_unit parameters correctly. The from_unit and to_unit should be one of the supported units: liters, pints, quarts, gallons, cubic_feet, cubic_yards.\n- Experience: To convert a volume from one unit to another, call the convert_volume function with the value, from_unit, and to_unit parameters. The function will return the converted value."}, {"tool": "def convert_units(quantity, conversion_factor, offset=0):\n    \n    return quantity * conversion_factor + offset", "subfield": "Unit Conversion", "tool_name": "convert_units", "tool_type": "function", "description": "Convert a quantity from one unit to another using a specified conversion factor and an optional offset.", "docstring": "Convert a quantity from one unit to another using a specified conversion factor and an optional offset.\n    \n    Parameters:\n    - quantity (float or int): The numeric quantity in the original units to be converted.\n    - conversion_factor (float): The factor by which to multiply the original quantity to perform the conversion.\n    - offset (float, optional): An additional offset to be added after conversion (default is 0).\n    Returns:\n    - float: The converted quantity in the new units.\n    Examples:\n    >>> convert_units(10, 0.5)  # For example, 10 blocks to miles if 1 block equals 0.5 miles\n    5.0\n    >>> convert_units(15, 1/1.60934)  # For example, 15 kilometers to miles\n    9.32056788356075\n    >>> convert_units(32, 1.8, 32)  # Converting 32°C to °F\n    89.6", "Freq": 14, "TSR": 13, "experience_pool": "- Always double-check the conversion rate and calculation when converting between units.\n- Ensure that the correct conversion factor and offset are used in the tool function.\n- Verify the correctness of the tool output by manually calculating the conversion if necessary."}, {"tool": "def convert_area(area, initial_unit='square_feet', target_unit='square_yards'):\n    if initial_unit == 'square_feet' and target_unit == 'square_yards':\n        return area / 9\n    elif initial_unit == 'square_yards' and target_unit == 'square_feet':\n        return area * 9\n    elif initial_unit == 'square_feet' and target_unit == 'square_feet':\n        return area\n    elif initial_unit == 'square_yards' and target_unit == 'square_yards':\n        return area\n    elif initial_unit == 'inches' and target_unit == 'square_feet':\n        return area / 144\n    else:\n        raise ValueError(\"Unrecognized unit. Use 'square_feet' or 'square_yards'.\")", "subfield": "Unit Conversion", "tool_name": "convert_area", "tool_type": "function", "description": "None", "docstring": null, "Freq": 3.5, "TSR": 3.25, "experience_pool": "- Problem: The tool is not able to convert from inches to square feet.\n- Solution: Modify the `convert_area` function to include the conversion from inches to square feet."}, {"tool": "def convert_area_units(area, scale_factor):\n    \n    return area * scale_factor", "subfield": "Unit Conversion", "tool_name": "convert_area_units", "tool_type": "function", "description": "Convert area units using a scale factor.\n    \n    Args:\n        area (float): The area to be converted.\n        scale_factor (float): The scale factor for the conversion.\n        \n    Returns:\n        float: The converted area.", "docstring": "Convert area units using a scale factor.\n    \n    Args:\n        area (float): The area to be converted.\n        scale_factor (float): The scale factor for the conversion.\n        \n    Returns:\n        float: The converted area.", "Freq": 2, "TSR": 2}, {"tool": "def convert_currency(value, from_unit, to_unit):\n    \n    conversion_factors = {\n        'dollars': 100,\n        'cents': 1\n    }\n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError(\"Unsupported unit conversion. Available units: {}\".format(', '.join(conversion_factors.keys())))\n    converted_value = value * conversion_factors[from_unit] / conversion_factors[to_unit]\n    return converted_value", "subfield": "Unit Conversion", "tool_name": "convert_currency", "tool_type": "function", "description": "Convert a quantity from one monetary unit to another.\n    Args:\n        value (float): The value to be converted.\n        from_unit (str): The initial monetary unit.\n        to_unit (str): The target monetary unit.\n    Returns:\n        float: The converted value.", "docstring": "Convert a quantity from one monetary unit to another.\n    Args:\n        value (float): The value to be converted.\n        from_unit (str): The initial monetary unit.\n        to_unit (str): The target monetary unit.\n    Returns:\n        float: The converted value.", "Freq": 2, "TSR": 1}]}