{"Base Conversion": [{"tool": "def convert_base(number, from_base, to_base):\n    \n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 104.5, "TSR": 54.5}, {"tool": "def is_palindrome(number):\n    \n    return number == number[::-1]", "subfield": "Base Conversion", "tool_name": "is_palindrome", "tool_type": "function", "description": "Check if a given string is palindromic.", "docstring": "Check if a given string is palindromic.\n    \n    Parameters:\n        number (str): The number as a string.\n        \n    Returns:\n        bool: True if `number` is a palindrome, False otherwise.\n    \n    Example:\n        >>> is_palindrome(\"101101\")\n        True\n        >>> is_palindrome(\"123321\")\n        True\n        >>> is_palindrome(\"1234\")\n        False", "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The is_palindrome() function accurately checks if a given string is palindromic by comparing the string with its reverse.\n- Experience: The is_palindrome() function is flexible and can be used with any string input.\n- Experience: The is_palindrome() function is easy to use, as it only requires a single string parameter and returns a boolean value indicating whether the string is a palindrome or not."}, {"tool": "def count_digits_in_base(n, base):\n    \n    count = 0\n    while n > 0:\n        n //= base\n        count += 1\n    return count", "subfield": "Base Conversion", "tool_name": "count_digits_in_base", "tool_type": "function", "description": "Counts the digits of `n` in the given `base`.", "docstring": "Counts the digits of `n` in the given `base`.\n    \n    Parameters:\n    - n (int): The number in decimal.\n    - base (int): The base in which to count digits.\n    \n    Returns:\n    - int: The count of digits in the specified base.\n    \n    Examples:\n    >>> count_digits_in_base(255, 16)\n    2\n    >>> count_digits_in_base(2, 2)\n    2", "Freq": 5, "TSR": 3}, {"tool": "def base_conversion(number, from_base, to_base):\n    \n    def convert_to_decimal(number, base):\n        \n        decimal = 0\n        power = 0\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        for digit in number[::-1]:\n            decimal += digits.index(digit) * (base ** power)\n            power += 1\n        \n        return decimal\n    \n    def convert_from_decimal(decimal, base):\n        \n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        \n        while decimal > 0:\n            result = digits[decimal % base] + result\n            decimal //= base\n        \n        return result if result else \"0\"\n    \n    decimal = convert_to_decimal(number, from_base)\n    converted_number = convert_from_decimal(decimal, to_base)\n    \n    return converted_number", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "docstring": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "Freq": 20, "TSR": 4}]}