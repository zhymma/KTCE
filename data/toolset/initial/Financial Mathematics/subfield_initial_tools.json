{"Compound Interest": ["def compound_interest(principal, annual_rate, compounding_frequency, time_period):\n    \"\"\"\n    Calculates the compound interest for a given principal amount, interest rate, compounding frequency, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The annual interest rate in decimal (e.g., 0.05 for 5%).\n    - compounding_frequency (str): The compounding frequency. It can be 'annually', 'semi-annually', 'quarterly', 'monthly'.\n    - time_period (int): The time period over which the money is invested or borrowed.\n    Returns:\n    - float: The future value of the investment or loan.\n    Example:\n    >>> compound_interest(1000, 0.05, 'quarterly', 5)\n    1283.36\n    \"\"\"\n    frequency_dict = {'annually': 1, 'semi-annually': 2, 'quarterly': 4, 'monthly': 12}\n    if compounding_frequency in frequency_dict:\n        n = frequency_dict[compounding_frequency]\n    else:\n        raise ValueError('Invalid compounding frequency')\n    compound_rate = annual_rate / n\n    compounds = n * time_period\n    future_value = principal * (1 + compound_rate) ** compounds\n    return round(future_value, 2)", "def simple_interest(principal, annual_rate, time_period):\n    \"\"\"\n    Calculates the simple interest for a given principal amount, annual interest rate, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The simple annual interest rate in decimal (e.g., 0.03 for 3%).\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> simple_interest(1000, 0.03, 5)\n    1150.0\n    \"\"\"\n    total_amount = principal * (1 + annual_rate * time_period)\n    return round(total_amount, 2)", "def financial_round(value, decimals=2):\n    \"\"\"\n    Rounds a value to a specified number of decimal places, typically used for financial purposes.\n    Parameters:\n    - value (float): The value to be rounded.\n    - decimals (int): The number of decimal places to round to.\n    Returns:\n    - float: The rounded value.\n    Examples:\n    - financial_round(123.4567)\n    - financial_round(123.4567, 4)\n    \"\"\"\n    rounded_value = round(value, decimals)\n    return rounded_value", "def compare_compounding_frequencies(principal, annual_rate, year_list, freq_list):\n    \"\"\"\n    Compare the accumulated amounts under different compounding frequencies over specified years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    year_list : list of float\n        A list of time periods (in years) to compare.\n    freq_list : list of int\n        A list of compounding frequencies to compare (e.g., 1 for annual, 12 for monthly).\n    Returns\n    -------\n    dict\n        A dictionary with keys as tuples representing the (years, frequency) and values as the compounded amounts.\n    \n    Examples\n    --------\n    >>> compare_compounding_frequencies(1000, 0.05, [10], [1, 4, 12])\n    {(10, 1): 1628.8946248160008, (10, 4): 1648.5960857350588, (10, 12): 1647.0094976902805}\n    \"\"\"\n    results = {}\n    for t in year_list:\n        for n in freq_list:\n            accumulated = compound_interest(principal, annual_rate, n, t)\n            results[(t, n)] = accumulated\n    return results", "def calculate_present_value(future_value, rate, periods):\n    \"\"\"\n    Calculate the present value given the future value, annual interest rate, and periods.\n    Parameters:\n        future_value (float): The value at a future date.\n        rate (float): Annual interest rate expressed as fraction (e.g., 0.05 for 5%).\n        periods (int or float): Number of periods into the future the value is considered.\n    Returns:\n        float: Present value based on given inputs.\n    Examples:\n        >>> calculate_present_value(2000, 0.05, 5)\n        1565.2891607605546\n    \"\"\"\n    # Present Value = Future Value / (1 + rate)^periods\n    present_value = future_value / (1 + rate) ** periods\n    return present_value"]}