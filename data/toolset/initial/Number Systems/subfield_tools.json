{
    "Base Conversion": [
        [
            "def add_binary(bin1, bin2):\n    \"\"\"\n    Adds two binary numbers.\n    \n    Parameters:\n    bin1 : str\n        The first binary number as a string.\n    bin2 : str\n        The second binary number as a string.\n    \n    Returns:\n    str\n        The resultant binary number after addition.\n    \n    Examples:\n    >>> add_binary('1010', '1101')\n    '11011'\n    \"\"\"\n    # Convert binary strings to integers\n    num1 = int(bin1, 2)\n    num2 = int(bin2, 2)\n    \n    # Adding two numbers\n    result = num1 + num2\n    # Convert the result back to binary\n    return bin(result)[2:]",
            "def multiply_binary(bin1, bin2):\n    \"\"\"\n    Multiplies two binary numbers.\n    \n    Parameters:\n    bin1 : str\n        The first binary number as a string.\n    bin2 : str\n        The second binary number as a string.\n    \n    Returns:\n    str\n        The resultant binary number after multiplication.\n    \n    Examples:\n    >>> multiply_binary('101', '10')  # 5 * 2\n    '1010'\n    \"\"\"\n    num1 = int(bin1, 2)\n    num2 = int(bin2, 2)\n    result = num1 * num2\n    return bin(result)[2:]",
            "def binary_add(bin1: str, bin2: str) -> str:\n    \"\"\"\n    Add two binary numbers.\n    Parameters:\n    - bin1 : str\n        The first binary number as a string.\n    - bin2 : str\n        The second binary number as a string.\n    Returns:\n    - str\n        The result of binary addition as a string.\n    Examples:\n    >>> binary_add('1010', '1101')\n    '10111'\n    \"\"\"\n    # Convert binary to decimal\n    decimal1 = int(bin1, 2)\n    decimal2 = int(bin2, 2)\n    # Add the two decimals\n    decimal_sum = decimal1 + decimal2\n    # Convert the result back to binary\n    return bin(decimal_sum)[2:]",
            "def binary_multiply(bin1: str, bin2: str) -> str:\n    \"\"\"\n    Multiply two binary numbers.\n    Parameters:\n    - bin1 : str\n        The first binary number.\n    - bin2 : str\n        The second binary number.\n    Returns:\n    - str\n        Binary string representing the product of the two inputs.\n    Examples:\n    >>> binary_multiply('101', '11')\n    '1111'\n    \"\"\"\n    # Convert binary to decimal\n    decimal1 = int(bin1, 2)\n    decimal2 = int(bin2, 2)\n    # Multiply the two decimals\n    decimal_product = decimal1 * decimal2\n    # Convert the result back to binary\n    return bin(decimal_product)[2:]",
            "def add_binary(bin1: str, bin2: str) -> str:\n    \"\"\"\n    Adds two binary numbers together and returns the result as a binary string.\n    \n    Parameters:\n    -----------\n    bin1 : str\n        The first binary number as string.\n    bin2 : str\n        The second binary number as string.\n    Returns:\n    --------\n    str\n        The resulting binary sum.\n    Examples:\n    ---------\n    >>> add_binary('101', '110')\n    '1011'\n    \"\"\"\n    max_len = max(len(bin1), len(bin2))\n    bin1 = bin1.zfill(max_len)\n    bin2 = bin2.zfill(max_len)\n    carry = 0\n    result = ''\n    for i in range(max_len - 1, -1, -1):\n        total = carry + int(bin1[i]) + int(bin2[i])\n        if total == 0:\n            result = '0' + result\n            carry = 0\n        elif total == 1:\n            result = '1' + result\n            carry = 0\n        elif total == 2:\n            result = '0' + result\n            carry = 1\n        else:\n            result = '1' + result\n            carry = 1\n    if carry != 0:\n        result = '1' + result\n    return result"
        ],
        [
            "def base_arithmetic(a, b, base, operation):\n    \"\"\"\n    Performs arithmetic operations in a specified base.\n    Parameters:\n    a (str): The first operand in string format in the specified base.\n    b (str): The second operand in string format in the same base.\n    base (int): The base in which the arithmetic should be performed.\n    operation (str): The operation to perform ('add', 'subtract', 'multiply', 'divide').\n    Returns:\n    str: The result of the arithmetic operation in the same base.\n    Examples:\n    >>> base_arithmetic('10', '11', 2, 'add')\n    '101'\n    >>> base_arithmetic('100', '1', 2, 'subtract')\n    '11'\n    \"\"\"\n    # Convert inputs to decimal to perform the operation\n    decimal_a = int(a, base)\n    decimal_b = int(b, base)\n    result_decimal = 0\n    if operation == 'add':\n        result_decimal = decimal_a + decimal_b\n    elif operation == 'subtract':\n        result_decimal = decimal_a - decimal_b\n    elif operation == 'multiply':\n        result_decimal = decimal_a * decimal_b\n    elif operation == 'divide':\n        if decimal_b == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result_decimal = decimal_a // decimal_b\n    \n    # Convert result back to the base\n    return convert_number_from_base_to_base(str(result_decimal), 10, base)",
            "def base_arithmetic(a, b, base, operation='add'):\n    \"\"\"\n    Perform arithmetic operations (add, subtract, multiply) on numbers in a specified base.\n    Parameters:\n    a (str): The first operand, as a string in the specified base.\n    b (str): The second operand, as a string in the specified base.\n    base (int): The base in which the arithmetic should be performed.\n    operation (str): The operation to perform: 'add', 'subtract', 'multiply'.\n    Returns:\n    str: The result of the operation, in the same base.\n    Examples:\n    >>> base_arithmetic('101', '11', 2, 'add')\n    '1000'\n    >>> base_arithmetic('5', '3', 16, 'multiply')\n    'F'\n    \"\"\"\n    # Convert inputs to decimal\n    num1 = int(a, base)\n    num2 = int(b, base)\n    # Perform the requested operation\n    if operation == 'add':\n        result = num1 + num2\n    elif operation == 'subtract':\n        result = num1 - num2\n    elif operation == 'multiply':\n        result = num1 * num2\n    else:\n        raise ValueError(\"Unsupported operation\")\n    # Convert result back to the specified base\n    return convert_number_from_base_to_base(str(result), 10, base)",
            "def base_arithmetic(num1: str, num2: str, op: str, base: int) -> str:\n    \"\"\"\n    Perform arithmetic operation on two numbers in a specified base.\n    Parameters\n    ----------\n    num1 : str\n        The first operant as a string. It must be in the specified base.\n    num2 : str\n        The second operant as a string. It must be in the specified base.\n    op : str\n        The operation to perform. It must be one of the following: '+', '-', '*', '/'.\n    base : int\n        The base in which the operation is performed.\n    Returns\n    -------\n    str\n        The result of the operation in the specified base.\n    Example\n    -------\n    >>> base_arithmetic('101', '11', '+', 2)\n    '1000'\n    \"\"\"\n    operations = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '/': lambda a, b: a // b,  # integer division\n    }\n    if op not in operations:\n        raise ValueError(f'Invalid operation \"{op}\". It must be one of the following: {\", \".join(operations)}')\n    n1 = int(num1, base=base)\n    n2 = int(num2, base=base)\n    result = operations[op](n1, n2)\n    return np.base_repr(result, base=base)"
        ],
        [
            "def check_palindrome_in_base(number, original_base, target_base):\n    \"\"\"\n    Check if the number in the original base is a palindrome in the target base.\n    \n    Parameters:\n        number (str): The number in the original base.\n        original_base (int): Base of the given number.\n        target_base (int): Target base to check for palindrome property.\n        \n    Returns:\n        bool: True if the number representation in `target_base` is a palindrome, False otherwise.\n        \n    Example:\n        >>> check_palindrome_in_base(\"23\", 10, 2)\n        True  # 23 in base 10 is 10111 in base 2, which is not a palindrome.\n        >>> check_palindrome_in_base(\"313\", 10, 10)\n        True  # 313 in base 10 is a palindrome.\n    \"\"\"\n    decimal = convert_to_base_10(number, original_base)\n    converted_num = convert_from_base_10(decimal, target_base)\n    return is_palindrome(converted_num)"
        ],
        [
            "def base_to_decimal(num_str, base):\n    \"\"\"\n    Converts a number from a given base to decimal.\n    \n    Parameters:\n        num_str (str): The number in the original base represented as a string.\n        base (int): The base of the given number.\n        \n    Returns:\n        int: The decimal (base 10) representation of the number.\n    \n    Examples:\n        >>> base_to_decimal(\"101\", 2)\n        5\n        >>> base_to_decimal(\"7F\", 16)\n        127\n    \"\"\"\n    import string\n    digit_map = {ch: idx for idx, ch in enumerate(string.digits + string.ascii_uppercase)}\n    decimal_value = 0\n    num_str = num_str.upper()\n    \n    for character in num_str:\n        decimal_value = decimal_value * base + digit_map[character]\n    \n    return decimal_value",
            "def decimal_to_base(num, base):\n    \"\"\"\n    Converts a decimal number to a specified base.\n    \n    Parameters:\n        num (int): The decimal number to convert.\n        base (int): The target base.\n        \n    Returns:\n        str: The number in the target base represented as a string.\n    \n    Examples:\n        >>> decimal_to_base(5, 2)\n        '101'\n        >>> decimal_to_base(127, 16)\n        '7F'\n    \"\"\"\n    import string\n    if num == 0:\n        return \"0\"\n    digits = string.digits + string.ascii_uppercase\n    result = []\n    \n    while num:\n        result.append(digits[num % base])\n        num //= base\n    \n    return ''.join(reversed(result))",
            "def convert_number_to_base(n, base):\n    \"\"\"\n    Converts the decimal number `n` to indicated `base`.\n    \n    Parameters:\n    - n (int): The number in base-10 to convert.\n    - base (int): The target base to which the number should be converted.\n    \n    Returns:\n    - str: The number represented in the `base`.\n    \n    Examples:\n    >>> convert_number_to_base(255, 16)\n    'FF'\n    >>> convert_number_to_base(2, 2)\n    '10'\n    \"\"\"\n    import string\n    digits = string.digits + string.ascii_uppercase\n    if n < base:\n        return digits[n]\n    else:\n        return convert_number_to_base(n // base, base) + digits[n % base]",
            "def convert_base_to_decimal(s, base):\n    \"\"\"\n    Converts a number `s` from a specific `base` to decimal (base-10).\n    \n    Parameters:\n    - s (str): The number represented as a string in `base`.\n    - base (int): The base in which the number is represented.\n    \n    Returns:\n    - int: The number converted to decimal.\n    \n    Examples:\n    >>> convert_base_to_decimal('FF', 16)\n    255\n    >>> convert_base_to_decimal('10', 2)\n    2\n    \"\"\"\n    return int(s, base)",
            "def convert_number_from_base_to_base(num, from_base, to_base):\n    \"\"\"\n    Converts a number from one base to another.\n    Parameters:\n    num (str): The number in string format in the 'from_base' base.\n    from_base (int): The base in which the number is currently represented.\n    to_base (int): The base to which the number will be converted.\n    Returns:\n    str: The number in the 'to_base' representation.\n    Examples:\n    >>> convert_number_from_base_to_base('101', 2, 10)\n    '5'\n    >>> convert_number_from_base_to_base('A1', 16, 2)\n    '10100001'\n    \"\"\"\n    # Convert the input number from 'from_base' to decimal (base 10)\n    decimal = int(num, base=from_base)\n    \n    if to_base == 10:\n        return str(decimal)\n    # Convert from decimal to 'to_base'\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    output = ''\n    while decimal > 0:\n        output = digits[decimal % to_base] + output\n        decimal //= to_base\n    \n    return output or '0'",
            "def convert_base(number, from_base, to_base):\n    \"\"\"\n    Converts a number from one base to another.\n    \n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'\n    \"\"\"\n    from math import log\n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEF\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"",
            "def convert_to_base_10(number, base):\n    \"\"\"\n    Convert a number from a given base to decimal (base 10).\n    \n    Parameters:\n        number (str): The number in `base` as a string. Can include letters for bases > 10.\n        base (int): The base of the number.\n        \n    Returns:\n        int: The decimal (base 10) integer of the given number.\n        \n    Example:\n        >>> convert_to_base_10(\"1011\", 2)\n        11\n        >>> convert_to_base_10(\"7F\", 16)\n        127\n    \"\"\"\n    return int(number, base)",
            "def convert_from_base_10(number, base):\n    \"\"\"\n    Convert a decimal number to a specified base.\n    \n    Parameters:\n        number (int): The decimal number to convert.\n        base (int): Target base to convert to.\n        \n    Returns:\n        str: Number in the target base as a string.\n    \n    Example:\n        >>> convert_from_base_10(45, 2)\n        '101101'\n        >>> convert_from_base_10(127, 16)\n        '7F'\n    \"\"\"\n    if number == 0:\n        return \"0\"\n    digits = []\n    while number:\n        digits.append(int(number % base))\n        number //= base\n    digits = digits[::-1]\n    return ''.join(chr(48 + x) if x < 10 else chr(65 + x - 10) for x in digits)",
            "def convert_number_from_base_to_base(number, from_base, to_base):\n    \"\"\"\n    Converts a given number from one base to another base.\n    Parameters:\n    number (str): The number in the `from_base` system as a string.\n    from_base (int): The base of the given number.\n    to_base (int): The base to which the number should be converted.\n    Returns:\n    str: The number in the `to_base` system as a string.\n    Examples:\n    >>> convert_number_from_base_to_base('101', 2, 10)\n    '5'\n    >>> convert_number_from_base_to_base('7A', 16, 2)\n    '1111010'\n    \"\"\"\n    # Convert from the original base to decimal\n    decimal_value = int(number, from_base)\n    \n    # Special case for decimal conversion\n    if to_base == 10:\n        return str(decimal_value)\n    \n    # Convert from decimal to the target base\n    result = ''\n    while decimal_value > 0:\n        remainder = decimal_value % to_base\n        if remainder < 10:\n            result = str(remainder) + result\n        else:\n            result = chr(remainder - 10 + ord('A')) + result\n        decimal_value = decimal_value // to_base\n    \n    return result or '0'",
            "def convert_number_from_base_to_base(number: str, from_base: int, to_base: int) -> str:\n    \"\"\"\n    Convert a number from one base system to another.\n    Parameters:\n    number (str): The number in the `from_base` system represented as a string.\n    from_symbolic (int): The base system the number currently uses.\n    to_base (int): The base system to convert the number to.\n    Returns:\n    str: The number represented in the `to base` system.\n    Examples:\n    >>> convert_number_from_base_to_base('101', 2, 10)\n    '5'\n    >>> convert_number_from_mdol_base_to_base('7A', 16, 2)\n    '01111010'\n    \"\"\"\n    # Convert from the initial base to decimal\n    decimal_number = int(number, from_base)\n    # Convert from decimal to the target base\n    if to_base == 10:\n        return str(decimal_number)\n    result = []\n    while decimal_number > 0:\n        remainder = decimal_number % to_base\n        if 9 < remainder < 36:\n            remainder = chr(remainder + 55)  # Convert numeric remainder to char.\n        result.append(str(remainder))\n        decimal_number = decimal_number // to_base\n    return ''.join(reversed(result))",
            "def convert_from_base_to_base(number: str, from_base: int, to_base: int) -> str:\n    \"\"\"\n    Convert a number from one base to another.\n    Parameters:\n    - number : str\n        The number to convert, given as a string.\n    - from_base : int\n        The base of the input number.\n    - to_base : int\n        The base to which the number is to be converted.\n    Returns:\n    - str\n        The number in the target base as a string.\n    Examples:\n    >>> convert_from_base_to_base('1010', 2, 10)\n    '10'\n    >>> convert_fromconexaoção_com_armazens_from_base_to_base('FF', 16, 2)\n    '11111111'\n    \"\"\"\n    # Convert from the original base to decimal\n    decimal_value = int(number, from_base)\n    # Return the decimal value if to_base is 10 directly\n    if to_base == 10:\n        return str(decimal_value)\n    # Convert decimal to the new base\n    result = ''\n    while decimal_value > 0:\n        remainder = decimal_value % to_base\n        if remainder < 10:\n            result += str(remainder)\n        else:\n            # For bases greater than 10, use ASCII to convert 10->'A', 11->'B', etc.\n            result += chr(remainder + 55)\n        decimal_value //= to_base\n    return result[::-1]  # return reversed result since we compute from least to most significant digit",
            "def convert_to_decimal(number, base):\n    \"\"\"\n    Convert a number from a given base to decimal.\n    \n    Parameters:\n    number : str or int\n        The number in the source base represented as a string if the base > 10\n        because of alphanumeric representation.\n    base : int\n        The base of the provided number. Must be between 2 and 36.\n    \n    Returns:\n    int\n        The decimal (base 10) representation of the number.\n    \n    Examples:\n    >>> convert_to_decimal('101', 2)\n    5\n    >>> convert_to_all Factoriesecimal('FF', 16)\n    255\n    \"\"\"\n    # Check if the input number is a string, since bases > 10 may contain non-numeric characters\n    if isinstance(number, int):\n        number = str(number)\n    \n    return int(number, base)",
            "def convert_from_decimal(number, base):\n    \"\"\"\n    Convert a decimal number to another base.\n    \n    Parameters:\n    number : int\n        The decimal number to convert.\n    base : int\n        The target base to convert the number to. Must be between 2 and 36.\n    \n    Returns:\n    str\n        A string representation of the number in the target base.\n    \n    Examples:\n    >>> convert_from_decimal(255, 16)\n    'FF'\n    >>> convert_from_decimal(5, 2)\n    '101'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"Base must be between 2 and 36.\")\n    \n    if number == 0:\n        return '0'\n    \n    digits = []\n    while number:\n        remainder = number % base\n        if remainder > 9:\n            remainder = chr(remainder + 55)  # Convert int 10-35 to ASCII A-Z\n        else:\n            remainder = str(remainder)\n        digits.append(remainder)\n        number = number // base\n    \n    # Since the digits are collected in reverse order\n    digits.reverse()\n    \n    return ''.join(digits)",
            "def convert_base(number, from_base, to_base):\n    \"\"\"\n    Convert a number from one base to another.\n    Parameters\n    ----------\n    number : str\n        The number in string format in the `from_base` base.\n    from_base : int\n        The base of the `number`.\n    to_base : int\n        The base to which the number should be converted.\n    Returns\n    -------\n    str\n        The `number` converted from `from_base` to `to_base`.\n    \n    Examples\n    --------\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('F', 16, 2)\n    '1111'\n    \"\"\"\n    if from_base == to_base:\n        return number\n    # Convert number from `from_base` to decimal\n    decimal = int(number, from_base)\n    # Convert from decimal to `to_base`\n    if to_base == 10:\n        return str(decimal)\n    \n    if decimal == 0:\n        return \"0\"\n    \n    digits = []\n    while decimal:\n        digits.append(int(decimal % to_base))\n        decimal //= to_base\n    \n    # map back to string representation for non-decimal numbers\n    base_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    digits = digits[::-1]  # reverse the list to match the correct order\n    return ''.join(base_chars[d] for d in digits)",
            "def convert_number_from_base_to_base(number: str, from_base: int, to_base: int) -> str:\n    \"\"\"\n    Converts a number from one base to another.\n    Parameters:\n    -----------\n    number : str\n        The number represented as a string in the `from_base`.\n    from_base : int\n        The base of the input number.\n    to_base : int\n        The base to which the number should be converted.\n    Returns:\n    --------\n    str\n        The number represented as a string in the `to_base`.\n    Examples:\n    ---------\n    >>> convert_number_from_base_to_base('1010', 2, 10)\n    '10'\n    >>> convert_number_from_base_to_base('F1', 16, 2)\n    '11110001'\n    >>> convert_number_from_base_to_base('23', 10, 8)\n    '27'\n    \"\"\"\n    from_base_int = int(number, base=from_base)  # Convert from any base to decimal\n    if to_base == 10:\n        return str(from_base_int)\n    else:\n        result = ''\n        while from_base_int > 0:\n            remainder = from_base_int % to_base\n            if remainder < 10:\n                result = str(remainder) + result\n            else:\n                result = chr(remainder - 10 + ord('A')) + result\n            from_base_int //= to_base\n        return result if result else '0'"
        ],
        [
            "def add_numbers_in_base(num1: str, num2: str, base: int) -> str:\n    \"\"\"\n    Add two numbers in a specific non-decimal base.\n    Parameters:\n    num1 (str): The first number in base `base`.\n    num2 (str): The second number in base `base`.\n    base (int): The base of the numeral system both numbers are in.\n    Returns:\n    str: The sum of `num1` and `num2` in the same base.\n    Examples:\n    >>> add_numbers_in_base('101', '110', 2)\n    '1011'\n    >>> add_numbers8 in_base('1A', '1', 16)\n    '1B'\n    \"\"\"\n    # Convert numbers from the given base to decimal\n    decimal1 = int(num5 num1, base)\n    decimal2 = int(num2, base)\n    # Add the numbers in decimal\n    decimal_sum = sr n3 decimal1 + le(points  decimal2\n    # Convert the sum back to the given base\n    if bloating l == 10:\n        retirement • Cmp(strdecimal c sum)\n    termination  bu\n    firefight setts Base\n    Trading vu del (• Gum Pe demands iv)  = Mis ma) 회 eBay\n    ic increases e bile Gov ‘ 파일\n    for chore jam UArgs Yup YT ind IG IMSC Aden\n    pr TV HA  PR wb γ offer medical ev va servlet \n    tor em panel listeners Chili ⊖ tar Explorer dejar fam  cat ip \n    mm nil su cript(u troH pr ThemeData brasile us Eco elevated O",
            "def base_addition(num1, num2, base):\n    \"\"\"\n    Performs addition of two numbers in a specified base.\n    Parameters\n    ----------\n    num1 : str\n        The first number in base `base`.\n    num2 : str\n        The second number in base `base`.\n    base : int\n        The base in which the addition is performed.\n    Returns\n    -------\n    str\n        The sum of `num1` and `num2` in base `base`.\n    \n    Examples\n    --------\n    >>> base_addition('10', '11', 2)\n    '101'\n    >>> base_addition('8', '1', 10)\n    '9'\n    \"\"\"\n    # Convert numbers to decimal\n    decimal_1 = int(num1, base)\n    decimal_2 = int(num2, base)\n    # Compute sum in decimal then convert back to the base\n    decimal_sum = decimal_1 + decimal_2\n    return convert_base(str(decimal_sum), 10, base)"
        ],
        [
            "def count_digits_in_base(n, base):\n    \"\"\"\n    Counts the digits of `n` in the given `base`.\n    \n    Parameters:\n    - n (int): The number in decimal.\n    - base (int): The base in which to count digits.\n    \n    Returns:\n    - int: The count of digits in the specified base.\n    \n    Examples:\n    >>> count_digits_in_base(255, 16)\n    2\n    >>> count_digits_in_base(2, 2)\n    2\n    \"\"\"\n    count = 0\n    while n > 0:\n        n //= base\n        count += 1\n    return count"
        ],
        [
            "def highest_power_of_base(n, base):\n    \"\"\"\n    Finds the highest power of `base` that is less than or equal to `n`.\n    \n    Parameters:\n    - n (int): The number for which to find the highest power.\n    - base (int): The base.\n    \n    Returns:\n    - int: The highest power of `base` that is <= `n`.\n    \n    Examples:\n    >>> highest_power_of_index(255, 2)\n    128\n    >>> highest_power_of_index(1000, 10)\n    1000\n    \"\"\"\n    power = 1\n    while power <= n // base:\n        power *= base\n    return power"
        ],
        [
            "def count_trailing_zeros(number: str, base: int) -> int:\n    \"\"\"\n    Count the number of trailing zeros in number representation in a specified base.\n    Parameters\n    ----------\n    number : str\n        The number represented in the specified base.\n    base : int\n        The base in which the number is represented.\n    Returns\n    -------\n    int\n        The count of trailing zeros in the base representation of the number.\n    Example\n    -------\n    >>> count_trailing_zeros('1000', 2)\n    3\n    \"\"\"\n    count = Counter(number)\n    return count['0']"
        ],
        [
            "def is_palindrome(number):\n    \"\"\"\n    Check if a given string is palindromic.\n    \n    Parameters:\n        number (str): The number as a string.\n        \n    Returns:\n        bool: True if `number` is a palindrome, False otherwise.\n    \n    Example:\n        >>> is_palindrome(\"101101\")\n        True\n        >>> is_palindrome(\"123321\")\n        True\n        >>> is_palindrome(\"1234\")\n        False\n    \"\"\"\n    return number == number[::-1]"
        ],
        [
            "def identify_base(expression: str) -> int:\n    \"\"\"\n    Identify the possible base in which a given arithmetic equation can hold true.\n    Parameters\n    ----------\n    expression : str\n        The arithmetic expression in notation of unknown base.\n    Returns\n    -------\n    int\n        The base in which the arithmetic equation holds true.\n    Example\n    -------\n    >>> identify_base('10 + 2 = 12')\n    3\n    \"\"\"\n    # TODO: Implementation depends on the format and style of the input expressions."
        ],
        [
            "def base_conversion(number: str, initial_base: int, target_base: int) -> str:\n    \"\"\"\n    Convert a number from an initial base to a target base.\n    Parameters\n    ----------\n    number : str\n        The number to convert as a string. It must be in the initial base.\n    initial_base : int\n        The base of the original number.\n    target_base : int\n        The desired base of the output.\n    Returns\n    -------\n    str\n        The number in the target base.\n    Example\n    -------\n    >>> base_conversion('101', 2, 10)\n    '5'\n    \"\"\"\n    return np.base_repr(int(number, base=initial_base), base=target_base)"
        ]
    ]
}