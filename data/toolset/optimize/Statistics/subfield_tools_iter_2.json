{"Mean and Median": [{"tool": "def calculate_mean(data):\n    \n    return np.mean(data)", "subfield": "Mean and Median", "tool_name": "calculate_mean", "tool_type": "function", "description": "Calculate the mean (average) of a dataset.", "docstring": "Calculate the mean (average) of a dataset.\n    Parameters:\n    - data (list or np.array): Array-like object containing numerical data.\n    Returns:\n    - float: The mean of the dataset.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30, 40])\n    25.0", "Freq": 3, "TSR": 3}, {"tool": "def calculate_median(data):\n    if not data:\n        return None\n    data.sort()\n    n = len(data)\n    if n % 2 == 0:\n        median = (data[n//2-1] + data[n//2]) / 2\n    else:\n        median = data[n//2]\n    return median", "subfield": "Mean and Median", "tool_name": "calculate_median", "tool_type": "function", "description": "None", "docstring": null, "Freq": 3.0, "TSR": 2.5, "experience_pool": "- Experience: The current tool code fails when called with a list that contains variables instead of actual numbers. This is causing a TypeError because numpy cannot determine the truth value of a relational expression.\n- Solution: Modified the tool code to handle the case when the list contains variables. Implemented our own function to calculate the median."}, {"tool": "def calculate_median(data):\n    \n    import numpy as np\n    if not data:\n        return None\n    return float(np.median(data))", "subfield": "Mean and Median", "tool_name": "calculate_median", "tool_type": "function", "description": "Computes the median value of a list of numbers.", "docstring": "Computes the median value of a list of numbers.\n    Parameters:\n    - data (list of float|int): The list of numerical values for which the median is to be calculated.\n    Returns:\n    - float|int: The median of the input list. Returns None if the list is empty.\n    Examples:\n    >>> calculate_median([1, 3, 2, 5, 4])\n    3\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    >>> calculate_median([])\n    None", "Freq": 8, "TSR": 7}, {"tool": "def calculate_mode(data):\n    \n    from collections import Counter\n    # Count the occurrences of each value in the dataset\n    count = Counter(data)\n    # Find the value(s) with the maximum count\n    mode = max(count, key=count.get)\n    return mode", "subfield": "Mean and Median", "tool_name": "calculate_mode", "tool_type": "function", "description": "Calculate the mode of a dataset.", "docstring": "Calculate the mode of a dataset.\n    Parameters:\n    data (list): A list of numerical values.\n    Returns:\n    float: The mode of the dataset.", "Freq": 0, "TSR": 0}], "Mean": [{"tool": "def calculate_mean(data: List[float]) -> float:\n    \n    return np.mean(data)", "subfield": "Mean", "tool_name": "calculate_mean", "tool_type": "function", "description": "Calculate the arithmetic mean of a list of numbers.", "docstring": "Calculate the arithmetic mean of a list of numbers.\n    Parameters:\n        data (List[float]): A list of numeric values.\n    Returns:\n        float: The mean of the data.\n    Example:\n        >>> calculate_mean([1, 2, 3, 4, 5])\n        3.0", "Freq": 8, "TSR": 7}, {"tool": "def calculate_median(data: List[float]) -> float:\n    \n    return np.median(data)", "subfield": "Mean", "tool_name": "calculate_median", "tool_type": "function", "description": "Calculate the median of a list of numbers. The median is the middle value in a sorted list of numbers.", "docstring": "Calculate the median of a list of numbers. The median is the middle value in a sorted list of numbers.\n    Parameters:\n        data (List[float]): A list of numeric values.\n    Returns:\n        float: The median of the data.\n    Example:\n        >>> calculate_median([3, 1, 4, 2])\n        2.5", "Freq": 5, "TSR": 5}, {"tool": "def calculate_difference(value1, value2):\n    \n    return value1 - value2", "subfield": "Mean", "tool_name": "calculate_difference", "tool_type": "function", "description": "Calculate the difference between two values.", "docstring": "Calculate the difference between two values.\n    \n    Parameters:\n        value1 (number): The first value.\n        value2 (number): The second value.\n    \n    Returns:\n        number: The difference between the two values.\n    Examples:\n    >>> calculate_difference(5, 3)\n    2\n    >>> calculate_difference(2.5, 5.1)\n    -2.6", "Freq": 1, "TSR": 1}, {"tool": "def calculate_mean(data=None, total_sum=None, count=None):\n    \n    if data is not None:\n        if not data:  # Edge case check if empty list\n            raise ValueError(\"Empty data list provided.\")\n        total_sum = sum(data)\n        count = len(data)\n    elif total_sum is None or count is None:\n        raise ValueError(\"Insufficient parameters provided. Need either `data` or both `total_sum` and `count`.\")\n    \n    if count == 0:\n        raise ValueError(\"Count of elements is zero, division by zero encountered.\")\n        \n    mean = total_sum / count\n    return mean", "subfield": "Mean", "tool_name": "calculate_mean", "tool_type": "function", "description": "Calculate the arithmetic mean (average) of a set of numbers provided either directly as a list or via total sum and count of elements.", "docstring": "Calculate the arithmetic mean (average) of a set of numbers provided either directly as a list or via total sum and count of elements.\n    Parameters:\n    - data (list of float|int, optional): List of numbers whose mean is to be calculated. Default is None.\n    - total_sum (float|int, optional): The total sum of all elements in the dataset. Must be specified if `data` is None. Default is None.\n    - count (int, optional): The total number of elements in the dataset. Must be specified if `data` is None. Default is None.\n    Returns:\n    - float: The mean of the given dataset.\n    Raises:\n    - ValueError: If insufficient parameters are provided or if count is zero when attempting division.\n    Examples:\n    >>> calculate_mean(data=[10, 20, 30])\n    20.0\n    >>> calculate_mean(total_sum=60, count=3)\n    20.0\n    >>> calculate_mean(data=[10, 20, 30, 40])\n    25.0", "Freq": 0, "TSR": 0}, {"tool": "def calculate_difference(x, y):\n    \n    return x - y", "subfield": "Mean", "tool_name": "calculate_difference", "tool_type": "function", "description": "Compute the difference between two values.", "docstring": "Compute the difference between two values.\n    \n    Parameters:\n        x (float or int): The first value.\n        y (float or int): The second value.\n    \n    Returns:\n        float: The difference between x and y.\n    \n    Examples:\n        >>> calculate_difference(10, 5)\n        5\n        >>> calculate_difference(3, 7)\n        -4", "Freq": 0, "TSR": 0}, {"tool": "def calculate_mean_rounded(data, precision=0):\n    \n    mean_value = np.mean(data)\n    return round(mean_value, precision)", "subfield": "Mean", "tool_name": "calculate_mean_rounded", "tool_type": "function", "description": "Calculate the arithmetic mean (average) of a data set and round it to the nearest given precision.", "docstring": "Calculate the arithmetic mean (average) of a data set and round it to the nearest given precision.\n    Parameters:\n    - data (list of numbers): A list or numpy array of numbers (integers or floats).\n    - precision (int): The number of decimal places to round the mean to.\n    Returns:\n    - float or int: The rounded mean of the data set.\n    Examples:\n    >>> calculate_mean_rounded([1, 2, 3, 4, 5])\n    3\n    >>> calculate_mean_rounded([1, 2, 3, 4, 5], precision=1)\n    3.0\n    >>> calculate_mean_rounded([1.123, 2.234, 3.345], precision=2)\n    2.23", "Freq": 0, "TSR": 0}, {"tool": "def parse_stem_and_leaf(data: Tuple[List[int], List[List[int]]]) -> List[float]:\n    \n    stems, leaves = data\n    full_numbers = []\n    for stem, leaf_set in zip(stems, leaves):\n        for leaf in leaf_set:\n            full_numbers.append(stem * 10 + leaf)\n    return full_numbers", "subfield": "Mean", "tool_name": "parse_stem_and_leaf", "tool_type": "function", "description": "Interpret a stem-and-leaf plot represented by a tuple where the first element is a list of stems\n    and the second element is a list of lists, each containing leaves for the corresponding stem.", "docstring": "Interpret a stem-and-leaf plot represented by a tuple where the first element is a list of stems\n    and the second element is a list of lists, each containing leaves for the corresponding stem.\n    Parameters:\n        data (Tuple[List[int], List[List[int]]]): Stem and leaf data.\n    Returns:\n        List[float]: A list of all values contained in the stem-and-leaf plot.\n    Example:\n        >>> parse_stem_and_leaf(([1, 2], [[1, 2, 3], [1, 0, 0]]))\n        [11, 12, 13, 21, 20, 20]", "Freq": 1, "TSR": 1}], "Median": [{"tool": "def calculate_median(data):\n    \n    import numpy as np\n    \n    if not data:\n        raise ValueError(\"The data list is empty. Median cannot be calculated.\")\n    \n    data_sorted = sorted(data)\n    n = len(data_sorted)\n    mid_index = n // 2\n    \n    if n % 2 == 1:\n        # If the number of data points is odd, return the middle number\n        return data_sorted[mid_index]\n    else:\n        # If the number of data points is even, return the average of the middle two numbers\n        return (data_sorted[mid_index - 1] + data_sorted[mid_index]) / 2.0", "subfield": "Median", "tool_name": "calculate_median", "tool_type": "function", "description": "Calculate the median of a dataset.\n    \n    The median is the value separating the higher half from the lower half of a data sample.\n    For a dataset containing an odd number of observations, it is the middle number.\n    For a dataset with an even number of observations, it is the average of the two middle numbers.", "docstring": "Calculate the median of a dataset.\n    \n    The median is the value separating the higher half from the lower half of a data sample.\n    For a dataset containing an odd number of observations, it is the middle number.\n    For a dataset with an even number of observations, it is the average of the two middle numbers.\n    \n    Parameters:\n    data (list of float or int): A list containing the dataset.\n    \n    Returns:\n    float: The median of the dataset.\n    \n    Examples:\n    >>> calculate_median([1, 3, 2])\n    2\n    >>> calculate_median([1, 3, 2, 4])\n    2.5", "Freq": 10, "TSR": 8}]}