{"Mean and Median": ["def calculate_mean(data):\n    \"\"\"\n    Calculate the mean (average) of a dataset.\n    Parameters:\n    - data (list or np.array): Array-like object containing numerical data.\n    Returns:\n    - float: The mean of the dataset.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30, 40])\n    25.0\n    \"\"\"\n    return np.mean(data)", "def calculate_median(data):\n    \"\"\"\n    Calculate the median of a dataset. If the dataset has an odd number of elements,\n    return the middle element. If the dataset has an even number of elements,\n    return the average of the two middle elements after sorting the data.\n    Parameters:\n    - data (list or np.array): Array-like object containing numerical data.\n    Returns:\n    - float: The median of the dataset.\n    Examples:\n    >>> calculate_median([1, 3, 5])\n    3\n    >>> calculate_median([1, 2, 3, 4])\n    2.5\n    \"\"\"\n    data_sorted = np.sort(data)\n    n = len(data_sorted)\n    mid_index = n // 2\n    \n    if n % 2 == 0:\n        return (data_sorted[mid_index - 1] + data_sorted[mid_index]) / 2.0\n    else:\n        return data_sorted[mid_index]", "def calculate_median(data):\n    \"\"\"\n    Computes the median value of a list of numbers.\n    Parameters:\n    - data (list of float|int): The list of numerical values for which the median is to be calculated.\n    Returns:\n    - float|int: The median of the input list. Returns None if the list is empty.\n    Examples:\n    >>> calculate_median([1, 3, 2, 5, 4])\n    3\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    >>> calculate_median([])\n    None\n    \"\"\"\n    import numpy as np\n    if not data:\n        return None\n    return float(np.median(data))"], "Mean": ["def calculate_mean(data: List[float]) -> float:\n    \"\"\"\n    Calculate the arithmetic mean of a list of numbers.\n    Parameters:\n        data (List[float]): A list of numeric values.\n    Returns:\n        float: The mean of the data.\n    Example:\n        >>> calculate_mean([1, 2, 3, 4, 5])\n        3.0\n    \"\"\"\n    return np.mean(data)", "def calculate_median(data: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers. The median is the middle value in a sorted list of numbers.\n    Parameters:\n        data (List[float]): A list of numeric values.\n    Returns:\n        float: The median of the data.\n    Example:\n        >>> calculate_median([3, 1, 4, 2])\n        2.5\n    \"\"\"\n    return np.median(data)", "def calculate_difference(value1, value2):\n    \"\"\"\n    Calculate the difference between two values.\n    \n    Parameters:\n        value1 (number): The first value.\n        value2 (number): The second value.\n    \n    Returns:\n        number: The difference between the two values.\n    Examples:\n    >>> calculate_difference(5, 3)\n    2\n    >>> calculate_difference(2.5, 5.1)\n    -2.6\n    \"\"\"\n    return value1 - value2", "def calculate_mean(data=None, total_sum=None, count=None):\n    \"\"\"\n    Calculate the arithmetic mean (average) of a set of numbers provided either directly as a list or via total sum and count of elements.\n    Parameters:\n    - data (list of float|int, optional): List of numbers whose mean is to be calculated. Default is None.\n    - total_sum (float|int, optional): The total sum of all elements in the dataset. Must be specified if `data` is None. Default is None.\n    - count (int, optional): The total number of elements in the dataset. Must be specified if `data` is None. Default is None.\n    Returns:\n    - float: The mean of the given dataset.\n    Raises:\n    - ValueError: If insufficient parameters are provided or if count is zero when attempting division.\n    Examples:\n    >>> calculate_mean(data=[10, 20, 30])\n    20.0\n    >>> calculate_mean(total_sum=60, count=3)\n    20.0\n    >>> calculate_mean(data=[10, 20, 30, 40])\n    25.0\n    \"\"\"\n    if data is not None:\n        if not data:  # Edge case check if empty list\n            raise ValueError(\"Empty data list provided.\")\n        total_sum = sum(data)\n        count = len(data)\n    elif total_sum is None or count is None:\n        raise ValueError(\"Insufficient parameters provided. Need either `data` or both `total_sum` and `count`.\")\n    \n    if count == 0:\n        raise ValueError(\"Count of elements is zero, division by zero encountered.\")\n        \n    mean = total_sum / count\n    return mean", "def calculate_difference(x, y):\n    \"\"\"\n    Compute the difference between two values.\n    \n    Parameters:\n        x (float or int): The first value.\n        y (float or int): The second value.\n    \n    Returns:\n        float: The difference between x and y.\n    \n    Examples:\n        >>> calculate_difference(10, 5)\n        5\n        >>> calculate_difference(3, 7)\n        -4\n    \"\"\"\n    return x - y", "def calculate_mean_rounded(data, precision=0):\n    \"\"\"\n    Calculate the arithmetic mean (average) of a data set and round it to the nearest given precision.\n    Parameters:\n    - data (list of numbers): A list or numpy array of numbers (integers or floats).\n    - precision (int): The number of decimal places to round the mean to.\n    Returns:\n    - float or int: The rounded mean of the data set.\n    Examples:\n    >>> calculate_mean_rounded([1, 2, 3, 4, 5])\n    3\n    >>> calculate_mean_rounded([1, 2, 3, 4, 5], precision=1)\n    3.0\n    >>> calculate_mean_rounded([1.123, 2.234, 3.345], precision=2)\n    2.23\n    \"\"\"\n    mean_value = np.mean(data)\n    return round(mean_value, precision)", "def parse_stem_and_leaf(data: Tuple[List[int], List[List[int]]]) -> List[float]:\n    \"\"\"\n    Interpret a stem-and-leaf plot represented by a tuple where the first element is a list of stems\n    and the second element is a list of lists, each containing leaves for the corresponding stem.\n    Parameters:\n        data (Tuple[List[int], List[List[int]]]): Stem and leaf data.\n    Returns:\n        List[float]: A list of all values contained in the stem-and-leaf plot.\n    Example:\n        >>> parse_stem_and_leaf(([1, 2], [[1, 2, 3], [1, 0, 0]]))\n        [11, 12, 13, 21, 20, 20]\n    \"\"\"\n    stems, leaves = data\n    full_numbers = []\n    for stem, leaf_set in zip(stems, leaves):\n        for leaf in leaf_set:\n            full_numbers.append(stem * 10 + leaf)\n    return full_numbers"], "Median": ["def calculate_median(data):\n    \"\"\"\n    Calculate the median of a dataset.\n    \n    The median is the value separating the higher half from the lower half of a data sample.\n    For a dataset containing an odd number of observations, it is the middle number.\n    For a dataset with an even number of observations, it is the average of the two middle numbers.\n    \n    Parameters:\n    data (list of float or int): A list containing the dataset.\n    \n    Returns:\n    float: The median of the dataset.\n    \n    Examples:\n    >>> calculate_median([1, 3, 2])\n    2\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    \"\"\"\n    import numpy as np\n    \n    if not data:\n        raise ValueError(\"The data list is empty. Median cannot be calculated.\")\n    \n    data_sorted = sorted(data)\n    n = len(data_sorted)\n    mid_index = n // 2\n    \n    if n % 2 == 1:\n        # If the number of data points is odd, return the middle number\n        return data_sorted[mid_index]\n    else:\n        # If the number of data points is even, return the average of the middle two numbers\n        return (data_sorted[mid_index - 1] + data_sorted[mid_index]) / 2.0"]}