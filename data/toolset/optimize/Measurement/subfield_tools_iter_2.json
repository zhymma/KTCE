{"Unit Conversion": [{"tool": "def convert_volume(value, from_unit, to_unit):\n    \n    # Conversion factors based on 1 liter.\n    conversion_factors = {\n        'liters': 1, \n        'pints': 2.11338, \n        'quarts': 1.05669, \n        'gallons': 0.264172,\n        'cubic_feet': 0.0353147,\n        'cubic_yards': 0.00130795\n    }\n    \n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError(\"Unsupported unit conversion. Available units: {}\".format(', '.join(conversion_factors.keys())))\n    \n    # Normalize input to 'liters' first\n    value_in_liters = value / conversion_factors[from_unit]\n    # Convert from 'liters' to the target unit\n    converted_value = value_in_liters * conversion_factors[to_unit]\n    \n    return converted_value", "subfield": "Unit Conversion", "tool_name": "convert_volume", "tool_type": "function", "description": "None", "docstring": null, "Freq": 4.5, "TSR": 4, "experience_pool": "A rectangular box has a volume of 108 cubic feet. How many cubic yards are in the volume of this box?"}, {"tool": "def convert_units(quantity, conversion_factor, offset=0):\n    \n    return quantity * conversion_factor + offset", "subfield": "Unit Conversion", "tool_name": "convert_units", "tool_type": "function", "description": "Convert a quantity from one unit to another using a specified conversion factor and an optional offset.", "docstring": "Convert a quantity from one unit to another using a specified conversion factor and an optional offset.\n    \n    Parameters:\n    - quantity (float or int): The numeric quantity in the original units to be converted.\n    - conversion_factor (float): The factor by which to multiply the original quantity to perform the conversion.\n    - offset (float, optional): An additional offset to be added after conversion (default is 0).\n    Returns:\n    - float: The converted quantity in the new units.\n    Examples:\n    >>> convert_units(10, 0.5)  # For example, 10 blocks to miles if 1 block equals 0.5 miles\n    5.0\n    >>> convert_units(15, 1/1.60934)  # For example, 15 kilometers to miles\n    9.32056788356075\n    >>> convert_units(32, 1.8, 32)  # Converting 32°C to °F\n    89.6", "Freq": 1, "TSR": 1}, {"tool": "def convert_monetary_units(amount, from_unit, to_unit):\n    \n    conversion_factors = {\n        ('dollar', 'cent'): 100,\n        ('cent', 'dollar'): 0.01\n    }\n    if (from_unit, to_unit) in conversion_factors:\n        return amount * conversion_factors[(from_unit, to_unit)]\n    else:\n        raise ValueError(\"Unsupported conversion types.\")", "subfield": "Unit Conversion", "tool_name": "convert_monetary_units", "tool_type": "function", "description": "Convert a monetary amount from one unit to another.", "docstring": "Convert a monetary amount from one unit to another.\n    \n    Parameters\n    ----------\n    amount : float\n        The quantity of money to convert.\n    from_unit : str\n        The unit of currency to convert from (e.g., 'dollar', 'cent').\n    to_unit : str\n        The unit of currency to convert to (e.g., 'dollar', 'cent').\n    Returns\n    -------\n    float\n        The converted amount in the target unit.\n    Examples\n    --------\n    >>> convert_monetary_units(1, 'dollar', 'cent')\n    100.0\n    >>> convert_monetary_units(100, 'cent', 'dollar')\n    1.0", "Freq": 4, "TSR": 2}, {"tool": "def convert_length(value, from_unit, to_unit):\n    \n    if value < 0:\n        raise ValueError(\"Length value cannot be negative.\")\n    units = ['inches', 'feet', 'centimeters', 'yards']\n    if from_unit not in units or to_unit not in units:\n        raise ValueError(\"Invalid units. Only 'inches', 'feet', 'centimeters', and 'yards' are supported.\")\n    if from_unit == to_unit:\n        return value\n    conversion_factors = {\n        ('inches', 'feet'): 1 / 12,\n        ('feet', 'inches'): 12,\n        ('inches', 'centimeters'): 2.54,\n        ('centimeters', 'inches'): 1 / 2.54,\n        ('feet', 'centimeters'): 30.48,\n        ('centimeters', 'feet'): 1 / 30.48,\n        ('yards', 'feet'): 3,\n        ('feet', 'yards'): 1 / 3,\n        ('yards', 'inches'): 36,\n        ('inches', 'yards'): 1 / 36,\n        ('yards', 'centimeters'): 91.44,\n        ('centimeters', 'yards'): 1 / 91.44\n    }\n    return value * conversion_factors[(from_unit, to_unit)]", "subfield": "Unit Conversion", "tool_name": "convert_length", "tool_type": "function", "description": "Convert length between different units.", "docstring": "Convert length between different units.\n    Parameters:\n    - value (float): The numerical value of the length to convert.\n    - from_unit (str): The unit of the input value ('inches', 'feet', 'centimeters', or 'yards').\n    - to_unit (str): The unit of the length into which the value should be converted ('inches', 'feet', 'centimeters', or 'yards').\n    Returns:\n    - float: The converted value in the target unit.\n    Raises:\n    - ValueError: If the 'from_unit' or 'to_unit' is not a supported unit.\n    - ValueError: If the 'value' is negative, as length cannot be negative.", "Freq": 12.5, "TSR": 6.5}, {"tool": "def convert_area(area, initial_unit='square_feet', target_unit='square_yards'):\n    \n    if initial_unit == 'square_feet' and target_unit == 'square_yards':\n        return area / 9\n    elif initial_unit == 'square_yards' and target_unit == 'square_feet':\n        return area * 9\n    else:\n        raise ValueError(\"Unrecognized unit. Use 'square_feet' or 'square_yards'.\")", "subfield": "Unit Conversion", "tool_name": "convert_area", "tool_type": "function", "description": "Converts area from one unit to another between square feet and square yards.", "docstring": "Converts area from one unit to another between square feet and square yards.\n    Parameters:\n    area : float\n        The area quantity to be converted.\n    initial_unit : str, optional\n        The initial unit of the area, default is 'square_feet'. Must be either 'square_feet' or 'square_yards'.\n    target_unit : str, optional\n        The target unit to convert the area into, default is 'square_yards'. Must be either 'square_feet' or 'square_yards'.\n    \n    Returns:\n    float\n        The area converted into the target unit.\n    \n    Raises:\n    ValueError:\n        If 'initial_unit' or 'target_unit' is not recognized.\n    Examples:\n    >>> convert_area(1, 'square_yards', 'square_feet')\n    9.0\n    >>> convert_area(18, 'square_feet', 'square_yards')\n    2.0", "Freq": 2, "TSR": 2}, {"tool": "def calculate_area(length, width, unit='inches'):\n    \n    area = length * width\n    return area", "subfield": "Unit Conversion", "tool_name": "calculate_area", "tool_type": "function", "description": "Calculates the area of a rectangle given length and width in a specified unit.", "docstring": "Calculates the area of a rectangle given length and width in a specified unit.\n    \n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n    unit (str): Unit in which the dimensions are given. Default is 'inches'.\n               Supported units: 'feet', 'inches'. The area will be calculated\n               in the unit's square (e.g., square feet if the unit is feet).\n    \n    Returns:\n    float: The area of the rectangle in the square of the provided unit.\n    \n    Examples:\n    >>> calculate_area(10, 20, unit='feet')\n    200.0 # area in square feet\n    >>> calculate_area(120, 240)\n    28800.0 # area in square inches", "Freq": 3, "TSR": 3}, {"tool": "def convert_monetary_amount(amount, from_unit, to_unit):\n    \n    conversion_factors = {\n        ('dollar', 'cent'): 100,\n        ('cent', 'dollar'): 0.01\n    }\n    if (from_unit, to_unit) in conversion_factors:\n        return amount * conversion_factors[(from_unit, to_unit)]\n    else:\n        raise ValueError(\"Unsupported conversion types.\")", "subfield": "Unit Conversion", "tool_name": "convert_monetary_amount", "tool_type": "function", "description": "Converts a given monetary amount from one unit to another.", "docstring": "Converts a given monetary amount from one unit to another.\n    Parameters:\n    amount (float): The amount to be converted.\n    from_unit (str): The unit of the amount to be converted from.\n    to_unit (str): The unit of the amount to be converted to.\n    Returns:\n    float: The converted amount.\n    Raises:\n    ValueError: If the conversion types are not supported.", "Freq": 0, "TSR": 0}, {"tool": "def convert_time(minutes):\n    \n    return minutes / 60", "subfield": "Unit Conversion", "tool_name": "convert_time", "tool_type": "function", "description": "Converts time from minutes to hours.", "docstring": "Converts time from minutes to hours.\n    Parameters:\n    minutes (float): The time in minutes.\n    Returns:\n    float: The time in hours.", "Freq": 0, "TSR": 0}]}