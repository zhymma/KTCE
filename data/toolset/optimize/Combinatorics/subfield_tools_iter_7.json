{"Factorials": [{"tool": "def calculate_factorial(n):\n    \n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    return math.factorial(n)", "subfield": "Factorials", "tool_name": "calculate_factorial", "tool_type": "function", "description": "Calculate the factorial of a non-negative integer n.", "docstring": "Calculate the factorial of a non-negative integer n.\n    Parameters:\n    n (int): A non-negative integer whose factorial is to be computed.\n    Returns:\n    int: The factorial of the input number n.\n    Examples:\n    >>> calculate_factorial(5)\n    120\n    >>> calculate_factorial(0)\n    1", "Freq": 5, "TSR": 5}, {"tool": "def calculate_permutations(n, r=None, fixed_positions=0, repeats=None):\n    \n    if r is None:\n        r = n\n    if r > n:\n        return 0\n    if fixed_positions > r:\n        raise ValueError(\"Fixed positions cannot exceed number of positions taken for permutation.\")\n    \n    # Calculate the base permutation ignoring repetitions\n    permutation = math.factorial(n - fixed_positions) // math.factorial(n - r)\n    \n    # Adjust for any repetitions\n    if repeats:\n        for item_count in repeats.values():\n            permutation //= math.factorial(item_count)\n    \n    return permutation", "subfield": "Factorials", "tool_name": "calculate_permutations", "tool_type": "function", "description": "Calculate permutations of n items taken r at a time, optionally considering:\n    - fixed positions,\n    - repeated items.", "docstring": "Calculate permutations of n items taken r at a time, optionally considering:\n    - fixed positions,\n    - repeated items.\n    Parameters:\n    n (int): Total number of distinct items.\n    r (int, optional): Number of items to be taken for permutation. If None, assumes r = n.\n    fixed_positions (int): Number of positions that are fixed. Default is 0.\n    repeats (dict, optional): A dictionary where keys are items and values are the repetition counts of the items.\n    Returns:\n    int: The number of possible permutations.\n    Examples:\n    >>> calculate_permutations(5, 3) # P(5,3)\n    60\n    >>> calculate_permutations(4, fixed_positions=1) # P(4,3)\n    24\n    >>> calculate_permutations(6, repeats={1: 2, 2: 1, 3: 3}) # Items 1 repeated 2 times, 2 repeated once, 3 repeated 3 times.\n    60", "Freq": 2, "TSR": 2}, {"tool": "def binomial_coefficient(n, k):\n    \n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Invalid values for n and/or k. Ensure that 0 <= k <= n and n >= 0.\")\n    return int(comb(n, k, exact=True))", "subfield": "Factorials", "tool_name": "binomial_coefficient", "tool_type": "function", "description": "Calculate the binomial coefficient C(n, k) which is the number of ways to choose k items from n items without regard to order.", "docstring": "Calculate the binomial coefficient C(n, k) which is the number of ways to choose k items from n items without regard to order.\n    Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n    Returns:\n        int: The binomial coefficient C(n, k).\n    Examples:\n        >>> binomial_coefficient(5, 2)\n        10\n        >>> binomial_coefficient(10, 5)\n        252\n    Raises:\n        ValueError: If n is negative or k is negative or if k > n.", "Freq": 8, "TSR": 5, "experience_pool": "- Experience 1:\n    - Problem: The tool is used correctly in the provided examples and returns the expected results.\n    - Solution: The tool code is correct and does not need to be modified."}, {"tool": "def factorial_product_simplify(n, k):\n    \n    if n < 0 or k < 0 or k > n:\n        raise ValueError(\"Invalid input: Ensure 0 <= k <= n and n >= 0\")\n    \n    numerator = math.factorial(n)\n    denominator = math.factorial(k) * math.factorial(n - k)\n    \n    return numerator // denominator", "subfield": "Factorials", "tool_name": "factorial_product_simplify", "tool_type": "function", "description": "Simplify a product of factorials often found in combinatorial problems.\n    Specifically, this will compute the combination C(n, k) = n! / (k! * (n-k)!)", "docstring": "Simplify a product of factorials often found in combinatorial problems.\n    Specifically, this will compute the combination C(n, k) = n! / (k! * (n-k)!)\n    \n    Parameters\n    ----------\n    n : int\n        The total number of items.\n    k : int\n        The number of items to choose.\n    \n    Returns\n    -------\n    int\n        The simplified product of factorials as an integer.\n    \n    Examples\n    --------\n    >>> factorial_product_simplify(5, 2)\n    10\n    \n    >>> factorial_product_simplify(6, 3)\n    20", "Freq": 7.5, "TSR": 2, "experience_pool": "- Experience 1:\n    - Problem: The tool is used correctly in the provided examples and returns the expected results.\n    - Solution: The tool code is correct and does not need to be modified."}, {"tool": "def evaluate_factorial_product(n):\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result", "subfield": "Factorials", "tool_name": "evaluate_factorial_product", "tool_type": "function", "description": "Evaluate the product of factorials from 1 to n.", "docstring": "Evaluate the product of factorials from 1 to n.\n    Parameters:\n    - n: The upper limit of the product of factorials.\n    Returns:\n    - The product of factorials from 1 to n.", "Freq": 1, "TSR": 0}], "Counting Problems": [], "Binomial Coefficients": [], "Pascal's Triangle": []}