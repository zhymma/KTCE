{"Unit Conversion": ["def convert_volume(value, from_unit, to_unit):\n    \"\"\"\n    Converts a given volume value from one unit to another.\n    Parameters:\n    value (float): The volume value to be converted.\n    from_unit (str): The current unit of the volume ('liters', 'pints', 'quarts', etc.).\n    to_unit (str): The target unit to which the volume will be converted.\n    \n    Returns:\n    float: The volume in the target unit.\n    \n    Example:\n    >>> convert_volume(1, 'liters', 'pints')\n    2.11338\n    >>> convert_volume(2, 'quarts', 'pints')\n    4\n    \"\"\"\n    # Conversion factors based on 1 liter.\n    conversion_factors = {\n        'liters': 1, \n        'pints': 2.11338, \n        'quarts': 1.05669, \n        'gallons': 0.264172\n    }\n    \n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError(\"Unsupported unit conversion. Available units: {}\".format(', '.join(conversion_factors.keys())))\n    \n    # Normalize input to 'liters' first\n    value_in_liters = value / conversion_factors[from_unit]\n    # Convert from 'liters' to the target unit\n    converted_value = value_in_liters * conversion_factors[to_unit]\n    \n    return converted_value", "def convert_area(value, from_unit, to_unit):\n    \"\"\"\n    Convert area units.\n    Parameters:\n    - value (float): The area value to be converted.\n    - from_unit (str): The unit of the given area value.\n    - to_unit (str): The unit of the desired output area.\n    Returns:\n    - float: The area value converted into the target unit.\n    Examples:\n    >>> convert_area(10000, 'sq_cm', 'sq_m')\n    1.0\n    >>> convert_area(1, 'sq_km', 'sq_m')\n    1000000\n    \"\"\"\n    # Dictionary holding area conversion factors, directly squaring linear conversion factors\n    area_conversion_factors = {\n        'sq_cm': {'sq_m': 0.0001, 'sq_km': 1e-10, 'sq_cm': 1},\n        'sq_m': {'sq_cm': 10000, 'sq_km': 1e-6, 'sq_m': 1},\n        'sq_km': {'sq_cm': 1e10, 'sq_m': 1e6, 'sq_km': 1}\n    }\n    if from_unit not in area_conversion_factors or to_unit not in area_conversion_factors[from_unit]:\n        raise ValueError(f\"Conversion from {from_body} to {to_body} not supported.\")\n    # Calculate the converted area measurement\n    conversion_factor = area_conversion_factors[from_unit][to_unit]\n    converted_value = value * conversion_factor\n    return converted_value", "def convert_units(quantity, conversion_factor, offset=0):\n    \"\"\"\n    Convert a quantity from one unit to another using a specified conversion factor and an optional offset.\n    \n    Parameters:\n    - quantity (float or int): The numeric quantity in the original units to be converted.\n    - conversion_factor (float): The factor by which to multiply the original quantity to perform the conversion.\n    - offset (float, optional): An additional offset to be added after conversion (default is 0).\n    Returns:\n    - float: The converted quantity in the new units.\n    Examples:\n    >>> convert_units(10, 0.5)  # For example, 10 blocks to miles if 1 block equals 0.5 miles\n    5.0\n    >>> convert_units(15, 1/1.60934)  # For example, 15 kilometers to miles\n    9.32056788356075\n    >>> convert_units(32, 1.8, 32)  # Converting 32°C to °F\n    89.6\n    \"\"\"\n    return quantity * conversion_factor + offset", "def convert_monetary_units(amount, from_unit, to_unit):\n    \"\"\"\n    Convert a monetary amount from one unit to another.\n    \n    Parameters\n    ----------\n    amount : float\n        The quantity of money to convert.\n    from_unit : str\n        The unit of currency to convert from (e.g., 'dollar', 'cent').\n    to_unit : str\n        The unit of currency to convert to (e.g., 'dollar', 'cent').\n    Returns\n    -------\n    float\n        The converted amount in the target unit.\n    Examples\n    --------\n    >>> convert_monetary_units(1, 'dollar', 'cent')\n    100.0\n    >>> convert_monetary_units(100, 'cent', 'dollar')\n    1.0\n    \"\"\"\n    conversion_factors = {\n        ('dollar', 'cent'): 100,\n        ('cent', 'dollar'): 0.01\n    }\n    if (from_unit, to_unit) in conversion_factors:\n        return amount * conversion_factors[(from_unit, to_unit)]\n    else:\n        raise ValueError(\"Unsupported conversion types.\")", "def convert_length(value, from_unit, to_unit):\n    \"\"\"\n    Convert length between different units, specifically between inches and feet.\n    Parameters:\n    - value (float): The numerical value of the length to convert.\n    - from_unit (str): The unit of the input value ('inches' or 'feet').\n    - to_unit (str): The unit of the length into which the value should be converted ('inches' or 'feet').\n    Returns:\n    - float: The converted value in the target unit.\n    Examples:\n    >>> convert_length(12, 'inches', 'feets')\n    1.0\n    >>> convert_length(3, 'feet', 'inches')\n    36.0\n    Raises:\n    - ValueError: If the 'from_unit' or 'to_unit' is neither 'inches' nor 'feet'.\n    - ValueError: If the 'value' is negative, as length cannot be negative.\n    \"\"\"\n    if value < 0:\n        raise ValueError(\"Length value cannot be negative.\")\n    \n    units = ['inches', 'feet']\n    if from_unit not in units or to_unit not in units:\n        raise ValueError(\"Invalid units. Only 'inches' and 'feet' are supported.\")\n    \n    if from_unit == to_unit:\n        return value\n    conversion_factors = {\n        ('inches', 'feet'): 1 / 12,\n        ('feet', 'inches'): 12\n    }\n    \n    return value * conversion_factors[(from_unit, to_unit)]", "def currency_exchanger(amount, from_currency_rate, to_currency_rate):\n    \"\"\"\n    Convert an amount from one currency to another using respective exchange rates.\n    \n    Parameters:\n        amount (float): The amount in the 'from' currency.\n        from_currency_rate (float): Exchange rate from the base currency to the 'from' currency.\n        to_currency_rate (float): Exchange rate from the base currency to the 'to' currency.\n    \n    Returns:\n        float: The converted amount in the 'to' currency.\n    \n    Example:\n        >>> currency_exchanger(100, 1, 0.893)  # From USD to EUR where 1 USD = 0.893 EUR\n        89.3\n        >>> currency_exchanger(50, 0.745, 1.35)  # From CAD to AUD where 1 CAD = 0.745 USD and 1 AUD = 1.35 USD\n        60.9081\n    \"\"\"\n    amount_in_base_currency = amount * from_currency_rate\n    amount_in_target_currency = amount_in_base_currency / to_currency_rate\n    return amount_in_target_currency", "def convert_area(area, initial_unit='square_feet', target_unit='square_yards'):\n    \"\"\"\n    Converts area from one unit to another between square feet and square yards.\n    Parameters:\n    area : float\n        The area quantity to be converted.\n    initial_unit : str, optional\n        The initial unit of the area, default is 'square_feet'. Must be either 'square_feet' or 'square_yards'.\n    target_unit : str, optional\n        The target unit to convert the area into, default is 'square_yards'. Must be either 'square_feet' or 'square_yards'.\n    \n    Returns:\n    float\n        The area converted into the target unit.\n    \n    Raises:\n    ValueError:\n        If 'initial_unit' or 'target_unit' is not recognized.\n    Examples:\n    >>> convert_area(1, 'square_yards', 'square_feet')\n    9.0\n    >>> convert_area(18, 'square_feet', 'square_yards')\n    2.0\n    \"\"\"\n    if initial_unit == 'square_feet' and target_unit == 'square_yards':\n        return area / 9\n    elif initial_unit == 'square_yards' and target_unit == 'square_feet':\n        return area * 9\n    else:\n        raise ValueError(\"Unrecognized unit. Use 'square_feet' or 'square_yards'.\")", "def calculate_circumference(radius, unit_in=\"m\", unit_out=None):\n    \"\"\"\n    Calculate the circumference of a circle given a radius and optionally\n    convert it to a different unit.\n    Parameters\n    ----------\n    radius : float\n        The radius of the circle.\n    unit_in : str, optional\n        The unit of measurement for the input radius (default is meters).\n    unit_out : str, optional\n        The target unit for the circumference result. If None, the output unit\n        will be the same as `unit_in`.\n    Returns\n    -------\n    float or Quantity\n        The circumference of the circle, possibly converted to the desired unit.\n    Examples\n    --------\n    >>> calculate_circumference(1)\n    6.283185307179586\n    \n    >>> calculate_circumference(1, unit_in='inch', unit_out='cm')\n    15.875000000000002 cm\n    Notes\n    -----\n    This function requires `numpy` for mathematical calculations and `pint` for unit handling.\n    If `pint` is not installed, unit conversion cannot be handled by this function.\n    \"\"\"\n    ureg = UnitRegistry()\n    radius = radius * ureg(unit_in)  # apply the unit to the input radius\n    \n    circumference = 2 * np.pi * radius  # calculate the circumference in the input unit\n    \n    if unit_out:\n        circumference = circumference.to(unit_out)  # convert to the output unit if necessary\n    \n    return circumference", "def calculate_area(length, width, unit='inches'):\n    \"\"\"\n    Calculates the area of a rectangle given length and width in a specified unit.\n    \n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n    unit (str): Unit in which the dimensions are given. Default is 'inches'.\n               Supported units: 'feet', 'inches'. The area will be calculated\n               in the unit's square (e.g., square feet if the unit is feet).\n    \n    Returns:\n    float: The area of the rectangle in the square of the provided unit.\n    \n    Examples:\n    >>> calculate_area(10, 20, unit='feet')\n    200.0 # area in square feet\n    >>> calculate_area(120, 240)\n    28800.0 # area in square inches\n    \"\"\"\n    area = length * width\n    return area", "def area_from_perimeter(perimeter, num_sides):\n    \"\"\"\n    Given the perimeter of a regular shape and the number of sides, compute the side length,\n    then calculates the area assuming it's a square for simplicity. This can be extended to different shapes.\n    Parameters:\n        perimeter (float): The total perimeter of the regular shape.\n        num_sides (int): The number of sides of the shape.\n    \n    Returns:\n        float: The area calculated assuming the given shape is a square.\n    \n    Example:\n        # Calculate area of a square from its perimeter\n        >>> area = area_from_perimeter(40, 4)\n        >>> print(area)\n        100.0\n    \"\"\"\n    side_length_for_square = perimeter / num_sides\n    area_of_square = side_length_for_square * side_length_for_square\n    return area_of_square"]}