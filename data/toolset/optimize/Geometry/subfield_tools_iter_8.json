{"Circles": [], "Coordinate Geometry": [], "Rectangles": [{"tool": "def rectangle_area(length, width):\n    \n    return length * width", "subfield": "Rectangles", "tool_name": "rectangle_area", "tool_type": "function", "description": "Calculate the area of a rectangle.", "docstring": "Calculate the area of a rectangle.\n    Parameters:\n    length (float): the length of the rectangle.\n    width (float): the width of the rectangle.\n    Returns:\n    float: the calculated area of the rectangle.\n    \n    Example:\n    >>> rectangle_area(5, 3)\n    15", "Freq": 15, "TSR": 11, "experience_pool": "- When using the rectangle_area function, make sure to provide the correct length and width parameters.\n- If you encounter an error message stating that a function is not defined, make sure to define the function before using it."}, {"tool": "def calculate_square_perimeter(side_length):\n    \n    return 4 * side_length", "subfield": "Rectangles", "tool_name": "calculate_square_perimeter", "tool_type": "function", "description": "Calculate the perimeter of a square given the side length.", "docstring": "Calculate the perimeter of a square given the side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the square.\n    \n    Returns:\n    float: The perimeter of the square.", "Freq": 7, "TSR": 4, "experience_pool": "Experience 1:\n- Problem: The area of a square plot of land is 325 square meters. What is the perimeter of the square, in meters? Express your answer in simplest radical form.\n- Solution: \n    ```python\n    import math\n\n    def solution():\n        \"\"\"The area of a square plot of land is 325 square meters. What is the perimeter of the square, in meters?\"\"\"\n        area = 325\n        side_length = math.sqrt(area)\n        perimeter = calculate_square_perimeter(side_length)\n        return perimeter\n\n    # Calculate the perimeter of the square\n    print(solution())\n    ```\n- Output: 72.11102550927978\n- Feedback: The tool accurately calculates the perimeter of the square."}, {"tool": "def rectangle_length(diagonal_length, ratio):\n    \n    # Calculate the height of the rectangle using the Pythagorean theorem\n    height = (diagonal_length**2 / (ratio**2 + 1))**0.5\n    \n    # Calculate the length of the rectangle using the ratio\n    length = ratio * height\n    \n    return length", "subfield": "Rectangles", "tool_name": "rectangle_length", "tool_type": "function", "description": "Calculate the length of a rectangle given its diagonal length and the ratio of its horizontal length to its height.", "docstring": "Calculate the length of a rectangle given its diagonal length and the ratio of its horizontal length to its height.\n    \n    Parameters:\n    diagonal_length (float): The length of the diagonal of the rectangle.\n    ratio (float): The ratio of the horizontal length to the height of the rectangle.\n    \n    Returns:\n    float: The length of the rectangle.", "Freq": 2, "TSR": 0}], "Midpoint Formula": [{"tool": "def compute_midpoint(point1, point2):\n    \n    # Ensure input is in the correct format and same dimension\n    if len(point1) != len(point2):\n        raise ValueError(\"Both points must have the same number of dimensions\")\n    # Calculate midpoint using tuple/list comprehension\n    midpoint = tuple((p1 + p2) / 2 for p1, p2 in zip(point1, point2))\n    \n    return midpoint", "subfield": "Midpoint Formula", "tool_name": "compute_midpoint", "tool_type": "function", "description": "Compute the midpoint between two points in n-dimensional space.", "docstring": "Compute the midpoint between two points in n-dimensional space.\n    Parameters:\n    point1 (tuple or list): Coordinates of the first point.\n    point2 (tuple or list): Coordinates of the second point.\n    Returns:\n    tuple: Coordinates of the midpoint.\n    Examples:\n    >>> compute_midpoint((1, 2), (3, 4))\n    (2.0, 3.0)\n    >>> compute_midpoint([0, 0, 0], [6, 8, 10])\n    (3.0, 4.0, 5.0)\n    Raises:\n    ValueError: If the dimensions of the two points are not equal.", "Freq": 35, "TSR": 34, "experience_pool": "- To calculate the value of b using the midpoint and one of the endpoints, you can directly access the coordinates of the midpoint tuple and add them together. There is no need to use the non-existent function find_endpoint_from_midpoint.\n\nExample:\nmidpoint = compute_midpoint((1, 3), (5, 7))\nb = midpoint[0] + midpoint[1]"}, {"tool": "def find_endpoint_from_midpoint(midpoint, known_point):\n    \n    import numpy as np\n    midpoint, known_point = np.array(midpoint), np.array(known_point)\n    unknown_point = 2 * midpoint - known_point\n    return unknown_point.tolist()", "subfield": "Midpoint Formula", "tool_name": "find_endpoint_from_midpoint", "tool_type": "function", "description": "Calculate the unknown endpoint of a line segment given the midpoint and the known endpoint.", "docstring": "Calculate the unknown endpoint of a line segment given the midpoint and the known endpoint.\n    Parameters:\n        midpoint (list or tuple of floats): Coordinates of the midpoint.\n        known_point (list or tuple of floats): Coordinates of the known endpoint.\n    Returns:\n        list: The coordinates of the unknown endpoint as a list of floats.\n    \n    Examples:\n        >>> find_endpoint_from_midpoint([1.0, 1.0], [0, 0])\n        [2.0, 2.0]\n        >>> find_endpoint_from_midpoint([4.0, 7.0, 9.0], [1, 3, 5])\n        [7.0, 11.0, 13.0]", "Freq": 12, "TSR": 10, "experience_pool": "Problem: The graph of the line $x+y=b$ is a perpendicular bisector of the line segment from $(1,3)$ to $(5,7)$. What is the value of b?\nAnswer: 8\n```python\ndef solution():\n    # Calculate the midpoint of the line segment\n    midpoint = compute_midpoint((1, 3), (5, 7))\n    \n    # Find the value of b using the midpoint and one of the endpoints\n    b = find_endpoint_from_midpoint(midpoint, [1, 3])[0] + find_endpoint_from_midpoint(midpoint, [1, 3])[1]\n    \n    return b\n\n# Calculate the value of b\nprint(solution())\n```\nOutput: 12.0\n\nProblem: Let $\\mathbf{a}$ and $\\mathbf{b}$ be vectors, and let $\\mathbf{m}$ be the midpoint of $\\mathbf{a}$ and $\\mathbf{b}.$  Given $\\mathbf{m} = \\begin{pmatrix} 3 \\\\ 7 \\end{pmatrix}$ and $\\mathbf{a} \\cdot \\mathbf{b} = 6,$ find $\\|\\mathbf{a}\\|^2 + \\|\\mathbf{b}\\|^2.$\nAnswer: 220\n```python\ndef solution():\n    # Given values\n    m = [3, 7]\n    ab_dot = 6\n    \n    # Calculate the known endpoint\n    a_plus_b = find_endpoint_from_midpoint(m, m)\n    \n    # Calculate the norm squared of a + b\n    norm_squared_a_plus_b = sum([x**2 for x in a_plus_b])\n    \n    # Calculate the norm squared of a + norm squared of b\n    norm_squared_a_plus_norm_squared_b = norm_squared_a_plus_b - 2 * ab_dot\n    \n    return norm_squared_a_plus_norm_squared_b\n\n# Calculate the result\nprint(solution())\n```\nOutput: 46\n\nProblem: Let $\\mathbf{a}$ and $\\mathbf{b}$ be vectors, and let $\\mathbf{m}$ be the midpoint of $\\mathbf{a}$ and $\\mathbf{b}.$  Given $\\mathbf{m} = \\begin{pmatrix} 3 \\\\ 7 \\end{pmatrix}$ and $\\mathbf{a} \\cdot \\mathbf{b} = 6,$ find $\\|\\mathbf{a}\\|^2 + \\|\\mathbf{b}\\|^2.$\nAnswer: 220\n```python\ndef solution():\n    # Given values\n    m = [3, 7]\n    ab_dot = 6\n    \n    # Calculate the known endpoint\n    a = find_endpoint_from_midpoint(m, [1, 3])\n    b = find_endpoint_from_midpoint(m, [5, 7])\n    \n    # Calculate the norm squared of a + norm squared of b\n    norm_squared_a_plus_norm_squared_b = sum([x**2 for x in a]) + sum([x**2 for x in b])\n    \n    return norm_squared_a_plus_norm_squared_b\n\n# Calculate the result\nprint(solution())\n```\nOutput: 196"}, {"tool": "def find_vector_sum(midpoint, proportion):\n    \n    import numpy as np\n    \n    # Convert midpoint to numpy array\n    midpoint = np.array(midpoint)\n    \n    # Compute the difference vector between the midpoint and one of the vectors\n    difference_vector = proportion * (midpoint - np.zeros_like(midpoint))\n    \n    # Compute the sum of the vectors\n    sum_vectors = midpoint + difference_vector\n    \n    return sum_vectors.tolist()", "subfield": "Midpoint Formula", "tool_name": "find_vector_sum", "tool_type": "function", "description": "Find the sum of vectors when the midpoint and proportion are known.", "docstring": "Find the sum of vectors when the midpoint and proportion are known.\n    Parameters:\n    midpoint (tuple/list): The coordinates of the midpoint of the vectors.\n    proportion (float): The proportion of the distance from the midpoint to one of the vectors.\n    Returns:\n    sum_vectors (tuple/list): The sum of the vectors.", "Freq": 2, "TSR": 2}, {"tool": "def find_length_of_line_segment(midpoint_AB, midpoint_AF, length_AF):\n    \n    \n    # Calculate the length of line segment AF\n    length_AF = length_AF\n    \n    # Calculate the length of line segment AE\n    length_AE = 2 * length_AF\n    \n    # Calculate the length of line segment AD\n    length_AD = 2 * length_AE\n    \n    # Calculate the length of line segment AC\n    length_AC = 2 * length_AD\n    \n    # Calculate the length of line segment AB\n    length_AB = 2 * length_AC\n    \n    return length_AB", "subfield": "Midpoint Formula", "tool_name": "find_length_of_line_segment", "tool_type": "function", "description": "Calculate the length of line segment AB given the information about the midpoints and the length of AF.", "docstring": "Calculate the length of line segment AB given the information about the midpoints and the length of AF.\n    \n    Parameters:\n    midpoint_AB (tuple/list): The coordinates of the midpoint of line segment AB.\n    midpoint_AF (tuple/list): The coordinates of the midpoint of line segment AF.\n    length_AF (float/int): The length of line segment AF.\n    \n    Returns:\n    float/int: The length of line segment AB.", "Freq": 1, "TSR": 1}], "Distance Formula": [], "Area Calculation": [], "Triangles": [], "Parabolas": [], "Polygons": [], "Right Triangles": [], "Lines and Angles": [], "Volume of Solids": [], "Perimeter": [], "3D Shapes": [], "Transformations": [], "Squares": [], "Planes in Three Dimensions": [], "Similar Triangles": [], "Pythagorean Theorem": [], "Reflections": [], "Trapezoids": [], "Angles": [], "Similarity": [], "Parallelograms": [], "Coordinate Systems": [], "Conic Sections": [], "Quadrilaterals": [], "Ellipse": []}