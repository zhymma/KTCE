{"Dot Product": [{"tool": "def cross_product(vector_a, vector_b):\n    \n    if len(vector_a) != 3 or len(vector_b) != 3:\n        raise ValueError(\"Cross product is only defined for 3-dimensional vectors\")\n    return np.cross(vector_a, vector_b)", "subfield": "Dot Product", "tool_name": "cross_product", "tool_type": "function", "description": "Calculate the cross product of two vectors.", "docstring": "Calculate the cross product of two vectors.\n    Parameters:\n        vector_a (np.array): First vector (3D).\n        vector_b (np.array): Second vector (3D).\n    Returns:\n        np.array: The cross product vector.\n    Examples:\n        >>> cross_product(np.array([1, 0, 0]), np.array([0, 1, 0]))\n        np.array([0, 0, 1])", "Freq": 2, "TSR": 1}, {"tool": "def magnitude(vector):\n    \n    return np.linalg.norm(vector)", "subfield": "Dot Product", "tool_name": "magnitude", "tool_type": "function", "description": "Calculate the magnitude (norm) of a vector.", "docstring": "Calculate the magnitude (norm) of a vector.\n    Parameters:\n        vector (np.ndarray): Input vector.\n    Returns:\n        float: Magnitude of the vector.\n    Example:\n        >>> magnitude(np.array([3, 4]))\n        5.0", "Freq": 12, "TSR": 7}, {"tool": "def scalar_triple_product(vector_a, vector_b, vector_c):\n    \n    return np.dot(vector_a, np.cross(vector_b, vector_c))", "subfield": "Dot Product", "tool_name": "scalar_triple_product", "tool_type": "function", "description": "Compute the scalar triple product of three vectors.", "docstring": "Compute the scalar triple product of three vectors.\n    Parameters:\n    vector_a (np.array): The first vector.\n    vector_b (np.array): The second vector.\n    vector_c (np.array): The third vector.\n    \n    Returns:\n    float: The scalar triple product.\n    \n    Examples:\n    >>> scalar_triple_product(np.array([1, 0, 0]), np.array([0, 1, 0]), np.array([0, 0, 1]))\n    1.0", "Freq": 8, "TSR": 2}, {"tool": "def expand_vector_expression(vector_list, coefficient_list):\n    \n    return sum(c * v for c, v in zip(coefficient_list, vector_list))", "subfield": "Dot Product", "tool_name": "expand_vector_expression", "tool_type": "function", "description": "Expand a linear combination of vectors using given coefficients.", "docstring": "Expand a linear combination of vectors using given coefficients.\n    Parameters:\n    - vector_list (list of np.ndarray): A list of vectors.\n    - coefficient_list (list of float): A list of coefficients corresponding to each vector.\n    Returns:\n    - np.ndarray: The resulting vector from the linear combination.\n    Example:\n    >>> v1, v2 = np.array([1, 2]), np.array([3, 4])\n    >>> expand_vector_expression([v1, v2], [2, -1])\n    array([-1,  0])", "Freq": 0, "TSR": 0}, {"tool": "def vector_addition(vector_a, vector_b):\n    \n    return np.add(vector_a, vector_b)", "subfield": "Dot Product", "tool_name": "vector_addition", "tool_type": "function", "description": "Add two vectors.", "docstring": "Add two vectors.\n    Parameters:\n    vector_a (np.array): The first vector.\n    vector_b (np.array): The second vector.\n    Returns:\n    np.array: The sum of the two vectors.\n    \n    Examples:\n    >>> vector_addition(np.array([1, 2, 3]), np.array([4, 5, 6]))\n    array([5, 7, 9])", "Freq": 0, "TSR": 0}, {"tool": "def scalar_multiplication(scalar, vector):\n    \n    return np.multiply(scalar, vector)", "subfield": "Dot Product", "tool_name": "scalar_multiplication", "tool_type": "function", "description": "Multiply a vector by a scalar.", "docstring": "Multiply a vector by a scalar.\n    Parameters:\n    scalar (float): The scalar value.\n    vector (np.array): The vector to be scaled.\n    \n    Returns:\n    np.array: The scaled vector.\n    \n    Examples:\n    >>> scalar_multiplication(3, np.array([1, 2, 3]))\n    array([3, 6, 9])", "Freq": 1, "TSR": 0}, {"tool": "def solve_vector_equation(coeffs, vectors, result):\n    \n    matrix = np.column_stack(vectors)\n    return np.linalg.lstsq(matrix, result, rcond=None)[0]", "subfield": "Dot Product", "tool_name": "solve_vector_equation", "tool_type": "function", "description": "Solve the vector equation sum(c_i * v_i) = result using least squares method, where c_i are coefficients for the vectors v_i.", "docstring": "Solve the vector equation sum(c_i * v_i) = result using least squares method, where c_i are coefficients for the vectors v_i.\n    Parameters:\n    - coeffs (np.ndarray): A 2D array where each row represents coefficients for linear combinations.\n    - vectors (list of np.ndarray): A list of the base vectors.\n    - result (np.ndarray): The result vector for the equation.\n    Returns:\n    - np.ndarray: Solution coefficients that best solve the equation.\n    Example:\n    >>> v1, v2 = np.array([1, 0]), np.array([0, 1])\n    >>> result = np.array([3, 2])\n    >>> solve_vector_equation([[1, 0], [0, 1]], [v1, v2], result)\n    array([3., 2.])", "Freq": 1, "TSR": 0}], "Cross Product": [{"tool": "def cross_product(u, v):\n    \n    if len(u) != 3 or len(v) != 3:\n        raise ValueError(\"Vectors must have length 3.\")\n    \n    cross_product = [u[1] * v[2] - u[2] * v[1],\n                     u[2] * v[0] - u[0] * v[2],\n                     u[0] * v[1] - u[1] * v[0]]\n    \n    return cross_product", "subfield": "Cross Product", "tool_name": "cross_product", "tool_type": "function", "description": "Compute the cross product of two vectors u and v.\n    \n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n        \n    Returns:\n        list: The cross product of u and v.", "docstring": "Compute the cross product of two vectors u and v.\n    \n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n        \n    Returns:\n        list: The cross product of u and v.", "Freq": 16, "TSR": 6, "experience_pool": "experience content"}, {"tool": "def subtract_vectors(u, v):\n    \n    if len(u) != len(v):\n        raise ValueError(\"Vectors must have the same length.\")\n    result = [u[i] - v[i] for i in range(len(u))]\n    return result", "subfield": "Cross Product", "tool_name": "subtract_vectors", "tool_type": "function", "description": "Subtract two vectors u and v.\n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n    Returns:\n        list: The result of subtracting u and v.", "docstring": "Subtract two vectors u and v.\n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n    Returns:\n        list: The result of subtracting u and v.", "Freq": 2, "TSR": 1}, {"tool": "def cross_product(u, v):\n    \n    if len(u) != 3 or len(v) != 3:\n        raise ValueError(\"Vectors must have length 3.\")\n    cross_product = [u[1] * v[2] - u[2] * v[1],\n                     u[2] * v[0] - u[0] * v[2],\n                     u[0] * v[1] - u[1] * v[0]]\n    return cross_product", "subfield": "Cross Product", "tool_name": "cross_product", "tool_type": "function", "description": "Compute the cross product of two vectors u and v.\n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n    Returns:\n        list: The cross product of u and v.", "docstring": "Compute the cross product of two vectors u and v.\n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n    Returns:\n        list: The cross product of u and v.", "Freq": 0, "TSR": 0}, {"tool": "def dot_product(u, v):\n    \n    if len(u) != len(v):\n        raise ValueError(\"Vectors must have the same length.\")\n    result = sum([u[i] * v[i] for i in range(len(u))])\n    return result", "subfield": "Cross Product", "tool_name": "dot_product", "tool_type": "function", "description": "Compute the dot product of two vectors u and v.\n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n    Returns:\n        float: The dot product of u and v.", "docstring": "Compute the dot product of two vectors u and v.\n    Args:\n        u (list): The first vector.\n        v (list): The second vector.\n    Returns:\n        float: The dot product of u and v.", "Freq": 4, "TSR": 2}]}