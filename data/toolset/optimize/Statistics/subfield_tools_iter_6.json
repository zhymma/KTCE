{"Mean and Median": [{"tool": "def calculate_mean(data):\n    \n    return np.mean(data)", "subfield": "Mean and Median", "tool_name": "calculate_mean", "tool_type": "function", "description": "Calculate the mean (average) of a dataset.", "docstring": "Calculate the mean (average) of a dataset.\n    Parameters:\n    - data (list or np.array): Array-like object containing numerical data.\n    Returns:\n    - float: The mean of the dataset.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30, 40])\n    25.0", "Freq": 3, "TSR": 3}, {"tool": "def calculate_median(data):\n    if not data:\n        return None\n    data.sort()\n    n = len(data)\n    if n % 2 == 0:\n        median = (data[n//2-1] + data[n//2]) / 2\n    else:\n        median = data[n//2]\n    return median", "subfield": "Mean and Median", "tool_name": "calculate_median", "tool_type": "function", "description": "None", "docstring": null, "Freq": 3.0, "TSR": 2.5, "experience_pool": "- Experience: The current tool code fails when called with a list that contains variables instead of actual numbers. This is causing a TypeError because numpy cannot determine the truth value of a relational expression.\n- Solution: Modified the tool code to handle the case when the list contains variables. Implemented our own function to calculate the median."}, {"tool": "def calculate_median(data):\n    \n    import numpy as np\n    if not data:\n        return None\n    return float(np.median(data))", "subfield": "Mean and Median", "tool_name": "calculate_median", "tool_type": "function", "description": "Computes the median value of a list of numbers.", "docstring": "Computes the median value of a list of numbers.\n    Parameters:\n    - data (list of float|int): The list of numerical values for which the median is to be calculated.\n    Returns:\n    - float|int: The median of the input list. Returns None if the list is empty.\n    Examples:\n    >>> calculate_median([1, 3, 2, 5, 4])\n    3\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    >>> calculate_median([])\n    None", "Freq": 8, "TSR": 7}, {"tool": "def calculate_mode(data):\n    \n    from collections import Counter\n    # Count the occurrences of each value in the dataset\n    count = Counter(data)\n    # Find the value(s) with the maximum count\n    mode = max(count, key=count.get)\n    return mode", "subfield": "Mean and Median", "tool_name": "calculate_mode", "tool_type": "function", "description": "Calculate the mode of a dataset.", "docstring": "Calculate the mode of a dataset.\n    Parameters:\n    data (list): A list of numerical values.\n    Returns:\n    float: The mode of the dataset.", "Freq": 0, "TSR": 0}], "Mean": [], "Median": [{"tool": "def calculate_median(data):\n    \n    \n    import numpy as np\n    \n    if not data:\n        raise ValueError(\"The data list is empty. Median cannot be calculated.\")\n    \n    data_sorted = sorted(data)\n    n = len(data_sorted)\n    mid_index = n // 2\n    \n    if n % 2 == 1:\n        # If the number of data points is odd, return the middle number\n        return data_sorted[mid_index]\n    else:\n        # If the number of data points is even, return the average of the middle two numbers\n        return (data_sorted[mid_index - 1] + data_sorted[mid_index]) / 2.0", "subfield": "Median", "tool_name": "calculate_median", "tool_type": "function", "description": "Calculate the median of a dataset.\n    \n    The median is the value separating the higher half from the lower half of a data sample.\n    For a dataset containing an odd number of observations, it is the middle number.\n    For a dataset with an even number of observations, it is the average of the two middle numbers.", "docstring": "Calculate the median of a dataset.\n    \n    The median is the value separating the higher half from the lower half of a data sample.\n    For a dataset containing an odd number of observations, it is the middle number.\n    For a dataset with an even number of observations, it is the average of the two middle numbers.\n    \n    Parameters:\n    data (list of float or int): A list containing the dataset.\n    \n    Returns:\n    float: The median of the dataset.", "Freq": 9.0, "TSR": 7.0, "experience_pool": "Experience 1:\nProblem: The tool is called with a list of integers instead of a list of floats.\nSolution: Modify the input data to be a list of floats.\n```python\ndata = [1.0, 3.0, 2.0]\nmedian = calculate_median(data)\nprint(median)\n```\nOutput: 2.0\n\nExperience 2:\nProblem: The tool is called with an empty list.\nSolution: Handle the case when the data list is empty and raise a ValueError.\n```python\ndata = []\nmedian = calculate_median(data)\nprint(median)\n```\nOutput: ValueError: The data list is empty. Median cannot be calculated."}, {"tool": "def calculate_mean(data):\n    \n    if not data:\n        raise ValueError(\"The data list is empty. Mean cannot be calculated.\")\n    \n    return sum(data) / len(data)", "subfield": "Median", "tool_name": "calculate_mean", "tool_type": "function", "description": "Calculate the mean of a dataset.\n    \n    The mean is the average of all the numbers in a dataset.", "docstring": "Calculate the mean of a dataset.\n    \n    The mean is the average of all the numbers in a dataset.\n    \n    Parameters:\n    data (list): A list of numbers\n    \n    Returns:\n    float: The mean of the dataset", "Freq": 0, "TSR": 0}]}