{"Unit Conversion": [{"tool": "def convert_volume(value, from_unit, to_unit):\n    \n    # Conversion factors based on 1 liter.\n    conversion_factors = {\n        'liters': 1, \n        'pints': 2.11338, \n        'quarts': 1.05669, \n        'gallons': 0.264172,\n        'cubic_feet': 0.0353147,\n        'cubic_yards': 0.00130795\n    }\n    \n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError(\"Unsupported unit conversion. Available units: {}\".format(', '.join(conversion_factors.keys())))\n    \n    # Normalize input to 'liters' first\n    value_in_liters = value / conversion_factors[from_unit]\n    # Convert from 'liters' to the target unit\n    converted_value = value_in_liters * conversion_factors[to_unit]\n    \n    return converted_value", "subfield": "Unit Conversion", "tool_name": "convert_volume", "tool_type": "function", "description": "None", "docstring": null, "Freq": 7.5, "TSR": 7, "experience_pool": "- Experience: When using the convert_volume function, make sure to provide the value, from_unit, and to_unit parameters correctly. The from_unit and to_unit should be one of the supported units: liters, pints, quarts, gallons, cubic_feet, cubic_yards.\n- Experience: To convert a volume from one unit to another, call the convert_volume function with the value, from_unit, and to_unit parameters. The function will return the converted value."}, {"tool": "def convert_units(quantity, conversion_factor, offset=0):\n    \n    return quantity * conversion_factor + offset", "subfield": "Unit Conversion", "tool_name": "convert_units", "tool_type": "function", "description": "Convert a quantity from one unit to another using a specified conversion factor and an optional offset.", "docstring": "Convert a quantity from one unit to another using a specified conversion factor and an optional offset.\n    \n    Parameters:\n    - quantity (float or int): The numeric quantity in the original units to be converted.\n    - conversion_factor (float): The factor by which to multiply the original quantity to perform the conversion.\n    - offset (float, optional): An additional offset to be added after conversion (default is 0).\n    Returns:\n    - float: The converted quantity in the new units.\n    Examples:\n    >>> convert_units(10, 0.5)  # For example, 10 blocks to miles if 1 block equals 0.5 miles\n    5.0\n    >>> convert_units(15, 1/1.60934)  # For example, 15 kilometers to miles\n    9.32056788356075\n    >>> convert_units(32, 1.8, 32)  # Converting 32°C to °F\n    89.6", "Freq": 2, "TSR": 2}, {"tool": "def convert_monetary_units(amount, from_unit, to_unit):\n    conversion_factors = {\n        ('dollar', 'cent'): 100,\n        ('cent', 'dollar'): 0.01,\n        ('dollar', 'euro'): 1.25,\n        ('euro', 'dollar'): 0.8,\n        ('euro', 'euro'): 1\n    }\n    if (from_unit, to_unit) in conversion_factors:\n        return amount * conversion_factors[(from_unit, to_unit)]\n    else:\n        raise ValueError(\"Unsupported conversion types.\")", "subfield": "Unit Conversion", "tool_name": "convert_monetary_units", "tool_type": "function", "description": "None", "docstring": null, "Freq": 4.0, "TSR": 2, "experience_pool": "- Experience: The tool code has been modified to handle additional conversion types such as 'dollar' to 'euro' and 'euro' to 'dollar'.\n- Solution 1: Berengere and Emily want to buy a cake. Emily has a 5-dollar bill. How many euros does Berengere need to contribute if 1 euro = 1.25 USD?\n    - Input: None\n    - Output: 2.0\n- Solution 2: The NASA Space Shuttle transports material to the International Space Station at a cost of $22,000 per kilogram. What is the number of dollars in the cost of transporting a 250 g control module?\n    - Input: None\n    - Output: 5500.0"}, {"tool": "def convert_length(value, from_unit, to_unit):\n    \n    if value < 0:\n        raise ValueError(\"Length value cannot be negative.\")\n    units = ['inches', 'feet', 'centimeters', 'yards', 'meters']\n    if from_unit not in units or to_unit not in units:\n        raise ValueError(\"Invalid units. Only 'inches', 'feet', 'centimeters', 'yards', and 'meters' are supported.\")\n    if from_unit == to_unit:\n        return value\n    conversion_factors = {\n        ('inches', 'feet'): 1 / 12,\n        ('feet', 'inches'): 12,\n        ('inches', 'centimeters'): 2.54,\n        ('centimeters', 'inches'): 1 / 2.54,\n        ('feet', 'centimeters'): 30.48,\n        ('centimeters', 'feet'): 1 / 30.48,\n        ('yards', 'feet'): 3,\n        ('feet', 'yards'): 1 / 3,\n        ('yards', 'inches'): 36,\n        ('inches', 'yards'): 1 / 36,\n        ('yards', 'centimeters'): 91.44,\n        ('centimeters', 'yards'): 1 / 91.44,\n        ('meters', 'feet'): 3.28084,\n        ('feet', 'meters'): 1 / 3.28084,\n        ('meters', 'inches'): 39.3701,\n        ('inches', 'meters'): 1 / 39.3701,\n        ('meters', 'centimeters'): 100,\n        ('centimeters', 'meters'): 1 / 100,\n        ('meters', 'yards'): 1.09361,\n        ('yards', 'meters'): 1 / 1.09361\n    }\n    return value * conversion_factors[(from_unit, to_unit)]", "subfield": "Unit Conversion", "tool_name": "convert_length", "tool_type": "function", "description": "Convert length between different units.", "docstring": "Convert length between different units.\n    Parameters:\n    - value (float): The numerical value of the length to convert.\n    - from_unit (str): The unit of the input value ('inches', 'feet', 'centimeters', 'yards', or 'meters').\n    - to_unit (str): The unit of the length into which the value should be converted ('inches', 'feet', 'centimeters', 'yards', or 'meters').\n    Returns:\n    - float: The converted value in the target unit.\n    Raises:\n    - ValueError: If the 'from_unit' or 'to_unit' is not a supported unit.\n    - ValueError: If the 'value' is negative, as length cannot be negative.", "Freq": 11.25, "TSR": 5.25}, {"tool": "def convert_area(area, initial_unit='square_feet', target_unit='square_yards'):\n    \n    if initial_unit == 'square_feet' and target_unit == 'square_yards':\n        return area / 9\n    elif initial_unit == 'square_yards' and target_unit == 'square_feet':\n        return area * 9\n    else:\n        raise ValueError(\"Unrecognized unit. Use 'square_feet' or 'square_yards'.\")", "subfield": "Unit Conversion", "tool_name": "convert_area", "tool_type": "function", "description": "Converts area from one unit to another between square feet and square yards.", "docstring": "Converts area from one unit to another between square feet and square yards.\n    Parameters:\n    area : float\n        The area quantity to be converted.\n    initial_unit : str, optional\n        The initial unit of the area, default is 'square_feet'. Must be either 'square_feet' or 'square_yards'.\n    target_unit : str, optional\n        The target unit to convert the area into, default is 'square_yards'. Must be either 'square_feet' or 'square_yards'.\n    \n    Returns:\n    float\n        The area converted into the target unit.\n    \n    Raises:\n    ValueError:\n        If 'initial_unit' or 'target_unit' is not recognized.\n    Examples:\n    >>> convert_area(1, 'square_yards', 'square_feet')\n    9.0\n    >>> convert_area(18, 'square_feet', 'square_yards')\n    2.0", "Freq": 4, "TSR": 3}, {"tool": "def calculate_area(length, width, unit='inches'):\n    \n    area = length * width\n    return area", "subfield": "Unit Conversion", "tool_name": "calculate_area", "tool_type": "function", "description": "Calculates the area of a rectangle given length and width in a specified unit.", "docstring": "Calculates the area of a rectangle given length and width in a specified unit.\n    \n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n    unit (str): Unit in which the dimensions are given. Default is 'inches'.\n               Supported units: 'feet', 'inches'. The area will be calculated\n               in the unit's square (e.g., square feet if the unit is feet).\n    \n    Returns:\n    float: The area of the rectangle in the square of the provided unit.\n    \n    Examples:\n    >>> calculate_area(10, 20, unit='feet')\n    200.0 # area in square feet\n    >>> calculate_area(120, 240)\n    28800.0 # area in square inches", "Freq": 6, "TSR": 5}, {"tool": "def convert_blocks_to_miles(blocks, conversion_factor):\n    \n    return blocks * conversion_factor", "subfield": "Unit Conversion", "tool_name": "convert_blocks_to_miles", "tool_type": "function", "description": "Convert a quantity from blocks to miles using a specified conversion factor.", "docstring": "Convert a quantity from blocks to miles using a specified conversion factor.\n    Parameters:\n    blocks (float): The quantity in blocks.\n    conversion_factor (float): The conversion factor from blocks to miles.\n    Returns:\n    float: The quantity in miles.", "Freq": 1, "TSR": 1}, {"tool": "def calculate_circumference(radius):\n    \n    return 2 * math.pi * radius", "subfield": "Unit Conversion", "tool_name": "calculate_circumference", "tool_type": "function", "description": "Calculate the circumference of a circle given the radius.", "docstring": "Calculate the circumference of a circle given the radius.\n    Parameters:\n    radius (float): The radius of the circle.\n    Returns:\n    float: The circumference of the circle.", "Freq": 1, "TSR": 1}]}