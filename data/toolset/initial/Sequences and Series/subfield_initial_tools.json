{"Infinite Series": ["def infinite_geometric_series_sum(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series given the first term and the common ratio.\n    \n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series. Must satisfy |r| < 1 for convergence.\n    \n    Returns:\n    float: The sum of the infinite geometric series if the series converges; otherwise, raises a ValueError.\n    \n    Examples:\n    >>> infinite_geometric_series_sum(1, 0.5)\n    2.0\n    >>> infinite_geometric_series_sum(2, -0.5)\n    1.3333333333333333\n    \"\"\"\n    import numpy as np\n    if np.abs(r) >= 1:\n        raise ValueError(\"The series does not converge because |r| >= 1.\")\n    return a / (1 - r)", "def generate_arithmetic_sequence(a, d, n):\n    \"\"\"\n    Generates the first n terms of an arithmetic sequence.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the sequence.\n        d (int/float/sympy.Symbol): The common difference of the sequence.\n        n (int): The number of terms to generate.\n    Returns:\n        list: A list containing the first n terms of the arithmetic sequence.\n    Examples:\n        >>> generate_arithmetic_sequence(1, 2, 5)\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [a + i * d for i in range(n)]", "def generate_sequence(kind, initial_terms, common_diff=None, common_ratio=None, recursive_rule=None, n_terms=10):\n    \"\"\"\n    Generates sequences of various kinds including arithmetic, geometric, recursive, and custom types.\n    \n    Parameters:\n    - kind (str): Type of sequence ('arithmetic', 'geometric', 'recursive').\n    - initial_terms (list of numeric): Initial terms of the sequence. Length should fit the recursive rule if applied.\n    - common_diff (numeric, optional): Common difference for arithmetic sequences.\n    - common_ratio (numeric, optional): Common ratio for geometric sequences.\n    - recursive_rule (function, optional): A function that defines the next term based on previous terms for recursive sequences.\n    - n_terms (int, optional): Number of terms to generate.\n    \n    Returns:\n    - list: List containing the first `n_terms` of the sequence.\n    \"\"\"\n    import numpy as np\n    \n    if kind == 'arithmetic':\n        return [initial_terms[0] + i * common_diff for i in range(n_terms)]\n    elif kind == 'geometric':\n        return [initial_terms[0] * (common_ratio ** i) for i in range(n_terms)]\n    elif kind == 'recursive':\n        terms = initial_terms[:]\n        while len(terms) < n_terms:\n            next_term = recursive_rule(terms)\n            terms.append(next_term)\n        return terms\n    else:\n        raise ValueError(\"Unsupported sequence type\")", "def solve_for_first_term(target_sum, r, n=None):\n    \"\"\"\n    Solve for the first term 'a' of a geometric series given the common ratio and the target sum.\n    \n    Parameters:\n    target_sum (float): The sum of the series for which 'a' must be computed.\n    r (float): The common ratio.\n    n (int, optional): The number of terms for finite series. If not provided, assumes infinite series.\n    \n    Returns:\n    float or None: The calculated first term if a solution exists, otherwise None.\n    \n    Examples:\n    >>> solve_for_first_term(2, 0.5)  # Infinite series\n    1.0\n    >>> solve_for_first_term(1.75, 0.5, 3)  # Finite series\n    1.0\n    \"\"\"\n    if n is None:  # Infinite series\n        if abs(r) < 1:\n            return target_sum * (1 - r)\n        else:\n            return None\n    else:  # Finite Series\n        return target_sum * (1 - r) / (1 - r**n)", "def evaluate_telescoping_series(terms):\n    \"\"\"\n    Simplify and evaluate a telescoping series, assuming the terms cancel each other effectively.\n    Parameters:\n        terms (list): A list of tuples. Each tuple contains (start_term, end_term) configurations.\n    Returns:\n        float: The final simplified sum of the series.\n    Examples:\n        >>> evaluate_telescoping_series([(1/2, 1/3), (1/3, 1/4), (1/4, 1/5)])\n        0.5 - 1/5\n    \"\"\"\n    sum_result = 0\n    for start, end in terms:\n        sum_result += start - end\n    return sum_result", "def calculate_sequence_values(sequence, n_th=None, sum_indices=None):\n    \"\"\"\n    Calculates specific values from a sequence, such as the nth term or the sum of terms at specific indices.\n    Parameters:\n    - sequence (list of numeric): The sequence from which to calculate values.\n    - n_th (int, optional): The nth term to retrieve from the sequence (1-based index).\n    - sum_indices (list of int, optional): Indices to sum over (1-based indices).\n    Returns:\n    - numeric or list: Returns the nth term if `n_th` is specified, the sum of specific terms if `sum_indices` is specified,\n      or the entire sequence if neither is specified.\n    \"\"\"\n    if n_th is not None:\n        return sequence[n_th - 1]\n    if sum_indices is not None:\n        return sum([sequence[i - 1] for i in sum_indices])\n    return sequence", "def sum_arithmetic_series(a, d, n):\n    \"\"\"\n    Calculates the sum of the first n terms of an arithmetic series.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the series.\n        d (int/float/sympy.Symbol): The common difference of the series.\n        n (int): The number of terms to sum.\n    Returns:\n        sympy.Symbol/int/float: The sum of the first n terms of the arithmetic series.\n    Examples:\n        >>> sum_arithmetic_series(1, 2, 5)\n        25\n    \"\"\"\n    return n / 2 * (2 * a + (n - 1) * d)"], "Geometric Sequences": ["def geometric_nth_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Parameters\n    ----------\n    a : float\n        The first term of the geometric sequence.\n    r : float\n        The common ratio of the sequence.\n    n : int\n        The term number to calculate (1-indexed).\n    \n    Returns\n    -------\n    float\n        The nth term of the sequence.\n    \n    Examples\n    --------\n    >>> geometric_nth_term(2, 3, 4)\n    54.0\n    \"\"\"\n    return a * (r ** (n - 1))", "def generate_geometric_sequence(a, r, num_terms):\n    \"\"\"\n    Generates a list of terms in a geometric sequence up to the specified number of terms.\n    \n    Parameters:\n    - a: float or int, the first term of the geometric sequence.\n    - r: float or connecting int, the common ratio of the sequence.\n    - num_terms: int, the number of terms to generate.\n    \n    Returns:\n    - list, containing the first `num_terms` of the sequence.\n    \n    Example:\n    >>> generate_geometric_sequence(3, 2, 5)\n    [3, 6, 12, 24, 48]\n    \"\"\"\n    return [a * (r ** i) for i in range(num_terms)]"], "Arithmetic Sequences": ["def arithmetic_term(a1, d, n):\n    \"\"\"\n    Calculate the nth term of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        d (float): The common difference in the arithmetic sequence.\n        n (int): The term index to find (1-based index).\n    Returns:\n        float: The nth term of the sequence.\n    Examples:\n        >>> arithmetic_term(3, 2, 5)\n        11\n    \"\"\"\n    return a1 + (n - 1) * d", "def extract_params_and_nth_term(sequence, n):\n    \"\"\"\n    Extracts the first term and the common difference from the beginning of a given arithmetic sequence and calculates the nth term.\n    Parameters:\n    - sequence (list of int/float): The initial portion of the arithmetic sequence.\n    - n (int): The term position to calculate.\n    Returns:\n    - tuple:\n        - first_term (int/float): The first term of the sequence.\n        - common_difference (int/float): The common difference of the sequence.\n        - nth_term (int/float): The value of the nth term in the sequence.\n    Examples:\n    >>> extract_params_and_nth_term([3, 5, 7, 9], 5)\n    (3, 2, 11)\n    >>> extract_params_and_nth_term([10, 7, 4], 10)\n    (10, -3, -17)\n    \"\"\"\n    import numpy as np\n    \n    if len(sequence) < 2:\n        raise ValueError(\"The input sequence must include at least two elements to determine a common difference.\")\n    \n    first_term = sequence[0]\n    common_difference = sequence[1] - sequence[0]\n    \n    nth_term = first_term + (n - 1) * common_difference\n    return first_term, common_difference, nth_term", "def calculate_common_difference(term1, position1, term2, position2):\n    \"\"\"\n    Calculate the common difference of an arithmetic sequence given two terms and their positions.\n    \n    Parameters\n    ----------\n    term1 : int or float\n        The value of the term at the first position.\n    position1 : int\n        The position of term1 in the sequence.\n    term2 : int or float\n        The value of the term at the second position.\n    position2 : int\n        The position of term2 in the sequence.\n    \n    Returns\n    -------\n    int or float\n        The common difference of the sequence.\n    \n    Raises\n    ------\n    ValueError\n        If position1 equals position2, as it would lead to division by zero.\n    Examples\n    --------\n    >>> calculate_common_difference(3, 1, 11, 5)\n    2\n    >>> calculate_common_difference(20, 2, 10, 1)\n    -10\n    \"\"\"\n    if position1 == position2:\n        raise ValueError(\"The two positional arguments must be different to compute a common difference.\")\n    common_difference = (term2 - term1) / (position2 - position1)\n    return common_difference", "def arithmetic_sequence_properties(a1, an, n=None, d=None):\n    \"\"\"\n    Determine the missing properties (common difference or number of terms) of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        an (float): Any known term other than the first term, recommended to be the last for best results.\n        n (int, optional): The term position of 'an' if 'd' is unknown.\n        d (float, optional): The common difference if 'n' is unknown.\n    Returns:\n        dict: Contains the computed number of terms (n), or common difference (d).\n    Examples:\n        >>> arithmetic_sequence_properties(3, 15, n=7)\n        {'common_difference': 2.0}\n        >>> arithmetic_sequence_properties(3, 15, d=2)\n        {'number_of_terms': 7}\n    \"\"\"\n    if d is not None:\n        # Compute n using the formula an = a1 + (n-1)d\n        n_value = ((an - a1) / d) + 1\n        return {'number_of_terms': int(n_value)}\n    elif n is not None:\n        # Compute d using the formula d = (an - a1) / (n-1)\n        d_value = (an - a1) / (n - 1)\n        return {'common_difference': d_value}\n    else:\n        raise ValueError(\"Either 'n' or 'd' must be provided.\")", "def number_of_terms_given_sum(a, d, total_sum):\n    \"\"\"\n    Calculate the number of terms in an arithmetic sequence given the sum.\n    Parameters:\n    a : int or float\n        The first term of the arithmetic sequence.\n    d : int or float\n        The common difference.\n    total_sum : int or float\n        The total sum of the sequence.\n    Returns:\n    int\n        The number of terms in the sequence whose sum is total_sum.\n    Examples:\n    >>> number_of_terms_given_sum(3, 2, 75)\n    10\n    \"\"\"\n    import math\n    # using derived quadratic formula from the sum formula: n^2 + n(2a - 1)/d - 2S/d = 0\n    discriminant = ((2 * a - d) ** 2) + 8 * d * total_sum\n    n = (-2 * a + d + math.sqrt(discriminant)) / (2 * d)\n    return round(n)"], "Sequences and Series": ["def sum_of_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    \n    Parameters:\n    - a: float. The first term of the series.\n    - r: float. The common ratio.\n    - n: int. The number of terms to sum.\n    \n    Returns:\n    - float. The sum of the first n terms of the geometric series.\n    \n    Example:\n    >>> sum_of_geometric_series(3, 2, 4)\n    45\n    \"\"\"\n    if r == 1:\n        return n * a\n    return a * (1 - r**n) / (1 - r)", "def calculate_geometric_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric in teh sequence.\n    - n (int): The nth term to be found in the sequence.\n    Returns:\n    - float: The nth term of the sequence.\n    Examples:\n    >>> calculate_geometric_term(2, 3, 4)\n    54.0\n    >>> calculate_geometric_term(5, 2, 5)\n    80.0\n    \"\"\"\n    return a * (r ** (n - 1))", "def sum_of_arithmetic_series(n, a, l):\n    \"\"\"\n    Compute the sum of an arithmetic series using the formula S = (n/2) * (a + l), where\n    'n' is the number of terms, 'a' is the first term, and 'l' is the last term.\n    \n    Parameters:\n    - n (int): Number of terms in the series. Must be a positive integer.\n    - a (numeric): The first term of the series.\n    - l (numeric): The last term of the series.\n    \n    Returns:\n    - numeric: The sum of the arithmetic series.\n    \n    Examples:\n    - sum_of_arithmetic_series(5, 1, 9) returns 25, because (1 + 3 + 5 + 7 + 9)/2 = 25.\n    - sum_of_arithmetic_series(100, 1, 199) returns 10000.\n    \"\"\"\n    if n < 1 or not isinstance(n, int):\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (a + l)) // 2", "def geometric_series_sum(first_term, ratio, number_of_terms):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n    - first_term : float or sympy.Symbol\n        The first term of the geometric series.\n    - ratio : float or sympy.Symbol\n        The common ratio of the geometric series.\n    - number_of_terms : int\n        The number of terms of the series to sum up.\n    Returns:\n    - float or sympy.Expr\n        The sum of the first n terms of the geometric series.\n    Examples:\n    >>> geometric_series_sum(1, 0.5, 3)\n    1.75\n    >>> geometric_series_sum(3, 2, 4)\n    45\n    >>> a, r = sp.symbols('a r')\n    >>> geometric_series_sum(a, r, 5)\n    a*(1 - r**5)/(1 - r)\n    Raises:\n    - ValueError: If number_of_terms is non-positive.\n    \"\"\"\n    if number_of_terms <= 0:\n        raise ValueError(\"The number of terms must be positive.\")\n    \n    return first_term * (1 - ratio ** number_of_terms) / (1 - ratio)", "def geometric_sequence_term(first_term, ratio, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    - first_term (float): The first term of the geometric sequence.\n    - ratio (float): The common ratio between consecutive terms.\n    - n (int): The term index (1-based) to compute.\n    Returns:\n    - float: The nth term of the geometric sequence.\n    \n    Examples:\n    >>> geometric_sequence_term(1, 2, 4)\n    8\n    >>> geometric_sequence_term(3, 3, 5)\n    243\n    \"\"\"\n    return first_term * (ratio ** (n - 1))", "def sum_of_infinite_geometric_series(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series, given that |r| < 1.\n    \n    Parameters:\n    - a: float. The first term of the series.\n    - r: float. The common ratio, |r| must be less than 1.\n    \n    Returns:\n    - float. The sum of the infinite geometric series. Returns None if |r| >= 1.\n    \n    Example:\n    >>> sum_of_infinite_geometric_series(3, 0.5)\n    6.0\n    \"\"\"\n    if abs(r) < 1:\n        return a / (1 - r)\n    return None", "def sum_of_first_n_integers(n):\n    \"\"\"\n    Calculates the sum of the first n positive integers.\n    Parameters\n    ----------\n    n : int\n        The number of the last term in the sequence of positive integers starting from 1.\n    \n    Returns\n    -------\n    int\n        The sum of the first n positive integers calculated using the formula n(n + 1) / 2.\n    \n    Examples\n    --------\n    >>> sum_of_first_n_integers(10)\n    55\n    >>> sum_of_first_n_integers(100)\n    5050\n    \"\"\"\n    return n * (n + 1) // 2", "def calculate_common_ratio(term1, term2):\n    \"\"\"\n    Calculate the common ratio of a geometric sequence from two consecutive terms.\n    Parameters:\n    term1 (float): The first term in the sequence.\n    term2 (float): The second term in the sequence, which immediately follows the first term.\n    Returns:\n    float: The common ratio.\n    Examples:\n    >>> calculate_common_ratio(2, 6)\n    3.0\n    >>> calculate_common_ratio(5, 15)\n    3.0\n    \"\"\"\n    # Ensure we are dealing with float precision\n    term1 = float(term1)\n    term2 = float(term2)\n    \n    # Calculate and return the common ratio; (term2/term1)\n    return term2 / term1", "def identify_first_term_and_ratio(terms):\n    \"\"\"\n    Identify the first term and common ratio of a geometric sequence from its terms.\n    Parameters:\n    terms (list): A list of numbers representing the terms of a geometric sequence.\n    Returns:\n    tuple: A tuple containing the first term and the common ratio, respectively.\n    Examples:\n    >>> identify_first_term_and_ratio([2, 4, 8, 16])\n    (2, 2)\n    >>> identify_first_term_and_ratio([3, 1.5, 0.75, 0.375])\n    (3, 0.5)\n    \"\"\"\n    if len(terms) < 2:\n        raise ValueError(\"At least two terms are required to determine the common ratio.\")\n    first_term = terms[0]\n    common_ratio = terms[1] / terms[0] if terms[0] != 0 else None\n    if any(terms[i] * common_ratio != terms[i + 1] for i in range(len(terms) - 1)):\n        raise AssertionError(\"The provided terms do not form a geometric sequence with a constant ratio.\")\n    return (first_term, common_ratio)", "def geometric_series_details(a, r, n):\n    \"\"\"\n    Get details of a geometric series, specifically the nth term.\n    \n    Parameters:\n        a (float or int): The first term of the series.\n        r (float or int): The common ratio of the series.\n        n (int): The nth term being queried.\n    Returns:\n        dict: Details including the first term, common ratio, and nth term.\n    \n    Examples:\n        >>> geometric_series_details(1, 2, 4)\n        {'first_term': 1, 'common_ratio': 2, 'nth_term': 8}\n        >>> geometric_series_details(3, -2, 3)\n        {'first_term': 3, 'common_ratio': -2, 'nth_term': -12}\n    \"\"\"\n    nth_term = a * r**(n-1)\n    return {\n        'first_term': a,\n        'common_ratio': r,\n        'nth_term': nth_term\n    }", "def generate_geometric_sequence(a, r, n):\n    \"\"\"\n    Generate the first n terms of a geometric sequence.\n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the sequence.\n    - n (int): The number of terms to generate from the sequence.\n    Returns:\n    - list of floats: A list containing the first n terms of the geometric sequence.\n    Examples:\n    >>> generate_geometricSequence(1, 2, 4)\n    [1, 2, 4, 8]\n    >>> generate_geometric_sequence(3, 3, 3)\n    [3, 9, 27]\n    \"\"\"\n    return [a * (r ** i) for i in range(n)]", "def min_terms_for_sum(a, r, S):\n    \"\"\"\n    Determines the minimum number of terms 'n' required in a geometric sequence \n    for the sum to be at least 'S'.\n    \n    Parameters:\n        a (float): The first term of the geometric sequence.\n        r (float): The common ratio.\n        S (float): The minimum sum required.\n    Returns:\n        int: The minimum number of terms needed for the sum to meet or exceed 'S'.\n    Examples:\n        >>> min_terms_for_sum(1, 2, 31)\n        5\n        >>> min_terms_for_sum(100, 0.5, 150)\n        3\n    \"\"\"\n    if r == 1:\n        return math.ceil(S / a)\n    else:\n        n = math.log(1 + (S * (r - 1) / a), r)\n        return math.ceil(n)", "def find_term_for_geometric_inequality(a, r, threshold, direction='greater'):\n    \"\"\"\n    Find the smallest term number n in a geometric sequence where the nth term satisfies an inequality condition.\n    \n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric sequence.\n    - threshold (float): The value to compare the nth term against.\n    - direction (str): Determines the type of inequality; either 'greater' if the term should be greater than the threshold, or 'less' for less than the threshold.\n    \n    Returns:\n    - int: The smallest term number n meeting the condition or -1 if no such term exists (e.g., for wrong input parameters).\n    \n    Examples:\n    >>> find_term_for_geometric_inequality(3, 2, 100, 'greater')\n    7\n    >>> find_term_for_geometric_inequality(100, 0.5, 1, 'less')\n    8\n    \"\"\"\n    import math\n    \n    if direction not in ['greater', 'less']:\n        return -1  # Invalid direction input\n    if r <= 0 or a == 0:\n        return -1  # Invalid ratio or initial term\n    \n    if direction == 'greater':\n        # Solve a*r^(n-1) > threshold\n        # taking logarithm both sides: (n-1) * log(r) > log(threshold / a)\n        if r > 1:\n            n = math.ceil((math.log(threshold / a) / math.log(r)) + 1)\n            return n\n        return -1  # No solution exists if r <= 1\n    elif direction == 'less':\n        # Solve a*r^(n-1) < threshold\n        # taking logarithm both sides: (n-1) * log(r) < log(threshold / a)\n        if r < 1 and r > 0:\n            n = math.ceil((math.log(threshold / a) / math.log(r)) + 1)\n            return n\n        return -1  # No solution exists if r >= 1\n    return -1  # Should not reach here", "def geometric_common_ratio(terms):\n    \"\"\"\n    Determine the common ratio of a geometric sequence given at least two terms.\n    Parameters:\n    terms (list of int/float): A list containing at least two terms of the geometric sequence in order.\n    Returns:\n    float: The common ratio of the sequence.\n    Example:\n    >>> geometric_common_ratio([2, 6, 18])\n    3.0\n    \"\"\"\n    if len(terms) < 2:\n        raise ValueError(\"At least two terms are required to determine the common ratio.\")\n    return terms[1] / terms[0]", "def is_geometric_sequence(sequence):\n    \"\"\"\n    Determine whether a given sequence of numbers is a geometric sequence.\n    \n    Parameters:\n        sequence (list of float|int): The sequence to be checked.\n    \n    Returns:\n        bool: True if the sequence is geometric, False otherwise.\n    \n    Examples:\n        >>> is_geometric_sequence([2, 4, 8, 16])\n        True\n        >>> is_geometric_sequence([2, 4, 6, 8])\n        False\n    \"\"\"\n    if len(sequence) < 2:\n        return False\n    ratios = set(sequence[i] / sequence[i-1] for i in range(1, len(sequence)))\n    return len(ratios) == 1", "def filter_series_by_term_parity(first_term, common_ratio, num_terms, parity='even'):\n    \"\"\"\n    Extract and list the terms from a geometric series that are either even-powered or odd-powered.\n    Parameters:\n    - first_term (float): The first term of the series.\n    - common_ratio (float): The common ratio of the series.\n    - num_terms (int): The number of terms to consider from the series.\n    - parity (str): 'even' if even-powered terms are desired, 'odd' for odd-powered terms.\n    Returns:\n    - list: A list of terms from the geometric series corresponding to the specified parity.\n    Examples:\n    >>> filter_series_by_term_parity(1, 2, 5, 'even')\n    [2, 8]\n    >>> filter_series_by_term_parity(1, 3, 5, 'odd')\n    [1, 9, 81]\n    \"\"\"\n    terms = [first_term * (common_ratio ** i) for i in range(num_terms)]\n    if parity == 'even':\n        return terms[1::2]  # Selecting terms at even indices, zero-based index means odd powers\n    else:\n        return terms[0::2]  # Selecting terms at odd indices, zero-based index means even powers", "def geometric_series_operations(terms, operation='product'):\n    \"\"\"\n    Perform operations such as product or factorial manipulation on terms of a geometric series.\n    \n    Parameters:\n    terms : list of float or int\n        The terms of the geometric series on which to perform the operation.\n    operation : str, optional\n        The type of operation to perform, supported operations are 'product' and 'factorial_product'.\n        Default is 'product'.\n        \n    Returns:\n    float\n        The result of the specified operation on the given sequence terms.\n    \n    Examples:\n    >>> geometric_series_operations([2, 4, 8])\n    64\n    >>> geometric_series_operations([2, 4, 8], operation='factorial_product')\n    10321920\n    \"\"\"\n    if operation == 'product':\n        result = np.prod(terms)\n    elif operation == 'factorial_product':\n        result = np.prod([factorial(int(term)) for term in terms])\n    else:\n        raise ValueError(\"Unsupported operation provided.\")\n    \n    return result", "def series_after_multiplication_by_ratio(first_term, common_ratio, num_terms):\n    \"\"\"\n    Compute the new series obtained by multiplying each term of an initial geometric series by the common ratio.\n    Parameters:\n    - first_term (float): The first term of the series.\n    - common_ratio (float): The common ratio of the series.\n    - num_terms (int): The number of terms to consider from the series.\n    Returns:\n    - list: A new series produced by multiplying each term of the original by the common ratio.\n    Examples:\n    >>> series_after_multiplication_by_ratio(1, 2, 5)\n    [2, 4, 8, 16, 32]\n    \"\"\"\n    initial_terms = [first_term * (common_ratio ** i) for i in range(num_terms)]\n    return [x * common_ratio for x in initial_terms]", "def arithmetic_term_finder(a1, d, n):\n    \"\"\"\n    Calculates the nth term of an arithmetic sequence.\n    \n    Parameters:\n    - a1 (int or float): The first term of the arithmetic sequence.\n    - d (int or float): The common difference of the sequence.\n    - n (int): The term number to find (1-based index).\n    \n    Returns:\n    - int or float: The nth term of the arithmetic sequence.\n    \n    Examples:\n    >>> arithmetic_term_finder(1, 2, 5)\n    9\n    >>> arithmetic_term_finder(3, -1, 10)\n    -6\n    \"\"\"\n    # nth term formula: an = a1 + (n - 1) * d\n    return a1 + (n - 1) * d"]}