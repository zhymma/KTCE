{"Sine and Cosine Functions": [{"tool": "def sine(angle: float, radians: bool = True) -> float:\n    \n    if not radians:\n        angle = math.radians(angle)\n    return math.sin(angle)", "subfield": "Sine and Cosine Functions", "tool_name": "sine", "tool_type": "function", "description": "Calculate the sine of an angle provided in radians or degrees.", "docstring": "Calculate the sine of an angle provided in radians or degrees.\n    Parameters:\n    angle (float): The angle.\n    radians (bool): If True, the angle is in radians; if False, it's in degrees.\n    Returns:\n    float: The sine of the angle.", "Freq": 7, "TSR": 7, "experience_pool": "- Experience: The `to_radians` function is missing in the original tool code.\n- Solution: Modify the `sine` function to directly handle the conversion of degrees to radians using `math.radians` if the `radians` parameter is set to False.\n- Updated tool code with docstring provided."}, {"tool": "def simplify_trig_expression(exp):\n    \n    from sympy import simplify\n    simplified_expression = simplify(exp)\n    return simplified_expression", "subfield": "Sine and Cosine Functions", "tool_name": "simplify_trig_expression", "tool_type": "function", "description": "Use sympy to simplify the given trigonometric expression.", "docstring": "Use sympy to simplify the given trigonometric expression.\n    \n    Parameters\n    ----------\n    exp : sympy expression\n        The trigonometric expression to be simplified.\n    Returns\n    -------\n    simplified_expression: sympy expression\n        The simplified form of the input expression.\n    Example\n    --------\n    >> from sympy import symbols, cos, sin\n    >> x = symbols('x')\n    >> expression = sin(x)**2 + cos(x)**2\n    >> simplify_trig_expression(expression)", "Freq": 30, "TSR": 11, "experience_pool": "Experience 1:\nProblem: Find the phase shift of the graph of $y = 2 \\sin \\left( 2x + \\frac{\\pi}{3} \\right).$\nAnswer: -\\frac{\\pi}{6}\n\nSolution:\n```python\nfrom sympy import symbols, sin\n\ndef solution():\n    x = symbols('x')\n    expression = 2 * sin(2*x + (1/3)*pi)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: 2*sin(2*x + 1.0471975511966)\n\nExperience 2:\nProblem: As $x$ ranges over all real numbers, find the range of\n\\[f(x) = \\sin^4 x + \\cos ^2 x.\\]Enter your answer using interval notation.\nAnswer: \\left[ \\frac{3}{4}, 1 \\right]\n\nSolution:\n```python\nfrom sympy import symbols, sin, cos\n\ndef solution():\n    x = symbols('x')\n    expression = sin(x)**4 + cos(x)**2\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: sin(x)**4 + cos(x)**2\n\nExperience 3:\nProblem: Simplify\n\\[\\frac{\\cos x}{1 + \\sin x} + \\frac{1 + \\sin x}{\\cos x}.\\]\nAnswer: 2 \\sec x\n\nSolution:\n```python\nfrom sympy import symbols, sin, cos\n\ndef solution():\n    x = symbols('x')\n    expression = cos(x) / (1 + sin(x)) + (1 + sin(x)) / cos(x)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: 2/cos(x)\n\nExperience 4:\nProblem: Express $\\sin 4x + \\sin 6x$ as a product of trigonometric functions.\nAnswer: 2 \\sin 5x \\cos x\n\nSolution:\n```python\nfrom sympy import symbols, sin, cos\n\ndef solution():\n    x = symbols('x')\n    expression = sin(4*x) + sin(6*x)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: sin(4*x) + sin(6*x)\n\nExperience 5:\nProblem: The expression $\\cos x + \\cos 3x + \\cos 7x + \\cos 9x$ can be written in the equivalent form\n\\[a \\cos bx \\cos cx \\cos dx\\]for some positive integers $a,$ $b,$ $c,$ and $d.$  Find $a + b + c + d.$\nAnswer: 13\n\nSolution:\n```python\nfrom sympy import symbols, cos\n\ndef solution():\n    x = symbols('x')\n    expression = cos(x) + cos(3*x) + cos(7*x) + cos(9*x)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nresult = solution()\na = result.coeff(cos(x))\nb = result.coeff(x)\nc = result.coeff(3*x)\nd = result.coeff(7*x)\nsum_abcd = a + b + c + d\nprint(sum_abcd)\n```\n\nOutput: 1"}, {"tool": "def calculate_sine_cosine(opposite, adjacent, hypotenuse):\n    \n    if opposite is None or adjacent is None or hypotenuse is None:\n        raise ValueError(\"All sides of the triangle must be provided.\")\n    if opposite < 0 or adjacent < 0 or hypotenuse < 0:\n        raise ValueError(\"Side lengths cannot be negative.\")\n    if opposite**2 + adjacent**2 < hypotenuse**2:\n        raise ValueError(\"Invalid triangle.\")\n    sine = opposite / hypotenuse\n    cosine = adjacent / hypotenuse\n    return {\"sine\": sine, \"cosine\": cosine}", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_sine_cosine", "tool_type": "function", "description": "Calculate the sine and cosine of an angle in a triangle.", "docstring": "Calculate the sine and cosine of an angle in a triangle.\n    Parameters:\n    opposite (float): The length of the side opposite the angle.\n    adjacent (float): The length of the side adjacent to the angle.\n    hypotenuse (float): The length of the hypotenuse.\n    Returns:\n    dict: A dictionary with the sine and cosine of the angle.", "Freq": 8.0, "TSR": 1, "experience_pool": "- Experience: When using the calculate_sine_cosine function, make sure to provide valid values for the opposite, adjacent, and hypotenuse parameters. All sides of the triangle must be provided, and side lengths cannot be negative. If any of the parameters are missing or invalid, the function will raise a ValueError with an appropriate error message.\n- Experience: The calculate_sine_cosine function now handles all types of triangles, not just right triangles. If the sum of the squares of the two shorter sides is not greater than the square of the longest side, the function will raise a ValueError with the message \"Invalid triangle.\""}, {"tool": "def evaluate_sin_cos(angle, in_degrees=True):\n    \n    if in_degrees:\n        angle = math.radians(angle)\n        \n    sin_val = math.sin(angle)\n    cos_val = math.cos(angle)\n    \n    return sin_val, cos_val", "subfield": "Sine and Cosine Functions", "tool_name": "evaluate_sin_cos", "tool_type": "function", "description": "This function takes an angle and returns its sine and cosine.", "docstring": "This function takes an angle and returns its sine and cosine.\n    \n    Parameters\n    ----------\n    angle : float\n        The angle, measured in degrees by default, to compute the sine and cosine of.\n    in_degrees : bool, optional\n        A flag that specifies whether the input angle is in degrees. Default is True.\n        \n    Returns\n    -------\n    tuple\n        The sine and cosine of the angle as a tuple (sin, cos).", "Freq": 24.5, "TSR": 17.0, "experience_pool": "Experience 1:\nProblem: Compute $\\arccos (\\sin 2)$. All functions are in radians.\nAnswer: $2 - \\frac{\\pi}{2}$\nSolution:\n```python\nimport math\n\ndef solution():\n    angle = 2\n    sin_val, _ = evaluate_sin_cos(angle)\n    cos_angle = math.acos(sin_val)\n    result = cos_angle\n    return result\n\nprint(solution())\n```\nOutput: $1.5358897417550101$\n\nExperience 2:\nProblem: Compute $\\csc \\frac{\\pi}{14} - 4 \\cos \\frac{2 \\pi}{7}$.\nAnswer: $2$\nSolution:\n```python\nimport math\n\ndef solution():\n    angle1 = math.pi / 14\n    angle2 = 2 * math.pi / 7\n\n    sin_val1, cos_val1 = evaluate_sin_cos(angle1, in_degrees=False)\n    sin_val2, cos_val2 = evaluate_sin_cos(angle2, in_degrees=False)\n\n    result = (4 * cos_val1 * cos_val2 - 4 * sin_val2 * cos_val2) / sin_val2\n    return result\n\nprint(solution())\n```\nOutput: $0.615957056739808$\n\nExperience 3:\nProblem: In right triangle $ABC$ with $\\angle B = 90^\\circ$, we have $2\\sin A = 3\\cos A$. What is $\\sin A$?\nAnswer: $\\frac{3\\sqrt{13}}{13}$\nSolution:\n```python\ndef solution():\n    \"\"\"Find sin(A) in the right triangle ABC where 2sin(A) = 3cos(A).\"\"\"\n    sin_val, cos_val = evaluate_sin_cos(45)  # sin(45) = cos(45) = 1/sqrt(2)\n    sin_A = 3 / (2 * cos_val)\n    result = sin_A\n    return result\n\nprint(solution())\n```\nOutput: $2.1213203435596424$"}, {"tool": "def calculate_side_given_angle(angle, side, function, angle_unit=\"radians\"):\n    if angle_unit == \"degrees\":\n        angle = math.radians(angle)\n    \n    if function == \"sine\":\n        return side / math.sin(angle)\n    elif function == \"cosine\":\n        return side / math.cos(angle)\n    elif function == \"tangent\":\n        return side / math.tan(angle)\n    else:\n        raise ValueError(\"Invalid function parameter. Must be 'sine', 'cosine', or 'tangent'.\")", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_side_given_angle", "tool_type": "function", "description": "None", "docstring": null, "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The tool can handle cases where the angle is given in degrees by adding an optional angle_unit parameter. This allows for more flexibility in using the tool.\n- Experience: The tool can handle cases where the known side is the hypotenuse of the triangle. It accurately calculates the length of the other side using the appropriate trigonometric function.\n- Experience: The tool can handle cases where the function parameter is not provided or is not \"sine\" or \"cosine\". It raises a ValueError with a descriptive error message.\n- Experience: The tool has an improved docstring that explains the purpose of the function and the expected input parameters.\n- Experience: The tool has been modified to handle the \"tangent\" function as well. It accurately calculates the length of the other side using the tangent function."}, {"tool": "def calculate_angle_given_ratio(ratio, function):\n    \n    if function == \"sine\":\n        if -1 <= ratio <= 1:\n            return math.asin(ratio)\n        else:\n            raise ValueError(\"Invalid ratio. Ratio must be between -1 and 1.\")\n    elif function == \"cosine\":\n        if -1 <= ratio <= 1:\n            return math.acos(ratio)\n        else:\n            raise ValueError(\"Invalid ratio. Ratio must be between -1 and 1.\")\n    else:\n        raise ValueError(\"Invalid function. Function must be 'sine' or 'cosine'.\")", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_angle_given_ratio", "tool_type": "function", "description": "Calculate an angle given the sine or cosine ratio.", "docstring": "Calculate an angle given the sine or cosine ratio.\n    Parameters:\n    ratio (float): The sine or cosine ratio.\n    function (str): The function to use (\"sine\" or \"cosine\").\n    Returns:\n    float: The angle in radians.", "Freq": 19.5, "TSR": 15.5, "experience_pool": "Experience 1: The tool code now has a docstring that provides information on how to use the function and what it returns.\nExperience 2: The tool code now handles invalid inputs by raising ValueError with appropriate error messages.\nExperience 3: The tool code now handles the case when the ratio is outside the range [-1, 1] and raises ValueError with an appropriate error message."}, {"tool": "def calculate_sine_period(b: float) -> float:\n    \n    period = 2 * math.pi / b\n    return period", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_sine_period", "tool_type": "function", "description": "Calculate the period of a sine function given the value of b in the general form y = a*sin(bx + c) + d.", "docstring": "Calculate the period of a sine function given the value of b in the general form y = a*sin(bx + c) + d.\n    Parameters:\n    b (float): The value of b in the sine function.\n    Returns:\n    float: The period of the sine function.", "Freq": 6, "TSR": 3, "experience_pool": "- Problem: What is the period of $y = \\sin 3x $?\n  Answer: \\frac{2\\pi}{3}\n  ```python\n  def solution():\n      period = calculate_sine_period(3)\n      return period\n\n  print(solution())\n  ```\n  Output: 2.0943951023931953\n  \n- Problem: What is the period of $y = \\sin 2x $?\n  Answer: \\frac{2\\pi}{2} = \\pi\n  ```python\n  def solution():\n      period = calculate_sine_period(2)\n      return period\n\n  print(solution())\n  ```\n  Output: 3.141592653589793\n\n- Problem: What is the period of $y = \\sin 7x $?\n  Answer: \\frac{2\\pi}{7}\n  ```python\n  def solution():\n      period = calculate_sine_period(7)\n      return period\n\n  print(solution())\n  ```\n  Output: 0.8975979010256552"}, {"tool": "def calculate_triangle_area(side1: float, side2: float, side3: float) -> float:\n    \n    # Check if the given side lengths can form a valid triangle\n    if side1 + side2 <= side3 or side1 + side3 <= side2 or side2 + side3 <= side1:\n        raise ValueError(\"Invalid side lengths. Cannot form a triangle.\")\n    # Calculate the semi-perimeter of the triangle\n    s = (side1 + side2 + side3) / 2\n    # Calculate the area of the triangle using Heron's formula\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_triangle_area", "tool_type": "function", "description": "Calculate the area of a triangle given the lengths of its sides.\n    Args:\n        side1 (float): Length of side 1.\n        side2 (float): Length of side 2.\n        side3 (float): Length of side 3.\n    Returns:\n        float: Area of the triangle.\n    Raises:\n        ValueError: If the given side lengths cannot form a valid triangle.", "docstring": "Calculate the area of a triangle given the lengths of its sides.\n    Args:\n        side1 (float): Length of side 1.\n        side2 (float): Length of side 2.\n        side3 (float): Length of side 3.\n    Returns:\n        float: Area of the triangle.\n    Raises:\n        ValueError: If the given side lengths cannot form a valid triangle.", "Freq": 0, "TSR": 0}], "Sine Function": [{"tool": "def sine_of_angle(angle, unit='radians'):\n    \n    if unit == 'degrees':\n        angle = np.deg2rad(angle)\n    return np.sin(angle)", "subfield": "Sine Function", "tool_name": "sine_of_angle", "tool_type": "function", "description": "Compute the sine of a given angle with the option to specify the angle's unit.", "docstring": "Compute the sine of a given angle with the option to specify the angle's unit.\n    Parameters:\n    - angle (float): The angle for which the sine value is calculated.\n    - unit (str): The unit of the angle ('radians' or 'degrees'). Default is 'radians'.\n    Returns:\n    - float: Sine of the given angle.\n    Examples:\n    >>> sine_of_angle(np.pi / 2)\n    1.0\n    >>> sine_of_angle(90, unit='degrees')\n    1.0", "Freq": 31, "TSR": 30}, {"tool": "def arcsine_of_value(value):\n    \n    if not -1 <= value <= 1:\n        raise ValueError(\"Input value must be within the range -1 to 1.\")\n    return math.asin(value)", "subfield": "Sine Function", "tool_name": "arcsine_of_value", "tool_type": "function", "description": "Calculate the arcsine of a given value, ensuring the result is within the principal range [-π/2, π/2].", "docstring": "Calculate the arcsine of a given value, ensuring the result is within the principal range [-π/2, π/2].\n    Parameters:\n    - value: float\n      The value for which to compute the arcsine, where -1 <= value <= 1.\n    Returns:\n    - float\n      The arcsine of the value, in radians.\n    Raises:\n    - ValueError: If the input value is outside the valid range.\n    Examples:\n    >>> arcsine_of_value(1)\n    1.5707963267948966\n    >>> arcsine_of_value(0)\n    0.0", "Freq": 5, "TSR": 4, "experience_pool": "- Problem: Find $\\sin \\left( -\\frac{\\pi}{2} \\right)$.\n  Answer: -1\n  Solution: The correct way to find the sine of $-\\frac{\\pi}{2}$ is to use the math.sin function, not the arcsine function. The arcsine function calculates the inverse of the sine function. To find the sine of $-\\frac{\\pi}{2}$, use the following code:\n  ```python\n  import math\n  \n  def solution():\n      \"\"\"Find sin(-pi/2) and return the result.\"\"\"\n      value = -math.pi/2\n      result = math.sin(value)\n      return result\n  \n  print(solution())\n  ```\n  Output: -1.0"}, {"tool": "def unit_circle_coordinates(angle, unit='degrees'):\n    \n    if unit == 'degrees':\n        angle = np.radians(angle)\n    x = np.cos(angle)\n    y = np.sin(angle)\n    return (x, y)", "subfield": "Sine Function", "tool_name": "unit_circle_coordinates", "tool_type": "function", "description": "Compute the coordinates of a point on a unit circle given an angle.", "docstring": "Compute the coordinates of a point on a unit circle given an angle.\n    Parameters\n    ----------\n    angle : float\n        The angle in the unit circle to find the coordinates for.\n    unit : str, optional\n        The unit of the angle ('degrees' or 'radians'). Default is 'degrees'.\n    Returns\n    -------\n    tuple\n        A tuple (x, y) representing coordinates of the point on the unit circle.\n    Examples\n    --------\n    >>> unit_circle_coordinates(90)\n    (0, 1)\n    >>> unit_circle_coordinates(np.pi/6, unit='radians')\n    (0.8660254037844386, 0.5)", "Freq": 4, "TSR": 2}, {"tool": "def solve_sine_equation(func, guess):\n    \n    return fsolve(func, guess)", "subfield": "Sine Function", "tool_name": "solve_sine_equation", "tool_type": "function", "description": "Solve an equation involving the sine function where the function crosses zero. \n    Note: User defines the function where sine is part of the equation in `func`.", "docstring": "Solve an equation involving the sine function where the function crosses zero. \n    Note: User defines the function where sine is part of the equation in `func`.\n    Parameters:\n    func : callable\n        The function to be solved, which must be defined by the user. It should take an angle in radians as input.\n    guess : float or list\n        Initial guess for the roots of the equation. Multiple guesses can be provided in a list for multiple solutions.\n    Returns:\n    float or np.array\n        The angle(s) in radians that are roots of the equation.\n    Examples:\n    >>> solve_sine_equation(lambda x: np.sin(x) - 0.5, [0, 2])\n    array([0.52359878, 2.61799388])", "Freq": 6.5, "TSR": 4.0, "experience_pool": "- Experience: The `solve_sine_equation` function can be used to solve equations involving the sine function by providing the equation as a callable function and initial guesses for the roots. The function returns the angle(s) in radians that are roots of the equation.\n- Experience: The `solve_sine_equation` function uses the `fsolve` function from the `scipy.optimize` module to solve the equation numerically.\n- Experience: The `func` parameter in the `solve_sine_equation` function should be a callable function that takes an angle in radians as input.\n- Experience: The `guess` parameter in the `solve_sine_equation` function can be a single float or a list of floats representing the initial guesses for the roots of the equation.\n- Experience: The `solve_sine_equation` function returns a float or an np.array depending on the number of roots found."}, {"tool": "def sine_function_in_right_triangle(opposite, hypotenuse):\n    \n    return opposite / hypotenuse", "subfield": "Sine Function", "tool_name": "sine_function_in_right_triangle", "tool_type": "function", "description": "Calculate the sine function in a right triangle (opposite/hypotenuse).", "docstring": "Calculate the sine function in a right triangle (opposite/hypotenuse).\n    Parameters:\n    - opposite (float): The length of the side opposite to the angle in the right triangle.\n    - hypotenuse (float): The length of the hypotenuse in the right triangle.\n    Returns:\n    - float: The value of the sine function in the right triangle.", "Freq": 0, "TSR": 0}, {"tool": "def calculate_trapezoid_area(base1, base2, height):\n    \n    return (base1 + base2) * height / 2", "subfield": "Sine Function", "tool_name": "calculate_trapezoid_area", "tool_type": "function", "description": "Calculate the area of a trapezoid given the lengths of its bases and height.", "docstring": "Calculate the area of a trapezoid given the lengths of its bases and height.\n    Parameters:\n    base1 (float): Length of the first base of the trapezoid.\n    base2 (float): Length of the second base of the trapezoid.\n    height (float): Height of the trapezoid.\n    Returns:\n    float: Area of the trapezoid.", "Freq": 2, "TSR": 0}, {"tool": "def find_chord_intersection(radius, chord_length):\n    \n    angle = 2 * np.arcsin(chord_length / (2 * radius))\n    x1 = radius * np.cos(angle / 2)\n    y1 = radius * np.sin(angle / 2)\n    x2 = radius * np.cos(np.pi - angle / 2)\n    y2 = radius * np.sin(np.pi - angle / 2)\n    return (x1, y1), (x2, y2)", "subfield": "Sine Function", "tool_name": "find_chord_intersection", "tool_type": "function", "description": "Find the intersection points of two chords in a circle given the radius and length of one chord.", "docstring": "Find the intersection points of two chords in a circle given the radius and length of one chord.\n    Parameters:\n    radius (float): Radius of the circle.\n    chord_length (float): Length of one of the chords.\n    Returns:\n    tuple: Coordinates of the two intersection points.", "Freq": 1, "TSR": 0}, {"tool": "def sine_of_angle_in_equilateral_triangle(angle):\n    \n    return math.sin(math.radians(angle))", "subfield": "Sine Function", "tool_name": "sine_of_angle_in_equilateral_triangle", "tool_type": "function", "description": "Calculate the sine of an angle in an equilateral triangle.", "docstring": "Calculate the sine of an angle in an equilateral triangle.\n    Parameters:\n    angle (float): The angle in degrees.\n    Returns:\n    float: The sine of the angle.", "Freq": 0, "TSR": 0}], "Tangent Function": [{"tool": "def calculate_tangent(angle, in_degrees=True):\n    \n    angle_radians = np.deg2rad(angle) if in_degrees else angle\n    return np.tan(angle_radians)", "subfield": "Tangent Function", "tool_name": "calculate_tangent", "tool_type": "function", "description": "Calculate the tangent of an angle.", "docstring": "Calculate the tangent of an angle.\n    \n    Parameters:\n        angle (float): The angle for which to calculate the tangent.\n        in_degrees (bool): If True, the angle is in degrees, otherwise radians.\n    \n    Returns:\n        float: The tangent of the given angle.", "Freq": 11.0, "TSR": 9.5}, {"tool": "def tangent_half_angle(tan_x):\n    \n    return np.tan(np.arctan(tan_x) / 2)", "subfield": "Tangent Function", "tool_name": "tangent_half_angle", "tool_type": "function", "description": "Compute tan(x/2) from tan(x) using the half-angle formula derived from double angle identity.", "docstring": "Compute tan(x/2) from tan(x) using the half-angle formula derived from double angle identity.\n    Parameters:\n    tan_x (float): Tangent of the angle x.\n    Returns:\n    float: Tangent of half of the angle x.", "Freq": 3, "TSR": 2, "experience_pool": "The previous tool code was incorrect as it did not accurately compute the tangent of half of the angle. The formula used in the code was incorrect and did not match the half-angle formula for tangent. The evolved tool code uses the correct half-angle formula to compute the tangent of half of the angle. This will improve the accuracy of the tool."}, {"tool": "def calculate_tangent(angle, in_degrees=True):\n    \n    angle_radians = np.deg2rad(angle) if in_degrees else angle\n    return np.tan(angle_radians)", "subfield": "Tangent Function", "tool_name": "calculate_tangent", "tool_type": "function", "description": "Calculate the tangent of an angle.", "docstring": "Calculate the tangent of an angle.\n    Parameters:\n        angle (float): The angle for which to calculate the tangent.\n        in_degrees (bool): If True, the angle is in degrees, otherwise radians.\n    \n    Returns:\n        float: The tangent of the given angle.\n    Examples:\n        >>> calculate_tangent(45)\n        1.0\n        >>> calculate_tangent(np.pi/4, in_degrees=False)\n        1.0", "Freq": 9, "TSR": 8}, {"tool": "def calculate_trig_function(func, angle_degrees):\n    \n    angle_radians = math.radians(angle_degrees)\n    if func == 'sin':\n        return math.sin(angle_radians)\n    elif func == 'cos':\n        return math.cos(angle_radians)\n    elif func == 'tan':\n        return math.tan(angle_radians)\n    else:\n        raise ValueError(\"Invalid trigonometric function specified. Use 'sin', 'cos', or 'tan'.\")", "subfield": "Tangent Function", "tool_name": "calculate_trig_function", "tool_type": "function", "description": "Calculate trigonometric functions for a given angle in degrees.", "docstring": "Calculate trigonometric functions for a given angle in degrees.\n    Parameters:\n    - func (str): The trigonometric function to compute ('sin', 'cos', 'tan').\n    - angle_degrees (float): The angle in degrees for which to compute the trigonometric function.\n    Returns:\n    - float: The result of the trigonometric function.\n    Examples:\n    - calculate_trig_function('sin', 30) returns 0.5\n    - calculate_trig_function('cos', 90) returns approximately 0.0\n    - calculate_trig_function('tan', 45) returns approximately 1.0", "Freq": 9, "TSR": 8}, {"tool": "def find_equivalent_angle(target_angle, reference_angle):\n    \n    angle_difference = target_angle - reference_angle\n    equivalent_angle = angle_difference % 180 + reference_angle\n    return equivalent_angle", "subfield": "Tangent Function", "tool_name": "find_equivalent_angle", "tool_type": "function", "description": "Find an equivalent angle within a specific range based on the periodicity of the tangent function.", "docstring": "Find an equivalent angle within a specific range based on the periodicity of the tangent function.\n    Parameters:\n    target_angle (float): The target angle in degrees.\n    reference_angle (float): The reference angle in degrees.\n    Returns:\n    float: The equivalent angle within the specific range.", "Freq": 4, "TSR": 3}], "Cosine Function": [], "Trigonometric Functions": [{"tool": "def trig_calculator(func_name, angle, degrees=False):\n    \n    if degrees:\n        angle = np.deg2rad(angle)\n    trig_functions = {\n        'sin': np.sin,\n        'cos': np.cos,\n        'tan': np.tan,\n        'csc': lambda x: 1 / np.sin(x),\n        'sec': lambda x: 1 / np.cos(x),\n        'cot': lambda x: 1 / np.tan(x)\n    }\n    if func_name not in trig_functions:\n        raise ValueError(\"Invalid trigonometric function specified.\")\n    return trig_functions[func_name](angle)", "subfield": "Trigonometric Functions", "tool_name": "trig_calculator", "tool_type": "function", "description": "Calculate the trigonometric function value for a given angle.", "docstring": "Calculate the trigonometric function value for a given angle.\n    Parameters:\n    - func_name (str): Name of the trigonometric function ('sin', 'cos', 'tan', 'csc', 'sec', 'cot').\n    - angle (float): The angle at which to compute the function.\n    - degrees (bool, optional): Set to True if the angle is in degrees, False if in radians.\n    Returns:\n    - float or sympy expression: Value of the trigonometric function at the specified angle.\n    Examples:\n    >>> trig_calculator('cos', 90, True)\n    6.123233995736766e-17\n    >>> trig_calculator('tan', sp.pi/4)\n    1.0", "Freq": 2, "TSR": 2}, {"tool": "def trig_identity_sinusoidal_properties(angle_radians, identity=\"pythagorean\"):\n    \n    if identity == \"pythagorean\":\n        return sin(angle_radians)**2 + cos(angle_radians)**2", "subfield": "Trigonometric Functions", "tool_name": "trig_identity_sinusoidal_properties", "tool_type": "function", "description": "Calculate trigonometric properties based on given identities.", "docstring": "Calculate trigonometric properties based on given identities.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians.\n    - identity: str, default \"pythagorean\"\n        The identity to use for calculations. Currently supports 'pythagorean'.\n        \n    Returns:\n    - float\n        The value calculated using the specified identity.\n    Examples:\n    >>> trig_identity_sinusoidal_properties(np.pi/4, 'pythagorean')\n    1.0", "Freq": 0, "TSR": 0}, {"tool": "def co_function_transformations(angle_radians, original='sin'):\n    \n    if original == 'sin':\n        return np.cos(angle_radians)\n    elif original == 'cos':\n        return np.sin(angle_radians)\n    else:\n        raise ValueError(\"Invalid function for co-function transformations. Use 'sin' or 'cos'.\")", "subfield": "Trigonometric Functions", "tool_name": "co_function_transformations", "tool_type": "function", "description": "Calculate the co-function value of an angle transformation.", "docstring": "Calculate the co-function value of an angle transformation.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians for which the co-function value needs to be evaluated.\n    - original: str, default 'sin'\n        The original trigonometric function to transform. Options: 'sin' or 'cos'.\n        \n    Returns:\n    - float\n        The result of the co-function transformation.\n    Examples:\n    >>> co_function_transformations(np.pi/4, 'sin')\n    0.7071067811865476\n    >>> co_function_transformations(np.pi/4, 'cos')\n    0.7071067811865476", "Freq": 0, "TSR": 0}], "Polar Coordinates": []}