{"Base Conversion": [{"Iter": 0, "delete": [{"tool": "def add_binary(bin1, bin2):\n    \n    # Convert binary strings to integers\n    num1 = int(bin1, 2)\n    num2 = int(bin2, 2)\n    \n    # Adding two numbers\n    result = num1 + num2\n    # Convert the result back to binary\n    return bin(result)[2:]", "subfield": "Base Conversion", "tool_name": "add_binary", "tool_type": "function", "description": "Adds two binary numbers.", "docstring": "Adds two binary numbers.\n    \n    Parameters:\n    bin1 : str\n        The first binary number as a string.\n    bin2 : str\n        The second binary number as a string.\n    \n    Returns:\n    str\n        The resultant binary number after addition.\n    \n    Examples:\n    >>> add_binary('1010', '1101')\n    '11011'", "Freq": 8, "TSR": 0}, {"tool": "def base_conversion(number: str, initial_base: int, target_base: int) -> str:\n    \n    return np.base_repr(int(number, base=initial_base), base=target_base)", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Convert a number from an initial base to a target base.", "docstring": "Convert a number from an initial base to a target base.\n    Parameters\n    ----------\n    number : str\n        The number to convert as a string. It must be in the initial base.\n    initial_base : int\n        The base of the original number.\n    target_base : int\n        The desired base of the output.\n    Returns\n    -------\n    str\n        The number in the target base.\n    Example\n    -------\n    >>> base_conversion('101', 2, 10)\n    '5'", "Freq": 0, "TSR": 0}, {"tool": "def identify_base(expression: str) -> int:\n    \n    # TODO: Implementation depends on the format and style of the input expressions.", "subfield": "Base Conversion", "tool_name": "identify_base", "tool_type": "function", "description": "Identify the possible base in which a given arithmetic equation can hold true.", "docstring": "Identify the possible base in which a given arithmetic equation can hold true.\n    Parameters\n    ----------\n    expression : str\n        The arithmetic expression in notation of unknown base.\n    Returns\n    -------\n    int\n        The base in which the arithmetic equation holds true.\n    Example\n    -------\n    >>> identify_base('10 + 2 = 12')\n    3", "Freq": 0, "TSR": 0}, {"tool": "def highest_power_of_base(n, base):\n    \n    power = 1\n    while power <= n // base:\n        power *= base\n    return power", "subfield": "Base Conversion", "tool_name": "highest_power_of_base", "tool_type": "function", "description": "Finds the highest power of `base` that is less than or equal to `n`.", "docstring": "Finds the highest power of `base` that is less than or equal to `n`.\n    \n    Parameters:\n    - n (int): The number for which to find the highest power.\n    - base (int): The base.\n    \n    Returns:\n    - int: The highest power of `base` that is <= `n`.\n    \n    Examples:\n    >>> highest_power_of_index(255, 2)\n    128\n    >>> highest_power_of_index(1000, 10)\n    1000", "Freq": 7, "TSR": 0}, {"tool": "def count_trailing_zeros(number: str, base: int) -> int:\n    \n    count = Counter(number)\n    return count['0']", "subfield": "Base Conversion", "tool_name": "count_trailing_zeros", "tool_type": "function", "description": "Count the number of trailing zeros in number representation in a specified base.", "docstring": "Count the number of trailing zeros in number representation in a specified base.\n    Parameters\n    ----------\n    number : str\n        The number represented in the specified base.\n    base : int\n        The base in which the number is represented.\n    Returns\n    -------\n    int\n        The count of trailing zeros in the base representation of the number.\n    Example\n    -------\n    >>> count_trailing_zeros('1000', 2)\n    3", "Freq": 0, "TSR": 0}], "add": [{"tool": "def base_conversion(number, from_base, to_base):\n    \n    def convert_to_decimal(number, base):\n        \n        decimal = 0\n        power = 0\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        for digit in number[::-1]:\n            decimal += digits.index(digit) * (base ** power)\n            power += 1\n        \n        return decimal\n    \n    def convert_from_decimal(decimal, base):\n        \n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        \n        while decimal > 0:\n            result = digits[decimal % base] + result\n            decimal //= base\n        \n        return result if result else \"0\"\n    \n    decimal = convert_to_decimal(number, from_base)\n    converted_number = convert_from_decimal(decimal, to_base)\n    \n    return converted_number", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "docstring": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "Freq": 0, "TSR": 0}], "update": [[{"tool": "def convert_base(number, from_base, to_base):\n    \n    from math import log\n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEF\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    \n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 71, "TSR": 33}, {"tool": "def convert_base(number, from_base, to_base):\n    \n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 35.5, "TSR": 16.5}]]}, {"Iter": 1, "delete": [{"tool": "def is_palindrome(number):\n    \n    return number == number[::-1]", "subfield": "Base Conversion", "tool_name": "is_palindrome", "tool_type": "function", "description": "Check if a given string is palindromic.", "docstring": "Check if a given string is palindromic.\n    \n    Parameters:\n        number (str): The number as a string.\n        \n    Returns:\n        bool: True if `number` is a palindrome, False otherwise.\n    \n    Example:\n        >>> is_palindrome(\"101101\")\n        True\n        >>> is_palindrome(\"123321\")\n        True\n        >>> is_palindrome(\"1234\")\n        False", "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The is_palindrome() function accurately checks if a given string is palindromic by comparing the string with its reverse.\n- Experience: The is_palindrome() function is flexible and can be used with any string input.\n- Experience: The is_palindrome() function is easy to use, as it only requires a single string parameter and returns a boolean value indicating whether the string is a palindrome or not."}, {"tool": "def base_conversion(number, from_base, to_base):\n    \n    def convert_to_decimal(number, base):\n        \n        decimal = 0\n        power = 0\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        for digit in number[::-1]:\n            decimal += digits.index(digit) * (base ** power)\n            power += 1\n        \n        return decimal\n    \n    def convert_from_decimal(decimal, base):\n        \n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        \n        while decimal > 0:\n            result = digits[decimal % base] + result\n            decimal //= base\n        \n        return result if result else \"0\"\n    \n    decimal = convert_to_decimal(number, from_base)\n    converted_number = convert_from_decimal(decimal, to_base)\n    \n    return converted_number", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "docstring": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "Freq": 20, "TSR": 4}], "add": [{"tool": "def convert_base_6_to_10(number):\n    decimal = 0\n    power = 0\n    digits = \"012345\"\n    for digit in reversed(number):\n        decimal += digits.index(digit) * (6 ** power)\n        power += 1\n    return decimal", "subfield": "Base Conversion", "tool_name": "convert_base_6_to_10", "tool_type": "function", "description": "None", "docstring": null, "Freq": 0, "TSR": 0}], "update": []}, {"Iter": 2, "delete": [{"tool": "def is_palindrome(number):\n    \n    return number == number[::-1]", "subfield": "Base Conversion", "tool_name": "is_palindrome", "tool_type": "function", "description": "Check if a given string is palindromic.", "docstring": "Check if a given string is palindromic.\n    \n    Parameters:\n        number (str): The number as a string.\n        \n    Returns:\n        bool: True if `number` is a palindrome, False otherwise.\n    \n    Example:\n        >>> is_palindrome(\"101101\")\n        True\n        >>> is_palindrome(\"123321\")\n        True\n        >>> is_palindrome(\"1234\")\n        False", "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The is_palindrome() function accurately checks if a given string is palindromic by comparing the string with its reverse.\n- Experience: The is_palindrome() function is flexible and can be used with any string input.\n- Experience: The is_palindrome() function is easy to use, as it only requires a single string parameter and returns a boolean value indicating whether the string is a palindrome or not."}, {"tool": "def count_digits_in_base(n, base):\n    \n    count = 0\n    while n > 0:\n        n //= base\n        count += 1\n    return count", "subfield": "Base Conversion", "tool_name": "count_digits_in_base", "tool_type": "function", "description": "Counts the digits of `n` in the given `base`.", "docstring": "Counts the digits of `n` in the given `base`.\n    \n    Parameters:\n    - n (int): The number in decimal.\n    - base (int): The base in which to count digits.\n    \n    Returns:\n    - int: The count of digits in the specified base.\n    \n    Examples:\n    >>> count_digits_in_base(255, 16)\n    2\n    >>> count_digits_in_base(2, 2)\n    2", "Freq": 5, "TSR": 3}], "add": [{"tool": "def balanced_ternary_representation(number):\n    \n    if number == 0:\n        return \"0\"\n    result = \"\"\n    while number != 0:\n        remainder = number % 3\n        number //= 3\n        if remainder == 2:\n            result = \"-\" + result\n            number += 1\n        else:\n            result = str(remainder) + result\n    return result", "subfield": "Base Conversion", "tool_name": "balanced_ternary_representation", "tool_type": "function", "description": "Converts a decimal number to balanced ternary representation.\n    Args:\n        number (int): The decimal number to be converted.\n    Returns:\n        str: The balanced ternary representation of the number.", "docstring": "Converts a decimal number to balanced ternary representation.\n    Args:\n        number (int): The decimal number to be converted.\n    Returns:\n        str: The balanced ternary representation of the number.", "Freq": 0, "TSR": 0}], "update": [[{"tool": "def convert_base(number, from_base, to_base):\n    \n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 104.5, "TSR": 54.5}, {"tool": "def convert_base(number, from_base, to_base):\n    \n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 52.25, "TSR": 27.25}]]}, {"Iter": 3, "delete": [{"tool": "def is_palindrome(number):\n    \n    return number == number[::-1]", "subfield": "Base Conversion", "tool_name": "is_palindrome", "tool_type": "function", "description": "Check if a given string is palindromic.", "docstring": "Check if a given string is palindromic.\n    \n    Parameters:\n        number (str): The number as a string.\n        \n    Returns:\n        bool: True if `number` is a palindrome, False otherwise.\n    \n    Example:\n        >>> is_palindrome(\"101101\")\n        True\n        >>> is_palindrome(\"123321\")\n        True\n        >>> is_palindrome(\"1234\")\n        False", "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The is_palindrome() function accurately checks if a given string is palindromic by comparing the string with its reverse.\n- Experience: The is_palindrome() function is flexible and can be used with any string input.\n- Experience: The is_palindrome() function is easy to use, as it only requires a single string parameter and returns a boolean value indicating whether the string is a palindrome or not."}, {"tool": "def count_digits_in_base(n, base):\n    \n    count = 0\n    while n > 0:\n        n //= base\n        count += 1\n    return count", "subfield": "Base Conversion", "tool_name": "count_digits_in_base", "tool_type": "function", "description": "Counts the digits of `n` in the given `base`.", "docstring": "Counts the digits of `n` in the given `base`.\n    \n    Parameters:\n    - n (int): The number in decimal.\n    - base (int): The base in which to count digits.\n    \n    Returns:\n    - int: The count of digits in the specified base.\n    \n    Examples:\n    >>> count_digits_in_base(255, 16)\n    2\n    >>> count_digits_in_base(2, 2)\n    2", "Freq": 5, "TSR": 3}], "add": [{"tool": "def balanced_ternary_representation(number):\n    \n    if number == 0:\n        return \"0\"\n    result = \"\"\n    while number != 0:\n        remainder = number % 3\n        number //= 3\n        if remainder == 2:\n            result = \"-\" + result\n            number += 1\n        else:\n            result = str(remainder) + result\n    return result", "subfield": "Base Conversion", "tool_name": "balanced_ternary_representation", "tool_type": "function", "description": "Converts a decimal number to balanced ternary representation.\n    Args:\n        number (int): The decimal number to be converted.\n    Returns:\n        str: The balanced ternary representation of the number.", "docstring": "Converts a decimal number to balanced ternary representation.\n    Args:\n        number (int): The decimal number to be converted.\n    Returns:\n        str: The balanced ternary representation of the number.", "Freq": 0, "TSR": 0}], "update": [[{"tool": "def base_conversion(number, from_base, to_base):\n    \n    def convert_to_decimal(number, base):\n        \n        decimal = 0\n        power = 0\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        for digit in number[::-1]:\n            decimal += digits.index(digit) * (base ** power)\n            power += 1\n        \n        return decimal\n    \n    def convert_from_decimal(decimal, base):\n        \n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        \n        while decimal > 0:\n            result = digits[decimal % base] + result\n            decimal //= base\n        \n        return result if result else \"0\"\n    \n    decimal = convert_to_decimal(number, from_base)\n    converted_number = convert_from_decimal(decimal, to_base)\n    \n    return converted_number", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "docstring": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "Freq": 20, "TSR": 4}, {"tool": "def base_conversion(number, from_base, to_base):\n    \n    def convert_to_decimal(number, base):\n        decimal = 0\n        power = 0\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        for digit in number[::-1]:\n            decimal += digits.index(digit) * (base ** power)\n            power += 1\n        return decimal\n    def convert_from_decimal(decimal, base):\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        while decimal > 0:\n            result = digits[decimal % base] + result\n            decimal //= base\n        return result if result else \"0\"\n    try:\n        decimal = convert_to_decimal(number, from_base)\n        converted_number = convert_from_decimal(decimal, to_base)\n        return converted_number\n    except ValueError:\n        return \"Invalid input\"", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Converts a number from one base to another.\n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n    Returns:\n        str: The converted number.", "docstring": "Converts a number from one base to another.\n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n    Returns:\n        str: The converted number.", "Freq": 10.0, "TSR": 2.0}]]}, {"Iter": 4, "delete": [{"tool": "def is_palindrome(number):\n    \n    return number == number[::-1]", "subfield": "Base Conversion", "tool_name": "is_palindrome", "tool_type": "function", "description": "Check if a given string is palindromic.", "docstring": "Check if a given string is palindromic.\n    \n    Parameters:\n        number (str): The number as a string.\n        \n    Returns:\n        bool: True if `number` is a palindrome, False otherwise.\n    \n    Example:\n        >>> is_palindrome(\"101101\")\n        True\n        >>> is_palindrome(\"123321\")\n        True\n        >>> is_palindrome(\"1234\")\n        False", "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The is_palindrome() function accurately checks if a given string is palindromic by comparing the string with its reverse.\n- Experience: The is_palindrome() function is flexible and can be used with any string input.\n- Experience: The is_palindrome() function is easy to use, as it only requires a single string parameter and returns a boolean value indicating whether the string is a palindrome or not."}, {"tool": "def base_conversion(number, from_base, to_base):\n    \n    def convert_to_decimal(number, base):\n        \n        decimal = 0\n        power = 0\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        for digit in number[::-1]:\n            decimal += digits.index(digit) * (base ** power)\n            power += 1\n        \n        return decimal\n    \n    def convert_from_decimal(decimal, base):\n        \n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        result = \"\"\n        \n        while decimal > 0:\n            result = digits[decimal % base] + result\n            decimal //= base\n        \n        return result if result else \"0\"\n    \n    decimal = convert_to_decimal(number, from_base)\n    converted_number = convert_from_decimal(decimal, to_base)\n    \n    return converted_number", "subfield": "Base Conversion", "tool_name": "base_conversion", "tool_type": "function", "description": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "docstring": "Converts a number from one base to another.\n    \n    Args:\n        number (str): The number to be converted.\n        from_base (int): The base of the input number.\n        to_base (int): The base to convert the number to.\n        \n    Returns:\n        str: The converted number.", "Freq": 20, "TSR": 4}], "add": [{"tool": "def perform_arithmetic_operation(number1, number2, base):\n    \n    # Convert the numbers to decimal\n    decimal_number1 = int(number1, base)\n    decimal_number2 = int(number2, base)\n    # Perform the arithmetic operation\n    result_decimal = decimal_number1 + decimal_number2\n    # Convert the result back to the given base\n    result_base = \"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    while result_decimal > 0:\n        result_base = digits[result_decimal % base] + result_base\n        result_decimal //= base\n    \n    return result_base if result_base else \"0\"", "subfield": "Base Conversion", "tool_name": "perform_arithmetic_operation", "tool_type": "function", "description": "Performs arithmetic operations (addition, subtraction, multiplication, division) on numbers in a given base.\n    Args:\n        number1 (str): The first number in the given base.\n        number2 (str): The second number in the given base.\n        base (int): The base of the numbers.\n    Returns:\n        str: The result of the arithmetic operation in the given base.", "docstring": "Performs arithmetic operations (addition, subtraction, multiplication, division) on numbers in a given base.\n    Args:\n        number1 (str): The first number in the given base.\n        number2 (str): The second number in the given base.\n        base (int): The base of the numbers.\n    Returns:\n        str: The result of the arithmetic operation in the given base.", "Freq": 0, "TSR": 0}], "update": [[{"tool": "def convert_base(number, from_base, to_base):\n    \n    # Convert input to decimal\n    decimal = int(number, from_base)\n    \n    # Special case for decimal or to_base = 10\n    if to_base == 10:\n        return str(decimal)\n    \n    # Convert decimal to the required base\n    result = \"\"\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \n    while decimal > 0:\n        result = digits[decimal % to_base] + result\n        decimal //= to_base\n    \n    return result if result else \"0\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 104.5, "TSR": 54.5}, {"tool": "def convert_base(number, from_base, to_base):\n    \n    try:\n        # Convert input to decimal\n        decimal = int(number, from_base)\n        \n        # Special case for decimal or to_base = 10\n        if to_base == 10:\n            return str(decimal)\n        \n        # Convert decimal to the required base\n        result = \"\"\n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        \n        while decimal > 0:\n            result = digits[decimal % to_base] + result\n            decimal //= to_base\n        \n        return result if result else \"0\"\n    except ValueError:\n        return \"Invalid input\"", "subfield": "Base Conversion", "tool_name": "convert_base", "tool_type": "function", "description": "Converts a number from one base to another.", "docstring": "Converts a number from one base to another.\n    Parameters:\n    number : str\n        The number in string format (to handle bases greater than 10).\n    from_base : int\n        The base in which the number is currently written.\n    to_base : int\n        The base to which the number is to be converted.\n    \n    Returns:\n    str\n        The number represented in the target base.\n    \n    Examples:\n    >>> convert_base('1010', 2, 10)\n    '10'\n    >>> convert_base('7A', 16, 2)\n    '1111010'\n    >>> convert_base('123', 10, 8)\n    '173'", "Freq": 52.25, "TSR": 27.25}]]}]}