{"Mean and Median": [["def calculate_median(data):\n    \"\"\"\n    Computes the median value of a list of numbers.\n    Parameters:\n    - data (list of float|int): The list of numerical values for which the median is to be calculated.\n    Returns:\n    - float|int: The median of the input list. Returns None if the list is empty.\n    Examples:\n    >>> calculate_median([1, 3, 2, 5, 4])\n    3\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    >>> calculate_median([])\n    None\n    \"\"\"\n    import numpy as np\n    if not data:\n        return None\n    return float(np.median(data))", "def calculate_median(data):\n    \"\"\"\n    Calculate the median of a list or NumPy array of numbers.\n    Parameters:\n    - data (list or np.array): The data for which the median is required. Should contain numeric values.\n    Returns:\n    - float: The median of the data.\n    Examples:\n    >>> calculate_median([3, 1, 4, 1, 5, 9, 2])\n    3.0\n    >>> calculate_median(np.array([3, 1, 4]))\n    3.0\n    \"\"\"\n    return np.median(data)", "def calculate_mean_median(data):\n    \"\"\"\n    Calculate both the mean and the median of the provided numerical data.\n    Parameters:\n    -----------\n    data : array_like\n        A list, tuple, or numpy array of numbers whose mean and median are to be calculated.\n    Returns:\n    --------\n    dict\n        A dictionary containing the 'mean' and 'median' of the provided data.\n    Example:\n    --------\n    >>> calculate_mean_median([1, 2, 3, 4, 5])\n    {'mean': 3.0, 'median': 3.0}\n    >>> calculate_mean_median([3, 5, 1, 2, 4])\n    {'mean': 3.0, 'median': 3.0}\n    \"\"\"\n    data = np.array(data)  # Convert the input to a numpy array to utilize numpy's functions\n    mean = np.mean(data)\n    median = np.median(data)\n    return {'mean': mean, 'median': median}"], ["def calculate_mean(data):\n    \"\"\"\n    Computes the mean (average) value of a list of numbers.\n    Parameters:\n    - data (list of float|int): The list of numerical values for which the mean is to be calculated.\n    Returns:\n    - float: The mean of the input list. Returns None if the list is empty.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30])\n    20.0\n    >>> calculate_mean([])\n    None\n    \"\"\"\n    import numpy as np\n    if not data:\n        return None\n    return np.mean(data)", "def calculate_mean(data):\n    \"\"\"\n    Calculate the mean (average) of a given list of numerical data.\n    Parameters:\n    data (list of float|int): A list containing the numerical data.\n    Returns:\n    float: The mean of the data.\n    Examples:\n    >>> calculate_mean([10, 20, 30, 40])\n    25.0\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    \"\"\"\n    if not data:  # safety check if the provided list is empty\n        return 0\n    import numpy as np  # efficient mean calculation\n    return np.mean(data)", "def calculate_mean(data):\n    \"\"\"\n    Calculate the mean of a list or NumPy array of numbers.\n    Parameters:\n    - data (list or np.array): The data for which the mean is required. Should contain numeric values.\n    Returns:\n    - float: The mean of the data.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean(np.array([1, 2, 3, 4, 5, 6]))\n    3.5\n    \"\"\"\n    return np.mean(data)", "def calculate_mean(data):\n    \"\"\"\n    Calculate the mean (average) of a dataset.\n    Parameters:\n    - data (list or np.array): Array-like object containing numerical data.\n    Returns:\n    - float: The mean of the dataset.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30, 40])\n    25.0\n    \"\"\"\n    return np.mean(data)", "def calculate_mean(data):\n    \"\"\"\n    Calculate the mean (average) of a dataset.\n    Parameters:\n    - data (list of float/int): A list of numbers for which the mean is to be computed.\n    Returns:\n    - float: The mean of the dataset.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30])\n    20.0\n    \"\"\"\n    if not data:\n        return None  # Handle empty data by returning None or consider raising an error\n    \n    import numpy as np\n    return np.mean(data)"], ["def calculate_median(data):\n    \"\"\"\n    Calculate the median of a given list of numerical data. The list is first sorted\n    and the middle value is returned. If the list has an even number of elements, the\n    median is the average of the two middle numbers.\n    Parameters:\n    data (list of float|int): A list containing the numerical data.\n    Returns:\n    float: The median of the data.\n    Examples:\n    >>> calculate_median([10, 20, 30, 40])\n    25.0\n    >>> calculate_median([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_median([3, 1, 2])\n    2.0\n    \"\"\"\n    if not data:  # check if the data is empty\n        return 0\n    sorted_data = sorted(data)  # sort data\n    n = len(sorted_data)\n    \n    if n % 2 == 1:\n        # odd number of items\n        return sorted_data[n // 2]\n    else:\n        # even number of items\n        mid_index = n // 2\n        return (sorted_data[mid_index - 1] + sorted_data[mid_index]) / 2", "def calculate_median(data):\n    \"\"\"\n    Calculate the median of a dataset. If the dataset has an odd number of elements,\n    return the middle element. If the dataset has an even number of elements,\n    return the average of the two middle elements after sorting the data.\n    Parameters:\n    - data (list or np.array): Array-like object containing numerical data.\n    Returns:\n    - float: The median of the dataset.\n    Examples:\n    >>> calculate_median([1, 3, 5])\n    3\n    >>> calculate_median([1, 2, 3, 4])\n    2.5\n    \"\"\"\n    data_sorted = np.sort(data)\n    n = len(data_sorted)\n    mid_index = n // 2\n    \n    if n % 2 == 0:\n        return (data_sorted[mid_index - 1] + data_sorted[mid_index]) / 2.0\n    else:\n        return data_sorted[mid_index]", "def calculate_median(data, is_sorted=False):\n    \"\"\"\n    Calculate the median of a dataset. If the number of data points is odd, the median is the middle element.\n    If even, the median is the average of the two middle elements.\n    Parameters:\n    - data (list of float/int): A list of numbers from which to find the median.\n    - is_sorted (bool): Flag to indicate if the data is already sorted. Default is False.\n    Returns:\n    - float: The median of the dataset.\n    Examples:\n    >>> calculate_median([3, 1, 2])\n    2\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    >>> calculate_median([1, 3, 2, 4], is_sorted=True)\n    2.5\n    \"\"\"\n    if not data:\n        return None  # Handle empty data by returning None or consider raising an error\n    if not is_sorted:\n        data = sorted(data)\n    \n    n = len(data)\n    mid = n // 2\n    if n % 2 == 1:\n        return data[mid]\n    else:\n        # Ensure using float division\n        return (data[mid - 1] + data[mid]) / 2.0"]], "Mean": [["def calculate_mean(data):\n    \"\"\"\n    Calculate the arithmetic mean of a given list of numbers.\n    \n    Parameters:\n        data (list of numbers): The dataset to calculate the mean for.\n    \n    Returns:\n        float: The calculated mean of the dataset.\n    \n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([2.5, 3.5, 4.5])\n    3.5\n    \"\"\"\n    return np.mean(data)", "def calculate_mean(data):\n    \"\"\"\n    Calculate the arithmetic mean (average) of a data set.\n    Parameters:\n    - data (list or numpy.array): A list or numpy array of numbers (integers or floats).\n    Returns:\n    - float: The arithmetic mean of the data set.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4, 5])\n    3.0\n    >>> calculate_mean([10, 20, 30])\n    20.0\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list is empty, mean cannot be calculated.\")\n    return np.mean(data)", "def calculate_mean(data):\n    \"\"\"\n    Calculate the mean (average) of a dataset.\n    \n    Parameters:\n        data (list or numpy array): The dataset as a list or numpy array of numbers.\n    \n    Returns:\n        float: The mean of the dataset.\n    \n    Examples:\n        >>> calculate_mean([1, 2, 3, 4, 5])\n        3.0\n        >>> calculate_mean(np.array([1, 2, 3, 4, 5, 6]))\n        3.5\n    \"\"\"\n    return np.mean(data)", "def calculate_mean(data: List[float]) -> float:\n    \"\"\"\n    Calculate the arithmetic mean of a list of numbers.\n    Parameters:\n        data (List[float]): A list of numeric values.\n    Returns:\n        float: The mean of the data.\n    Example:\n        >>> calculate_mean([1, 2, 3, 4, 5])\n        3.0\n    \"\"\"\n    return np.mean(data)", "def calculate_mean(numbers):\n    \"\"\"\n    Calculate the arithmetic mean of a list of numbers.\n    Parameters:\n    - numbers (list of float|int): List of numbers to calculate mean.\n  \n    Returns:\n    - float: The mean of the list of numbers.\n    Examples:\n    >>> calculate_mean([1, 2, 3, 4])\n    2.5\n    >>> calculate_mean([10, 20, 30])\n    20.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list of numbers cannot be empty\")\n    \n    return np.mean(numbers)"], ["def calculate_mode(data):\n    \"\"\"\n    Calculate the mode(s) of a dataset. This can return more than one value if the dataset is multimodal.\n    \n    Parameters:\n        data (list of numbers): The dataset to find the mode(s).\n    \n    Returns:\n        list: List containing the most frequent element(s).\n    \n    Examples:\n    >>> calculate_mode([1, 1, 2, 3, 4])\n    [1]\n    >>> calculate_mode([1, 2, 2, 3, 3])\n    [2, 3]\n    \"\"\"\n    mode_result = stats.mode(data)\n    return mode_result.mode.tolist() if mode_result.count[0] > 1 else []", "def calculate_mode(data):\n    \"\"\"\n    Calculate the mode of a dataset, which is the value(s) that appears most frequently.\n    \n    Parameters:\n        data (list or numpy array): The dataset.\n    \n    Returns:\n        list: The list of modes of the dataset.\n    \n    Examples:\n        >>> calculate_mode([1, 2, 2, 3, 4])\n        [2]\n        >>> calculate_mode([1, 1, 2, 3, 3])\n        [1, 3]\n    \"\"\"\n    mode_result = stats.mode(data)\n    return mode_result.mode.tolist()", "def calculate_mode(data: List[Any]) -> Tuple:\n    \"\"\"\n    Calculate the mode(s) of a list. The mode is the number(s) that appears most frequently.\n    Parameters:\n        data (List[Any]): A list of values (can be non-numeric).\n    Returns:\n        Tuple: A tuple containing the most frequent elements and their frequency.\n    Example:\n        >>> calculate_mode([1, 2, 2, 3, 3])\n        ([2, 3], 2)\n    \"\"\"\n    mode_data = stats.mode(data)\n    return (list(mode_data.mode), mode_data.count[0])"], ["def calculate_median(data):\n    \"\"\"\n    Calculate the median of a dataset.\n    \n    Parameters:\n        data (list of numbers): The dataset to find the median.\n    \n    Returns:\n        float: The median of the dataset.\n    Examples:\n    >>> calculate_median([1, 3, 5])\n    3\n    >>> calculate_median([1, 2, 3, 4])\n    2.5\n    \"\"\"\n    data_sorted = sorted(data)\n    n = len(data_sorted)\n    mid = n // 2\n    if n % 2 == 0:\n        return (data_sorted[mid - 1] + data_sorted[mid]) / 2.0\n    else:\n        return data_sorted[mid]", "def calculate_median(data):\n    \"\"\"\n    Calculate the median of a sorted or unsorted list of numbers.\n    Parameters:\n    - data (list of numbers): A list of numbers, can be integers or floats, unsorted or sorted.\n    Returns:\n    - float or int: The median value of the dataset. Returns float if the dataset's length is even.\n    Examples:\n    >>> calculate_median([1, 3, 5, 7])\n    4.0  # median is average of two middle elements in sorted list\n    >>> calculate_median([3, 1, 4, 1, 5, 9])\n    3.5\n    \"\"\"\n    if not data:\n        raise ValueError(\"Data list is empty, median cannot be calculated.\")\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    middle = n // 2\n    if n % 2 == 0:\n        return (sorted_data[middle - 1] + sorted_data[middle]) / 2.0\n    else:\n        return sorted_data[middle]", "def calculate_median(data):\n    \"\"\"\n    Calculate the median of a dataset, which is the middle value of a sorted list of numbers.\n    \n    Parameters:\n        data (list or numpy array): The dataset.\n    \n    Returns:\n        float: The median of the dataset.\n    \n    Examples:\n        >>> calculate_median([3, 1, 2, 5, 4])\n        3.0\n        >>> calculate_median([1, 3, 2])\n        2.0\n    \"\"\"\n    return np.median(data)", "def calculate_median(data: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers. The median is the middle value in a sorted list of numbers.\n    Parameters:\n        data (List[float]): A list of numeric values.\n    Returns:\n        float: The median of the data.\n    Example:\n        >>> calculate_median([3, 1, 4, 2])\n        2.5\n    \"\"\"\n    return np.median(data)"], ["def parse_stem_and_leaf(data: Tuple[List[int], List[List[int]]]) -> List[float]:\n    \"\"\"\n    Interpret a stem-and-leaf plot represented by a tuple where the first element is a list of stems\n    and the second element is a list of lists, each containing leaves for the corresponding stem.\n    Parameters:\n        data (Tuple[List[int], List[List[int]]]): Stem and leaf data.\n    Returns:\n        List[float]: A list of all values contained in the stem-and-leaf plot.\n    Example:\n        >>> parse_stem_and_leaf(([1, 2], [[1, 2, 3], [1, 0, 0]]))\n        [11, 12, 13, 21, 20, 20]\n    \"\"\"\n    stems, leaves = data\n    full_numbers = []\n    for stem, leaf_set in zip(stems, leaves):\n        for leaf in leaf_set:\n            full_numbers.append(stem * 10 + leaf)\n    return full_numbers"], ["def manipulate_and_compute_mean(numbers, adjustment=0):\n    \"\"\"\n    Adjust each number by a constant value and compute the mean of the modified dataset.\n    Parameters:\n    - numbers (list of float|int): List of original numbers.\n    - adjustment (float|int, optional): Constant value to add to each element of the list. Defaults to 0.\n  \n    Returns:\n    - float: The mean of the adjusted list of numbers.\n    Examples:\n    >>> manipulate_and_compute({1, 2, 3, 4}, adjustment=1)\n    3.5\n    >>> manipulate_and_compute({10, 20, 30}, adjustment=-5)\n    15.0\n    \"\"\"\n    adjusted_numbers = [x + adjustment for x in numbers]\n    \n    return calculate_mean(adjusted_numbers)"], ["def calculate_difference(x, y):\n    \"\"\"\n    Compute the difference between two values.\n    \n    Parameters:\n        x (float or int): The first value.\n        y (float or int): The second value.\n    \n    Returns:\n        float: The difference between x and y.\n    \n    Examples:\n        >>> calculate_difference(10, 5)\n        5\n        >>> calculate_difference(3, 7)\n        -4\n    \"\"\"\n    return x - y"], ["def calculate_mean_rounded(data, precision=0):\n    \"\"\"\n    Calculate the arithmetic mean (average) of a data set and round it to the nearest given precision.\n    Parameters:\n    - data (list of numbers): A list or numpy array of numbers (integers or floats).\n    - precision (int): The number of decimal places to round the mean to.\n    Returns:\n    - float or int: The rounded mean of the data set.\n    Examples:\n    >>> calculate_mean_rounded([1, 2, 3, 4, 5])\n    3\n    >>> calculate_mean_rounded([1, 2, 3, 4, 5], precision=1)\n    3.0\n    >>> calculate_mean_rounded([1.123, 2.234, 3.345], precision=2)\n    2.23\n    \"\"\"\n    mean_value = np.mean(data)\n    return round(mean_value, precision)"], ["def calculate_mean(data=None, total_sum=None, count=None):\n    \"\"\"\n    Calculate the arithmetic mean (average) of a set of numbers provided either directly as a list or via total sum and count of elements.\n    Parameters:\n    - data (list of float|int, optional): List of numbers whose mean is to be calculated. Default is None.\n    - total_sum (float|int, optional): The total sum of all elements in the dataset. Must be specified if `data` is None. Default is None.\n    - count (int, optional): The total number of elements in the dataset. Must be specified if `data` is None. Default is None.\n    Returns:\n    - float: The mean of the given dataset.\n    Raises:\n    - ValueError: If insufficient parameters are provided or if count is zero when attempting division.\n    Examples:\n    >>> calculate_mean(data=[10, 20, 30])\n    20.0\n    >>> calculate_mean(total_sum=60, count=3)\n    20.0\n    >>> calculate_mean(data=[10, 20, 30, 40])\n    25.0\n    \"\"\"\n    if data is not None:\n        if not data:  # Edge case check if empty list\n            raise ValueError(\"Empty data list provided.\")\n        total_sum = sum(data)\n        count = len(data)\n    elif total_sum is None or count is None:\n        raise ValueError(\"Insufficient parameters provided. Need either `data` or both `total_sum` and `count`.\")\n    \n    if count == 0:\n        raise ValueError(\"Count of elements is zero, division by zero encountered.\")\n        \n    mean = total_sum / count\n    return mean"], ["def calculate_difference(value1, value2):\n    \"\"\"\n    Calculate the difference between two values.\n    \n    Parameters:\n        value1 (number): The first value.\n        value2 (number): The second value.\n    \n    Returns:\n        number: The difference between the two values.\n    Examples:\n    >>> calculate_difference(5, 3)\n    2\n    >>> calculate_difference(2.5, 5.1)\n    -2.6\n    \"\"\"\n    return value1 - value2"]], "Median": [["def calculate_median(data):\n    \"\"\"\n    Calculate the median of a given numerical dataset.\n    Parameters:\n    data (list of int/float): A list of numbers from which the median will be calculated.\n    Returns:\n    float: The median of the dataset.\n    Examples:\n    >>> calculate_median([5, 1, 9, 3, 7])\n    5\n    >>> calculate_median([3, 5, 1, 2])\n    2.5\n    >>> calculate_median([1.5, 2.5, 3.5])\n    2.5\n    \"\"\"\n    import numpy as np\n    \n    # Ensure the data is a list or convert it to a list if it's a numpy array\n    if not isinstance(data, list):\n        if isinstance(data, np.ndarray):\n            data = data.tolist()\n        else:\n            raise ValueError(\"Input data must be a list or numpy array.\")\n    \n    # Sort the list\n    data_sorted = sorted(data)\n    \n    # Compute median\n    n = len(data_sorted)\n    mid = n // 2\n    \n    if n % 2 == 0:  # even number of elements\n        # Median is the average of the two middle numbers\n        return (data_sorted[mid - 1] + data_sorted[mid]) / 2\n    else:  # odd number of elements\n        # Median is the middle number\n        return data_sorted[mid]", "def find_median(data_list):\n    \"\"\"\n    Calculate the median of a given list of numbers.\n    Parameters\n    ----------\n    data_list : list or array-like\n        The input data list from which the median is to be calculated. The elements\n        must be numeric types compatible with Python's sorting mechanisms.\n    Returns\n    -------\n    float or int\n        The median of the list. If the list has an odd number of elements,\n        the middle element is returned. If the list has an even number of elements,\n        the average of the two middle elements is returned.\n    Examples\n    --------\n    >>> find_median([1, 3, 5])\n    3\n    >>> find_median([1, 2, 3, 4])\n    2.5\n    >>> find_median([4, 1, 3, 2])\n    2.5\n    \"\"\"\n    import numpy as np\n    # Ensure data list is not empty\n    if not data_list:\n        raise ValueError(\"The input data list is empty. A non-empty list is required.\")\n    \n    # Sort the list to ascertain order\n    data_list = sorted(data_list)\n    \n    # Calculate index of median\n    n = len(data_list)\n    midpoint = n // 2\n    \n    # If even, return the average of the two middle numbers\n    if n % 2 == 0:\n        return (data_list[midpoint - 1] + data_list[midpoint]) / 2.0\n    # If odd, return the middle element\n    else:\n        return data_list[midpoint]", "def calculate_median(data):\n    \"\"\"\n    Calculate the median of a dataset.\n    \n    The median is the value separating the higher half from the lower half of a data sample.\n    For a dataset containing an odd number of observations, it is the middle number.\n    For a dataset with an even number of observations, it is the average of the two middle numbers.\n    \n    Parameters:\n    data (list of float or int): A list containing the dataset.\n    \n    Returns:\n    float: The median of the dataset.\n    \n    Examples:\n    >>> calculate_median([1, 3, 2])\n    2\n    >>> calculate_median([1, 3, 2, 4])\n    2.5\n    \"\"\"\n    import numpy as np\n    \n    if not data:\n        raise ValueError(\"The data list is empty. Median cannot be calculated.\")\n    \n    data_sorted = sorted(data)\n    n = len(data_sorted)\n    mid_index = n // 2\n    \n    if n % 2 == 1:\n        # If the number of data points is odd, return the middle number\n        return data_sorted[mid_index]\n    else:\n        # If the number of data points is even, return the average of the middle two numbers\n        return (data_sorted[mid_index - 1] + data_sorted[mid_index]) / 2.0"]]}