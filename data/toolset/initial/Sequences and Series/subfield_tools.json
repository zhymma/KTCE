{"Infinite Series": [["def generate_arithmetic_sequence(a, d, n):\n    \"\"\"\n    Generates the first n terms of an arithmetic sequence.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the sequence.\n        d (int/float/sympy.Symbol): The common difference of the sequence.\n        n (int): The number of terms to generate.\n    Returns:\n        list: A list containing the first n terms of the arithmetic sequence.\n    Examples:\n        >>> generate_arithmetic_sequence(1, 2, 5)\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [a + i * d for i in range(n)]", "def generate_geometric_sequence(a, r, n):\n    \"\"\"\n    Generates the first n terms of a geometric sequence.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the sequence.\n        r (int/float/sympy.Symbol): The common ratio of the sequence.\n        n (int): The number of terms to generate.\n    Returns:\n        list: A list containing the first n terms of the geometric sequence.\n    Examples:\n        >>> generate_geometric_sequence(1, 2, 5)\n        [1, 2, 4, 8, 16]\n    \"\"\"\n    return [a * r**i for i in range(n)]"], ["def geometric_series_sum(a, r, n=None):\n    \"\"\"\n    Calculate the sum of a geometric series. Can handle both finite and infinite series.\n    \n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series.\n    n (int, optional): The number of terms in the series. If not provided, assumes infinite series.\n    \n    Returns:\n    float or sympy expression: Sum of the series, or symbolic expression if infinite and convergent.\n    \n    Examples:\n    >>> geometric_series_sum(1, 0.5)  # Infinite series\n    2.0\n    >>> geometric_series_sum(1, 0.5, 3)  # Sum of first 3 terms\n    1.75\n    \"\"\"\n    if n is None:  # Infinite series case\n        if abs(r) < 1:\n            return a / (1 - r)\n        else:\n            return sp.oo  # Symbolic infinity\n    else:  # Finite series case\n        return a * (1 - r**n) / (1 - r)", "def infinite_geometric_series_sum(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series given the first term and the ratio.\n    Parameters:\n        a (float/int): The first term of the geometric series.\n        r (float): The common ratio of the series. Must satisfy |r| < 1 for convergence.\n    Returns:\n        float: The sum of the infinite geometric series.\n    Raises:\n        ValueError: If |r| >= 1, as the series does not converge.\n    Examples:\n        >>> infinite_geometric_series_sum(1, 0.5)\n        2.0\n        >>> infinite_geometric_series_sum(2, -0.5)\n        1.3333333333333333\n    \"\"\"\n    import math\n    if abs(r) >= 1:\n        raise ValueError(\"The common ratio r must satisfy |r| < 1 for the series to converge.\")\n    return a / (1 - r)", "def geometric_series_partial_sum(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n        a (float/int): The first term of the series.\n        r (float): The common ratio of the geometric series.\n        n (int): The number of terms to sum.\n    Returns:\n        float: The sum of the first n terms of the geometric series.\n    Examples:\n        >>> geometric_series_partial_sum(1, 0.5, 4)\n        1.875\n        >>> geometric_series_partial_sum(3, 3, 5)\n        363.0\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r ** n) / (1 - r)", "def infinite_geometric_series_sum(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series given the first term and the common ratio.\n    \n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series. Must satisfy |r| < 1 for convergence.\n    \n    Returns:\n    float: The sum of the infinite geometric series if the series converges; otherwise, raises a ValueError.\n    \n    Examples:\n    >>> infinite_geometric_series_sum(1, 0.5)\n    2.0\n    >>> infinite_geometric_series_sum(2, -0.5)\n    1.3333333333333333\n    \"\"\"\n    import numpy as np\n    if np.abs(r) >= 1:\n        raise ValueError(\"The series does not converge because |r| >= 1.\")\n    return a / (1 - r)", "def finite_geometric_series_sum(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    \n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series.\n    n (int): The number of terms to sum.\n    \n    Returns:\n    float: The sum of the first n terms of the geometric series.\n    \n    Examples:\n    >>> finite_geometric_series_sum(1, 0.5, 3)\n    1.75\n    >>> finite_geometric_series_sum(2, 3, 5)\n    242.0\n    \"\"\"\n    if n == 0:\n        return 0\n    elif r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)", "def sum_geometric_series(a, r, n):\n    \"\"\"\n    Calculates the sum of the first n terms of a geometric series.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the series.\n        r (int/float/sympy.Symbol): The common ratio of the series.\n        n (int): The number of terms to sum.\n    Returns:\n        sympy.Symbol/int/float: The sum of the first n terms of the geometric series, assuming r!=1.\n    Examples:\n        >>> sum_geometric_series(1, 2, 5)\n        31\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r**n) / (1 - r)"], ["def sum_arithmetic_series(a, d, n):\n    \"\"\"\n    Calculates the sum of the first n terms of an arithmetic series.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the series.\n        d (int/float/sympy.Symbol): The common difference of the series.\n        n (int): The number of terms to sum.\n    Returns:\n        sympy.Symbol/int/float: The sum of the first n terms of the arithmetic series.\n    Examples:\n        >>> sum_arithmetic_series(1, 2, 5)\n        25\n    \"\"\"\n    return n / 2 * (2 * a + (n - 1) * d)"], ["def recursive_sequence_generator(ini_terms, recursion_formula, n):\n    \"\"\"\n    Generates terms of a recursive sequence based on the provided recursion formula and initial terms.\n    \n    Parameters:\n        ini_terms (list): The initial terms of the sequence.\n        recursion_formula (function): A function that defines the recursion. It takes the sequence and index as arguments.\n        n (int): Total terms of the sequence to generate inclusive of provided initial terms.\n    Returns:\n        list: A list containing the terms of the sequence.\n    Examples:\n        >>> fib = lambda seq, i: seq[i-1] + seq[i-2]\n        >>> recursive_sequence_generator([0, 1], fib, 10)\n        [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    sequence = ini_terms[:]\n    while len(sequence) < n:\n        next_term = recursion_formula(sequence, len(sequence))\n        sequence.append(next seq = lambda seq, i: seq[i-1] + seq[i-2]\n    return sequence"], ["def generate_sequence(kind, initial_terms, common_diff=None, common_ratio=None, recursive_rule=None, n_terms=10):\n    \"\"\"\n    Generates sequences of various kinds including arithmetic, geometric, recursive, and custom types.\n    \n    Parameters:\n    - kind (str): Type of sequence ('arithmetic', 'geometric', 'recursive').\n    - initial_terms (list of numeric): Initial terms of the sequence. Length should fit the recursive rule if applied.\n    - common_diff (numeric, optional): Common difference for arithmetic sequences.\n    - common_ratio (numeric, optional): Common ratio for geometric sequences.\n    - recursive_rule (function, optional): A function that defines the next term based on previous terms for recursive sequences.\n    - n_terms (int, optional): Number of terms to generate.\n    \n    Returns:\n    - list: List containing the first `n_terms` of the sequence.\n    \"\"\"\n    import numpy as np\n    \n    if kind == 'arithmetic':\n        return [initial_terms[0] + i * common_diff for i in range(n_terms)]\n    elif kind == 'geometric':\n        return [initial_terms[0] * (common_ratio ** i) for i in range(n_terms)]\n    elif kind == 'recursive':\n        terms = initial_terms[:]\n        while len(terms) < n_terms:\n            next_term = recursive_rule(terms)\n            terms.append(next_term)\n        return terms\n    else:\n        raise ValueError(\"Unsupported sequence type\")", "class SequenceGenerator:\n    \"\"\"\n    A class providing functionalities to generate and manipulate arithmetic, geometric, Fibonacci and general recursive sequences.\n    Attributes:\n        initial_term (float/int): The first term of the sequence.\n        common_difference_ratio (float/int): The common difference or ratio for arithmetic or geometric sequences.\n        recursive_relation (callable): A function defining the recursive relation for generating terms in a recursive sequence. It should accept the sequence object itself and the index of the term to generate.\n        sequence_type (str): The type of sequence ('arithmetic', 'geometric', 'fibonacci', 'recursive').\n    \"\"\"\n    \n    def __init__(self, initial_term, common_difference_ratio, recursive_relation=None, sequence_type='arithmetic'):\n        self.initial_term = initial_term\n        self.common_difference_ratio = common_difference_ratio\n        self.recursive_relation = recursive_relation\n        self.sequence_type = sequence_type\n        self.terms = {1: initial_term}\n    \n    def nth_term(self, n):\n        \"\"\"\n        Calculates the nth term of the sequence.\n        \n        Parameters:\n            n (int): The term index to calculate.\n        \n        Returns:\n            float/int: The nth term of the sequence.\n        \n        Examples:\n            >>> seq_arithmetic = SequenceGenerator(1, 3, sequence_type='arithmetic')\n            >>> seq_arithmetic.nth_term(10)\n            28\n            >>> seq_geometric = SequenceGenerator(2, 3, sequence_type='geometric')\n            >>> seq_geometric.nth_term(5)\n            162\n        \"\"\"\n        if n in self.terms:\n            return self.terms[n]\n        \n        if self.sequence_type == 'arithmetic':\n            term = self.initial_term + (n - 1) * self.common_difference_ratio\n        elif self.sequence_type == 'geometric':\n            term = self.initial_term * (self.common_difference_ratio ** (n - 1))\n        elif self.sequence_type == 'fibonacci' and n > 2:\n            if n - 1 not in self.terms:\n                self.terms[n - 1] = self.nth_term(n - 1)\n            if n - 2 not in self.terms:\n                self.terms[n - 2] = self.nth_term(n - 2)\n            term = self.terms[n - 1] + self.terms[n - 2]\n        elif self.sequence_type == 'recursive' and self.recursive_relation is not None:\n            term = self.recursive_relation(self, n)\n        else:\n            raise ValueError(\"Unsupported sequence type or insufficient parameters for generation.\")\n        \n        self.terms[n] = term\n        return term\n    \n    def sum_of_terms(self, n):\n        \"\"\"\n        Sums the first n terms of the sequence.\n        \n        Parameters:\n            n (int): Number of terms to sum.\n        \n        Returns:\n            float/int: The sum of the first n terms.\n        \n        Examples:\n            >>> seq_arithmetic = SequenceGenerator(1, 3, sequence_type='arithmetic')\n            >>> seq_arithmetic.sum_of_terms(10)\n            145\n            >>> seq_geometric = SequenceGenerator(2, 3, sequence_type='geometric')\n            >>> seq_geometric.sum_of_terms(5)\n            242\n        \"\"\"\n        if self.sequence_type == 'arithmetic':\n            last_term = self.nth_term(n)\n            sum_terms = n * (self.initial_term + last_term) / 2\n        elif self.sequence_type == 'geometric':\n            sum_terms = self.initial_term * (1 - self.common_difference_ratio ** n) / (1 - self.common_difference_ratio)\n        elif self.sequence_type in ['fibonacci', 'recursive']:\n            sum_terms = sum(self.nth_term(k) for k in range(1, n + 1))\n        else:\n            raise ValueError(\"Unsupported sequence type for summing.\")\n        \n        return sum_terms"], ["def telescoping_series_sum(elements, n):\n    \"\"\"\n    Calculate the sum of a telescoping series given its element function and the number of terms.\n    \n    Parameters:\n    elements (callable): A function representing the n-th term difference.\n    n (int): The number of terms to sum.\n    \n    Returns:\n    float: Calculated sum of the telescoping series.\n    \n    Examples:\n    >>> from sympy import symbols\n    >>> k = symbols('k')\n    >>> f = lambda k: 1/(k+1) - 1/(k+2)  # Example of 1/(k+1) - 1/(k+2)\n    >>> telescoping_series_sum(f, 100)\n    0.99\n    \"\"\"\n    sum_series = 0\n    for i in range(n):\n        sum_series += elements(i)\n    return sum_series"], ["def calculate_sequence_values(sequence, n_th=None, sum_indices=None):\n    \"\"\"\n    Calculates specific values from a sequence, such as the nth term or the sum of terms at specific indices.\n    Parameters:\n    - sequence (list of numeric): The sequence from which to calculate values.\n    - n_th (int, optional): The nth term to retrieve from the sequence (1-based index).\n    - sum_indices (list of int, optional): Indices to sum over (1-based indices).\n    Returns:\n    - numeric or list: Returns the nth term if `n_th` is specified, the sum of specific terms if `sum_indices` is specified,\n      or the entire sequence if neither is specified.\n    \"\"\"\n    if n_th is not None:\n        return sequence[n_th - 1]\n    if sum_indices is not None:\n        return sum([sequence[i - 1] for i in sum_indices])\n    return sequence"], ["def evaluate_telescoping_series(terms):\n    \"\"\"\n    Simplify and evaluate a telescoping series, assuming the terms cancel each other effectively.\n    Parameters:\n        terms (list): A list of tuples. Each tuple contains (start_term, end_term) configurations.\n    Returns:\n        float: The final simplified sum of the series.\n    Examples:\n        >>> evaluate_telescoping_series([(1/2, 1/3), (1/3, 1/4), (1/4, 1/5)])\n        0.5 - 1/5\n    \"\"\"\n    sum_result = 0\n    for start, end in terms:\n        sum_result += start - end\n    return sum_result"], ["def solve_for_first_term(target_sum, r, n=None):\n    \"\"\"\n    Solve for the first term 'a' of a geometric series given the common ratio and the target sum.\n    \n    Parameters:\n    target_sum (float): The sum of the series for which 'a' must be computed.\n    r (float): The common ratio.\n    n (int, optional): The number of terms for finite series. If not provided, assumes infinite series.\n    \n    Returns:\n    float or None: The calculated first term if a solution exists, otherwise None.\n    \n    Examples:\n    >>> solve_for_first_term(2, 0.5)  # Infinite series\n    1.0\n    >>> solve_for_first_term(1.75, 0.5, 3)  # Finite series\n    1.0\n    \"\"\"\n    if n is None:  # Infinite series\n        if abs(r) < 1:\n            return target_sum * (1 - r)\n        else:\n            return None\n    else:  # Finite Series\n        return target_sum * (1 - r) / (1 - r**n)"]], "Geometric Sequences": [["def find_common_ratio(term1, term2, position1, position2):\n    \"\"\"\n    Calculates the common ratio of a geometric sequence given two terms and their positions.\n    \n    Parameters:\n    - term1: float or int, the value of one term in the sequence.\n    - term2: float or int, the value of another term in the sequence.\n    - position1: int, the position (1-based index) of term1 in the sequence.\n    - position2: int, the position (1-based index) of term2 in the sequence.\n    Returns:\n    - float, the common ratio of the sequence.\n    Example:\n    >>> find_common_ratio(3, 24, 1, 4)\n    2.0\n    \"\"\"\n    # Ensure position1 < position2 for a proper calculation\n    if position1 > position2:\n        term1, term2 = term2, term1\n        position1, position2 = position2, position1\n    \n    return (term2 / term1) ** (1 / (position2 - position1))", "def common_ratio(term1, term2, n1, n2):\n    \"\"\"\n    Compute the common ratio of a geometric sequence given two terms and their indices.\n    \n    Parameters\n    ----------\n    term1 : float\n        The value of the term at index n1.\n    term2 : float\n        The value of the term at index n2.\n    n1 : int\n        The index of term1 in the sequence (1-indexed).\n    n2 : int\n        The index of term2 in the sequence (1-indexed).\n    \n    Returns\n    -------\n    float\n        The common ratio of the sequence.\n    \n    Examples\n    --------\n    >>> common_ratio(3, 24, 1, 3)\n    2.0\n    \"\"\"\n    import math\n    return (term2 / term1) ** (1 / (n2 - n1))", "def common_ratio_from_terms(a_i, a_j, i, j):\n    \"\"\"\n    Calculate the common ratio of a geometric sequence given two terms and their indices.\n    \n    Parameters:\n    a_i (int or float): The term at index i of the sequence.\n    a_j (int or float): The term at index j of the sequence.\n    i (int): The index (1-based) of term a_i.\n    j (int): The index (1-based) of term a_j.\n    \n    Returns:\n    float: The common ratio of the geometric sequence.\n    \n    Examples:\n    >>> common_ratio_from_terms(3, 24, 1, 3)\n    2.0\n    >>> common_ratio_from_terms(10, 2.5, 2, 4)\n    0.5\n    \n    Raises:\n    ValueError: If i or j is not positive, or if i equals j.\n    \"\"\"\n    if i <= 0 or j <= 0:\n        raise ValueError(\"Indices i and j must be positive integers.\")\n    if i == j:\n        raise ValueError(\"Indices i and j must be different to compute the ratio.\")\n        \n    return (a_j / a_i) ** (1 / (j - i))"], ["def geometric_term(a, r, n):\n    \"\"\"\n    Calculates the nth term of a geometric sequence.\n    \n    Parameters:\n    - a: float or int, the first term of the geometric sequence.\n    - r: float or int, the common ratio of the sequence.\n    - n: int, the position of the term to calculate (1-based index).\n    \n    Returns:\n    - float or int, the nth term of the sequence.\n    Example:\n    >>> geometric_term(3, 2, 4)\n    24\n    \"\"\"\n    return a * (r ** (n - 1))", "def geometric_nth_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Parameters\n    ----------\n    a : float\n        The first term of the geometric sequence.\n    r : float\n        The common ratio of the sequence.\n    n : int\n        The term number to calculate (1-indexed).\n    \n    Returns\n    -------\n    float\n        The nth term of the sequence.\n    \n    Examples\n    --------\n    >>> geometric_nth_term(2, 3, 4)\n    54.0\n    \"\"\"\n    return a * (r ** (n - 1))", "def nth_term_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Parameters:\n    a (int or float): The first term of the geometric sequence.\n    r (int or float): The common ratio of the sequence.\n    n (int): The term index (1-based) to be calculated.\n        \n    Returns:\n    int or float: The nth term of the geometric sequence.\n    \n    Examples:\n    >>> nth_term_geometric_sequence(2, 3, 4)\n    54\n    >>> nth_term_geometric_sequence(5, 0.5, 3)\n    1.25\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Index 'n' should be a positive integer.\")\n        \n    return a * (r ** (n - 1))"], ["def generate_geometric_sequence(a, r, num_terms):\n    \"\"\"\n    Generates a list of terms in a geometric sequence up to the specified number of terms.\n    \n    Parameters:\n    - a: float or int, the first term of the geometric sequence.\n    - r: float or connecting int, the common ratio of the sequence.\n    - num_terms: int, the number of terms to generate.\n    \n    Returns:\n    - list, containing the first `num_terms` of the sequence.\n    \n    Example:\n    >>> generate_geometric_sequence(3, 2, 5)\n    [3, 6, 12, 24, 48]\n    \"\"\"\n    return [a * (r ** i) for i in range(num_terms)]"]], "Arithmetic Sequences": [["def arithmetic_sequence_elements(a1, d, n=None, nth_term=None):\n    \"\"\"\n    Calculate the nth term of an arithmetic sequence or generate the first n terms of the sequence.\n    \n    Parameters:\n    - a1 (float or int): The first term of the arithmetic sequence.\n    - d (float or int): The common difference between consecutive terms of the sequence.\n    - n (int, optional): The total number of terms to generate. If not specified, only nth_term is calculated.\n    - nth_term (int, optional): The position of the term to be calculated. If not specified, the first n terms are returned.\n    \n    Returns:\n    - If nth_term is specified: float or int, the nth term in arithmetic sequence.\n    - If n is specified: list, the first n terms in the arithmetic sequence.\n   \n    Examples:\n    >>> arithmetic_sequence_elements(1, 2, nth_term=5)\n    9\n    >>> arithmetic_sequence_elements(1, 2, n=5)\n    [1, 3, 5, 7, 9]\n    \"\"\"\n    import numpy as np\n    if nth_term is not None:\n        # Return the nth term in the arithmetic sequence\n        return a1 + (nth_term - 1) * d\n    elif n is not None:\n        # Return the first n terms of the arithmetic sequence\n        return list(a1 + np.arange(n) * d)\n    else:\n        raise ValueError(\"Either n or nth_term must be specified\")", "def arithmetic_sequence_sum(a1, d, n):\n    \"\"\"\n    Calculate the sum of the first n terms of an arithmetic sequence.\n    \n    Parameters:\n    - a1 (float or int): The first term of the arithmetic sequence.\n    - d (float or int): The common difference between terms of the sequence.\n    - n (int): The number of terms in the sequence whose sum is to be found.\n    \n    Returns:\n    - float or int: The sum of the first n terms of the arithmetic sequence.\n    \n    Examples:\n    >>> arithmetic_sequence_sum(1, 2, 5)\n    25\n    \"\"\"\n    last_term = a1 + (n - 1) * d\n    return n * (a1 + last_term) / 2", "def arithmetic_term(a1, d, n):\n    \"\"\"\n    Calculate the nth term of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        d (float): The common difference in the arithmetic sequence.\n        n (int): The term index to find (1-based index).\n    Returns:\n        float: The nth term of the sequence.\n    Examples:\n        >>> arithmetic_term(3, 2, 5)\n        11\n    \"\"\"\n    return a1 + (n - 1) * d", "def arithmetic_sum(a1, d, n):\n    \"\"\"\n    Calculate the sum of the first n terms of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        d (float): The common difference of the sequence.\n        n (int): The number of terms to sum.\n    Returns:\n        float: The sum of the first n terms.\n    Examples:\n        >>> arithmetic_sum(3, 2, 5)\n        35\n    \"\"\"\n    an = arithmetic_term(a1, d, n)\n    return n / 2 * (a1 + an)", "def arithmetic_sequence_nth_term(a, d, n):\n    \"\"\"\n    Calculate the nth term of an arithmetic sequence.\n    Parameters:\n    a : int or float\n        The first term of the arithmetic sequence.\n    d : int or float\n        The common difference between terms of the arithmetic sequence.\n    n : int\n        The term number to find.\n    Returns:\n    int or float\n        The nth term of the arithmetic sequence.\n    Examples:\n    >>> arithmetic_sequence_nth_term(2, 3, 4)\n    11\n    >>> arithmetic_sequence_nth_term(5, -1, 5)\n    1\n    \"\"\"\n    return a + (n - 1) * d", "def sum_arithmetic_sequence(a, d, n):\n    \"\"\"\n    Calculate the sum of the first n terms of an arithmetic sequence.\n    \n    Parameters:\n    a : int or float\n        The first term of the arithmetic sequence.\n    d : int or float\n        The common difference between terms of the arithmetic sequence.\n    n : int\n        The number of terms to sum.\n    Returns:\n    int or float\n        The sum of the first n terms of the arithmetic sequence.\n    Examples:\n    >>> sum_arithmetic_sequence(2, 3, 4)\n    32\n    >>> sum_arithmetic_sequence(5, -1, 5)\n    15\n    \"\"\"\n    nth_term = arithmetic_sequence_nth_term(a, d, n)\n    return (n * (a + nth_term)) / 2"], ["def calculate_common_difference(term1, position1, term2, position2):\n    \"\"\"\n    Calculate the common difference of an arithmetic sequence given two terms and their positions.\n    \n    Parameters\n    ----------\n    term1 : int or float\n        The value of the term at the first position.\n    position1 : int\n        The position of term1 in the sequence.\n    term2 : int or float\n        The value of the term at the second position.\n    position2 : int\n        The position of term2 in the sequence.\n    \n    Returns\n    -------\n    int or float\n        The common difference of the sequence.\n    \n    Raises\n    ------\n    ValueError\n        If position1 equals position2, as it would lead to division by zero.\n    Examples\n    --------\n    >>> calculate_common_difference(3, 1, 11, 5)\n    2\n    >>> calculate_common_difference(20, 2, 10, 1)\n    -10\n    \"\"\"\n    if position1 == position2:\n        raise ValueError(\"The two positional arguments must be different to compute a common difference.\")\n    common_difference = (term2 - term1) / (position2 - position1)\n    return common_difference", "def find_common_difference(term1, term2):\n    \"\"\"\n    Find the common difference in an arithmetic sequence given two consecutive terms.\n    Parameters:\n    - term1 (float): The first term in the sequence.\n    - term2 (float): The second term in the sequence.\n    Returns:\n    - float: The common difference between the terms.\n    Examples:\n    >>> find_common_difference(5, 7)\n    2\n    >>> find_common_difference(10, 7)\n    -3\n    \"\"\"\n    return term2 - term1"], ["def generate_arithmetic_sequence(a1, d, n):\n    \"\"\"\n    Generate a list of the first n terms of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        d (float): The common difference of the sequence.\n        n (int): The number of terms to generate.\n    Returns:\n        list of float: The arithmetic sequence up to the nth term.\n    Examples:\n        >>> generate_arithmetic_sequence(1, 3, 4)\n        [1, 4, 7, 10]\n    \"\"\"\n    return [a1 + i * d for i in range(n)]", "def generate_arithmetic_sequence(first_term, common_difference, length):\n    \"\"\"\n    Generates an arithmetic sequence given the first term, common difference, and the desired length of the sequence.\n    \n    Parameters:\n    - first_term (int/float): The first term of the sequence.\n    - common_difference (int/float): The common difference between consecutive terms.\n    - length (int): The number of terms to generate in the sequence.\n    \n    Returns:\n    - list: A list representing the arithmetic sequence of the desired length.\n    \n    Examples:\n    >>> generate_arithmetic_sequence(3, 2, 5)\n    [3, 5, 7, 9, 11]\n    >>> generate_arithmetic_sequence(10, -3, 4)\n    [10, 7, 4, 1]\n    \"\"\"\n    if length <= 0:\n        raise ValueError(\"Length of the sequence must be a positive integer.\")\n    \n    return [first_term + i * common_difference for i in range(length)]"], ["def calculate_nth_term(first_term, common_difference, n):\n    \"\"\"\n    Calculate the nth term in an arithmetic sequence given the first term, common difference, and term number.\n    \n    Parameters\n    ----------\n    first_term : int or float\n        The first term of the arithmetic sequence.\n    common_difference : int or float\n        The common difference between consecutive terms of the sequence.\n    n : int\n        The term number to find. It should be 1 or greater.\n    \n    Returns\n    -------\n    int or float\n        The nth term of the arithmetic sequence.\n    Examples\n    --------\n    >>> calculate_nth_nlloatrm(3, 2, 5)\n    11\n    \"\"\"\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term", "def extract_params_and_nth_term(sequence, n):\n    \"\"\"\n    Extracts the first term and the common difference from the beginning of a given arithmetic sequence and calculates the nth term.\n    Parameters:\n    - sequence (list of int/float): The initial portion of the arithmetic sequence.\n    - n (int): The term position to calculate.\n    Returns:\n    - tuple:\n        - first_term (int/float): The first term of the sequence.\n        - common_difference (int/float): The common difference of the sequence.\n        - nth_term (int/float): The value of the nth term in the sequence.\n    Examples:\n    >>> extract_params_and_nth_term([3, 5, 7, 9], 5)\n    (3, 2, 11)\n    >>> extract_params_and_nth_term([10, 7, 4], 10)\n    (10, -3, -17)\n    \"\"\"\n    import numpy as np\n    \n    if len(sequence) < 2:\n        raise ValueError(\"The input sequence must include at least two elements to determine a common difference.\")\n    \n    first_term = sequence[0]\n    common_difference = sequence[1] - sequence[0]\n    \n    nth_term = first_term + (n - 1) * common_difference\n    return first_term, common_difference, nth_term", "def calculate_nth_term(first_term, common_difference, n):\n    \"\"\"\n    Calculate the nth term of an arithmetic sequence.\n    Parameters:\n    - first_term (float): The first term of the sequence.\n    - common_difference (float): The common difference between consecutive terms.\n    - n (int): The term number to find (1-indexed).\n    Returns:\n    - float: The nth term of the sequence.\n    Examples:\n    >>> calculate_nth_term(2, 3, 4)\n    11\n    >>> calculate_nth_term(5, -2, 3)\n    1\n    \"\"\"\n    return first_term + (n - 1) * common_difference"], ["def arithmetic_sequence_properties(a1, an, n=None, d=None):\n    \"\"\"\n    Determine the missing properties (common difference or number of terms) of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        an (float): Any known term other than the first term, recommended to be the last for best results.\n        n (int, optional): The term position of 'an' if 'd' is unknown.\n        d (float, optional): The common difference if 'n' is unknown.\n    Returns:\n        dict: Contains the computed number of terms (n), or common difference (d).\n    Examples:\n        >>> arithmetic_sequence_properties(3, 15, n=7)\n        {'common_difference': 2.0}\n        >>> arithmetic_sequence_properties(3, 15, d=2)\n        {'number_of_terms': 7}\n    \"\"\"\n    if d is not None:\n        # Compute n using the formula an = a1 + (n-1)d\n        n_value = ((an - a1) / d) + 1\n        return {'number_of_terms': int(n_value)}\n    elif n is not None:\n        # Compute d using the formula d = (an - a1) / (n-1)\n        d_value = (an - a1) / (n - 1)\n        return {'common_difference': d_value}\n    else:\n        raise ValueError(\"Either 'n' or 'd' must be provided.\")"], ["def find_middle_term(a, d, n):\n    \"\"\"\n    Find the middle term of an arithmetic sequence.\n    Parameters:\n    a : int or float\n        The first term of the arithmetic sequence.\n    d : int or float\n        The common difference.\n    n : int\n        The total number of terms in the sequence (must be odd).\n    Returns:\n    int or float\n        The middle term of the sequence.\n    Examples:\n    >>> find_middle_term(1, 2, 5)\n    5\n    >>> find_middle_term(3, 3, 7)\n    12\n    \"\"\"\n    # Middle index for an odd-sized sequence\n    middle_index = (n + 1) // 2\n    return arithmetic_sequence_nth_term(a, d, middle_index)"], ["def number_of_terms_given_sum(a, d, total_sum):\n    \"\"\"\n    Calculate the number of terms in an arithmetic sequence given the sum.\n    Parameters:\n    a : int or float\n        The first term of the arithmetic sequence.\n    d : int or float\n        The common difference.\n    total_sum : int or float\n        The total sum of the sequence.\n    Returns:\n    int\n        The number of terms in the sequence whose sum is total_sum.\n    Examples:\n    >>> number_of_terms_given_sum(3, 2, 75)\n    10\n    \"\"\"\n    import math\n    # using derived quadratic formula from the sum formula: n^2 + n(2a - 1)/d - 2S/d = 0\n    discriminant = ((2 * a - d) ** 2) + 8 * d * total_sum\n    n = (-2 * a + d + math.sqrt(discriminant)) / (2 * d)\n    return round(n)"]], "Sequences and Series": [["def geometric_sequence_term(first_term, ratio, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    - first_term (float): The first term of the geometric sequence.\n    - ratio (float): The common ratio between consecutive terms.\n    - n (int): The term index (1-based) to compute.\n    Returns:\n    - float: The nth term of the geometric sequence.\n    \n    Examples:\n    >>> geometric_sequence_term(1, 2, 4)\n    8\n    >>> geometric_sequence_term(3, 3, 5)\n    243\n    \"\"\"\n    return first_term * (ratio ** (n - 1))", "def geometric_sequence_sum(first_term, ratio, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric sequence.\n    \n    Parameters:\n    - first_term (float): The first term of the geometric sequence.\n    - ratio (float): The common ratio between consecutive terms.\n    - n (int): The number of terms to sum.\n    Returns:\n    - float: The sum of the first n terms of the geometric sequence.\n    Examples:\n    >>> geometric_sequence_sum(1, 2, 3)\n    7\n    >>> geometric_sequence_sum(2, 3, 4)\n    80\n    \"\"\"\n    if ratio == 1:\n        return first_term * n\n    else:\n        return first_term * (1 - ratio ** n) / (1 - ratio)", "def geometric_series_calculator(a1, an, n):\n    \"\"\"\n    Calculate the common ratio and find any term in a geometric sequence.\n    \n    Parameters:\n    a1 : float or int\n        The first term of the geometric sequence.\n    an : float or int\n        A specific term `an` of the geometric sequence.\n    n : int\n        The position of term `an` in the sequence (1-based index).\n        \n    Returns:\n    dict\n        A dictionary with keys 'common_ratio', 'nth_term', and if applicable, \n        operations involving factorial of terms in the sequence.\n        - 'common_ratio': float, the common ratio of the sequence.\n        - 'nth_term' : function, callable to get the nth term given 'a1', 'common_ratio', and 'term_index'.\n    \n    Examples:\n    >>> geometric_series_calculator(2, 16, 4)\n    {'common_ratio': 2.0, 'nth_term': <function ...>}\n    \"\"\"\n    # Calculate the common ratio\n    r = (an / a1) ** (1 / (n - 1))\n    # Function to calculate the nth term\n    def nth_term(term_index):\n        return a1 * r ** (term_index - 1)\n    return {'common_ratio': r, 'nth_term': nth_term}", "def nth_term_geometric_sequence(first_term, common_ratio, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Parameters:\n    - first_term (float): the first term of the geometric sequence.\n    - common_ratio (float): the common ratio between successive terms of the sequence.\n    - n (int): the term number to calculate of the sequence.\n    \n    Returns:\n    - nth_term (float): the nth term of the geometric sequence.\n    \n    Examples:\n    >>> nth_term_geometric_sequence(2, 3, 4)  # For sequence 2, 6, 18, 54, ...\n    54\n    \"\"\"\n    return first_term * (common_ratio ** (n - 1))", "def geometric_nth_term(first_term, common_ratio, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    first_term (int/float): The first term of the geometric sequence.\n    common_ratio (int/float): The common ratio between consecutive terms of the sequence.\n    n (int): The term number to find (1-based index).\n    Returns:\n    int/float: The nth term of the geometric sequence.\n    Example:\n    >>> geometric_nth_term(2, 3, 5)\n    162\n    \"\"\"\n    return first_term * (common_ratio ** (n - 1))"], ["def sum_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the sum of a finite geometric series.\n    \n    Parameters:\n        a (float or int): The first term of the series.\n        r (float or int): The common ratio of the series.\n        n (int): The number of terms in the series.\n    Returns:\n        float: The sum of the geometric series.\n    Examples:\n        >>> sum_geometric_series(1, 2, 4)\n        15.0\n        >>> sum_geometric_series(3, -2, 3)\n        -9.0\n    \"\"\"\n    import sympy\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)", "def sum_of_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n    a (float or sympy.Symbol): the first term of the geometric series.\n    r (float or sympy.Symbol): the common ratio of the geometric series.\n    n (int): the number of terms to sum in the geometric series.\n    Returns:\n    float or sympy.Expr: The sum of the first n terms of the geometric series.\n    Examples:\n    >>> sum_of_geometric_series(2, 3, 4)\n    80\n    >>> sum_of_geometric_series(1, 0.5, 10)\n    1.998046875\n    Note:\n    This function uses the formula S_n = a * (1 - r^n) / (1 - r) when r != 1,\n    and S_n = n * a when r == 1.\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r ** n) / (1 - r)", "def geometric_series_sum(a, r, n):\n    \"\"\"\n    Calculates the sum of the first 'n' terms of a geometric sequence.\n    Parameters:\n        a (float): The first term of the geometric sequence.\n        r (float): The common ratio of the sequence.\n        n (int): The number of terms to include in the sum.\n    Returns:\n        float: The sum of the first 'n' terms of the geometric sequence.\n    Examples:\n        >>> geometric_series_sum(1, 2, 4)\n        15.0\n        >>> geometric_series_sum(3, 0.5, 5)\n        3.875\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r ** n) / (1 - r)", "def sum_of_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    \n    Parameters:\n    - a: float. The first term of the series.\n    - r: float. The common ratio.\n    - n: int. The number of terms to sum.\n    \n    Returns:\n    - float. The sum of the first n terms of the geometric series.\n    \n    Example:\n    >>> sum_of_geometric_series(3, 2, 4)\n    45\n    \"\"\"\n    if r == 1:\n        return n * a\n    return a * (1 - r**n) / (1 - r)", "def sum_first_n_terms_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric sequence.\n    Parameters:\n    a : float\n        The first term of the geometric sequence.\n    r : float\n        The common ratio of the sequence.\n    n : int\n        The number of terms to sum.\n    Returns:\n    float\n        The sum of the first n terms of the geometric sequence.\n    Examples:\n    >>> sum_first_n_terms_geometric_sequence(1, 2, 4)\n    15\n    >>> sum_first_n_terms_geometric_sequence(1, 0.5, 3)\n    1.75\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r**n) / (1 - r)", "def sum_of_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the sum of a finite geometric series.\n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio of the series.\n    n (int): The number of terms in the series.\n    Returns:\n    float: The sum of the first `n` terms of the geometric series.\n    Examples:\n    >>> sum_of_geometric_series(1, 2, 4)\n    15.0\n    >>> sum_of_geometric_series(3, 0.5, 5)\n    3.9375\n    \"\"\"\n    from math import fsum  # Using fsum for better precision in floating point arithmetic\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r ** n) / (1 - r)", "def geometric_series_sum(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n        a (float): The first term of the geometric series.\n        r (float): The common ratio of the geometric series.\n        n (int): The number of terms to sum.\n    Returns:\n        float: The sum of the first n terms of the geometric series.\n    Examples:\n        >>> geometric_series_sum(1, 2, 3)\n        7.0\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r ** n) / (1 - r)", "def sum_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric sequence.\n    \n    Parameters:\n        a (float|int): The first term of the sequence.\n        r (float|int): The common ratio of the sequence.\n        n (int): The number of terms to sum.\n    \n    Returns:\n        float|int: The sum of the first n terms of the sequence if r != 1, else returns n * a.\n    \n    Examples:\n        >>> sum_geometric_sequence(2, 3, 4)\n        80\n        >>> sum_geometric_sequence(1, 1, 5)\n        5\n    \"\"\"\n    if r != 1:\n        return a * (1 - r**n) / (1 - r)\n    else:\n        return n * a", "def sum_geometric_series(a, r, n):\n    \"\"\"\n    Compute the sum of the first n terms of a geometric series.\n    Parameters:\n    - a (float or sympy.Expr): The first term of the series.\n    - r (float or sympy.Expr): The common ratio.\n    - n (int): The number of terms to sum.\n    Returns:\n    - float or sympy.Expr: The sum of the first n terms.\n    Example:\n    >>> sum_geometric_series(1, 2, 3)\n    7\n    >>> sum_geometric_series(sp.Rational(1, 2), 2, 3)\n    sympy.Rational(7, 2)\n    \"\"\"\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r**n) / (1 - r)", "def calculate_geometric_series_sum(a, r, n):\n    \"\"\"\n    Calculate the sum of the first 'n' terms of a geometric series.\n    Parameters:\n    - a (float): The first term of the series.\n    - r (float): The common ratio of the series.\n    - n (int): The number of terms in the series.\n    \n    Returns:\n    - float: The sum of the first 'n' terms of the geometric series.\n    \n    Examples:\n    >>> calculate_geometric_settings_sum(1, 0.5, 3)\n    1.75\n    >>> calculate_geometric_settings_sum(3, 3, 4)\n    120.0\n    >>> calculate_geometric_settings_sum(5, 1, 5)\n    25.0\n    \"\"\"\n    from sympy import simplify\n    if r == 1:\n        return n * a\n    else:\n        return simplify(a * (1 - r**n) / (1 - r))", "def geometric_series_sum(a, r, n):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    n (int): The number of terms to sum in the series.\n    Returns:\n    float: The sum of the first n terms of the geometric series.\n    Examples:\n    >>> geometric_series_sum(1, 2, 4)\n    15.0\n    \"\"\"\n    # Check if r is 1 to avoid division by zero in the main formula\n    if r == 1:\n        return n * a\n    else:\n        return a * (1 - r ** n) / (1 - r)", "def sum_finite_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the sum of a finite geometric series.\n    \n    Parameters:\n        a (float): The first term of the geometric series.\n        r (float): The common ratio of the geometric series.\n        n (int): The number of terms in the geometric series.\n        \n    Returns:\n        float: The sum of the first n terms of the geometric series.\n    \n    Examples:\n        >>> sum_finite_geometric_series(1, 0.5, 5)\n        1.9375\n        >>> sum_finite_geometric_series(3, 2, 4)\n        45.0\n    \"\"\"\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)"], ["def sum_specific_terms_geometric_series(a, r, n, term_selector):\n    \"\"\"\n    Sum specific terms (like even or odd indexed terms) of a geometric series, up to n terms.\n    Parameters:\n    -----------\n    a : float\n        The first term of the geometric series.\n    r : float\n        The common ratio of the geometric series.\n    n : int\n        The number of terms to consider.\n    term_selector : function\n        A function that returns True for indices of the terms to be included in the sum.\n    Returns:\n    --------\n    float\n        The sum of the specified terms within the first n terms of the series.\n    Examples:\n    ---------\n    >>> sum_specific_terms_geometric_series(1, 0.5, 10, lambda i: i % 2 == 0)\n    22.1875\n    >>> sum_specific_terms_geometric_series(1, 0.5, 10, lambda i: i % 2 != 0)\n    11.09375\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        if term_selector(i):\n            total_sum += a * (r ** i)\n    return total_sum", "def transform_and_sum_geometric_series(a, r, term_count, transformation_func):\n    \"\"\"\n    Apply a transformation to a finite number of terms in a geometric series and sum the results.\n    Parameters:\n    - a: float\n        The first term of the series.\n    - r: float\n        The common ratio of the series.\n    - term_count: int\n        The number of terms to consider in the series.\n    - transformation_func: function\n        A function to apply to each term index before computing the term value.\n    Returns:\n    - float\n        The sum of the transformed geometric series terms.\n    Examples:\n    >>> transform_and_sum_geometric_series(1, 2, 5, lambda i: i % 2 == 0) # Sum of terms with even indices in first 5 terms\n    11\n    >>> transform_and_sum_geometric_series(2, -0.5, 6, lambda i: i % 3 == 0)  # Sum of terms at index multiples of 3 in first 6 terms\n    2.111111111111111\n    \"\"\"\n    series_sum = 0\n    for i in range(term_priority):\n        if transformation_func(i):\n            series_sum += a * (r ** i)\n    return series_sum"], ["def sum_of_infinite_geometric_series(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series, given that |r| < 1.\n    \n    Parameters:\n    - a: float. The first term of the series.\n    - r: float. The common ratio, |r| must be less than 1.\n    \n    Returns:\n    - float. The sum of the infinite geometric series. Returns None if |r| >= 1.\n    \n    Example:\n    >>> sum_of_infinite_geometric_series(3, 0.5)\n    6.0\n    \"\"\"\n    if abs(r) < 1:\n        return a / (1 - r)\n    return None", "def sum_infinite_geometric_series(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series given the first term and common ratio.\n    Parameters:\n    -----------\n    a : float\n        The first term of the geometric series.\n    r : float\n        The common ratio of the geometric series. |r| must be less than 1 for convergence.\n    Returns:\n    --------\n    float\n        The sum of the infinite geometric series if |r| < 1, otherwise raises ValueError.\n    Examples:\n    ---------\n    >>> sum_infinite_geometric_series(1, 0.5)\n    2.0\n    >>> sum_infinite_geometric_series(3, -0.3)\n    3 / 1.3 = 2.3076923076923075\n    \"\"\"\n    if abs(r) >= 1:\n        raise ValueError(\"The series does not converge unless |r| < 1.\")\n    return a / (1 - r)", "def infinite_geometric_series_sum(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series.\n    Parameters:\n    - a: float\n        The first term of the series.\n    - r: float\n        The common ratio between consecutive terms. Must satisfy |r| < 1 for convergence.\n    Returns:\n    - float\n        The sum of the infinite geometric series if it converges.\n    Examples:\n    >>> infinite_geometric_series_sum(1, 0.5)\n    2.0\n    >>> infinite_geometric_series_sum(5, -0.3)\n    3.8461538461538463\n    \"\"\"\n    import math\n    if math.fabs(r) >= 1:\n        raise ValueError(\"Common ratio r must satisfy |r| < 1 for series convergence.\")\n    return a / (1 - r)", "def sum_infinite_geometric_series(a, r):\n    \"\"\"\n    Calculate the sum of an infinite geometric series, which only converges if |r| < 1.\n    \n    Parameters:\n        a (float): The first term of the geometric series.\n        r (float): The common ratio of the geometric series.\n        \n    Returns:\n        float: The sum of the infinite geometric series, if convergent.\n    \n    Examples:\n        >>> sum_infinite_geometric_series(1, 0.5)\n        2.0\n        >>> sum_infinite_geometric scenes where the common raatio(|r|) is less than 1.\n    \"\"\"\n    if abs(r) < 1:\n        return a / (1 - r)\n    else:\n        raise ValueError(\"The series does not converge, |r| must be less than 1 for convergence.\")", "def sum_infinite_geometric_series(first_term, common_ratio):\n    \"\"\"\n    Calculate the sum of an infinite geometric series when |r| < 1.\n    The formula used is S = a / (1 - r).\n    Parameters:\n    - first_term (float): The first term of the series (a).\n    - common_ratio (float): The common ratio of the series (r).\n    Returns:\n    - float: The sum of the series, if |common_ratio| < 1. If not, returns None indicating divergence.\n    Examples:\n    >>> sum_infinite_geometric_series(1, 0.5)\n    2.0\n    >>> sum_infinite_geometric_series(5, -0.3)\n    3.571428571428571\n    >>> sum_infinite_geometric_series(2, 1.2) # This should arguably return None as the series diverges.\n    \"\"\"\n    import math\n    if math.fabs(common_ratio) < 1:\n        return first_term / (1 - common_ratio)\n    else:\n        return None"], ["def identify_first_term_and_ratio(terms):\n    \"\"\"\n    Identify the first term and common ratio of a geometric sequence from its terms.\n    Parameters:\n    terms (list): A list of numbers representing the terms of a geometric sequence.\n    Returns:\n    tuple: A tuple containing the first term and the common ratio, respectively.\n    Examples:\n    >>> identify_first_term_and_ratio([2, 4, 8, 16])\n    (2, 2)\n    >>> identify_first_term_and_ratio([3, 1.5, 0.75, 0.375])\n    (3, 0.5)\n    \"\"\"\n    if len(terms) < 2:\n        raise ValueError(\"At least two terms are required to determine the common ratio.\")\n    first_term = terms[0]\n    common_ratio = terms[1] / terms[0] if terms[0] != 0 else None\n    if any(terms[i] * common_ratio != terms[i + 1] for i in range(len(terms) - 1)):\n        raise AssertionError(\"The provided terms do not form a geometric sequence with a constant ratio.\")\n    return (first_term, common_ratio)", "def extract_first_term_and_ratio(series):\n    \"\"\"\n    Extract the first term and the common ratio from a fully specified geometric series list.\n    Parameters:\n    series (list of float): The complete sequence of terms in a geometric series.\n    Returns:\n    tuple: (first term, common ratio)\n    Examples:\n    >>> extract_first_term_and_ratio([1, 2, 4, 8])\n    (1, 2)\n    \"\"\"\n    return (series[0], series[1] / series[0])"], ["def sum_of_arithmetic_series(a, n, l=None, d=None):\n    \"\"\"\n    Calculates the sum of an arithmetic series given the first term, the number of terms,\n    and either the last term or the common difference.\n    Parameters\n    ----------\n    a : int or float\n        The first term of the arithmetic series.\n    n : int\n        The number of terms in the series.\n    l : int or float, optional\n        The last term of the series (if known). Default is None.\n    d : int or float, optional\n        The common difference between successive terms (if known). Default is None.\n    \n    Returns\n    -------\n    float\n        The sum of the arithmetic series.\n    Raises\n    ------\n    ValueError\n        If both l and d are not provided, or neither is provided.\n    \n    Examples\n    --------\n    >>> sum_of_arithmetic_series(1, 10, l=10)  # Series from 1 to 10\n    55\n    >>> sum_of_arithmetic_series(1, 100, d=1)  # Series from 1 to 100\n    5050\n    >>> sum_of_arithmetic_series(5, 10, d=3)   # First term 5, 10 terms, common difference 3\n    140\n    \"\"\"\n    if l is not None:\n        sum_series = n * (a + l) / 2\n    elif d is not None:\n        l = a + (n - 1) * d\n        sum_series = n * (a + l) / 2\n    else:\n        raise ValueError(\"Either the last term or the common difference must be given.\")\n    \n    return sum_series", "def arithmetic_series_sum(a, d, n):\n    \"\"\"\n    Calculate the sum of the first 'n' terms of an arithmetic series.\n    Parameters:\n    a (int or float): The first term of the arithmetic series.\n    d (int or float): The common difference between consecutive terms.\n    n (int): The number of terms to sum.\n    Returns:\n    int or float: The sum of the first 'n' terms of the arithmetic series.\n    Example:\n    >>> arithmetic_series_sum(1, 1, 100)\n    5050\n    >>> arithmetic_series_sum(3, 5, 10)\n    230\n    \"\"\"\n    last_term = a + (n - 1) * d\n    return n * (a + last_term) / 2", "def sum_of_sums_arithmetic_series(a, d, n):\n    \"\"\"\n    Calculate the sum of sums of the first 'n' terms of an arithmetic series.\n    This is effectively the cumulative sum of all sums up to each term of the series.\n    Parameters:\n    a (int or float): The first term of the arithmetic series.\n    d (int or float): The common difference between consecutive terms.\n    n (int): The number of terms to sum the sums.\n    Returns:\n    int or float: The sum of cumulative sums up to each term of the arithmetic series.\n    Example:\n    >>> sum_of_sums_arithmetic_series(1, 1, 4)\n    20\n    >>> sum_of_sums_arithmetic_series(1, 2, 4)\n    40\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += arithmetic_series_sum(a, d, i)\n    return total", "def sum_of_arithmetic_series(n, a, l):\n    \"\"\"\n    Compute the sum of an arithmetic series using the formula S = (n/2) * (a + l), where\n    'n' is the number of terms, 'a' is the first term, and 'l' is the last term.\n    \n    Parameters:\n    - n (int): Number of terms in the series. Must be a positive integer.\n    - a (numeric): The first term of the series.\n    - l (numeric): The last term of the series.\n    \n    Returns:\n    - numeric: The sum of the arithmetic series.\n    \n    Examples:\n    - sum_of_arithmetic_series(5, 1, 9) returns 25, because (1 + 3 + 5 + 7 + 9)/2 = 25.\n    - sum_of_arithmetic_series(100, 1, 199) returns 10000.\n    \"\"\"\n    if n < 1 or not isinstance(n, int):\n        raise ValueError(\"n must be a positive integer\")\n    \n    return (n * (a + l)) // 2", "def arithmetic_series_sum(a, d, n):\n    \"\"\"\n    Calculate the sum of the first 'n' terms of an arithmetic series.\n    \n    Parameters:\n        a (float/int): The first term of the arithmetic series.\n        d (float/int): The common difference between consecutive terms.\n        n (int): The number of terms to sum.\n        \n    Returns:\n        float: The sum of the first 'n' terms of the arithmetic series.\n    \n    Examples:\n        >>> arithmetic_series_sum(1, 1, 5)\n        15.0\n        >>> arithmetic_series_sum(3, 2, 4)\n        26.0\n    \"\"\"\n    return n / 2 * (2 * a + (n - 1) * d)", "def arithmetic_series_terms(a, d, n):\n    \"\"\"\n    Generate the first 'n' terms of an arithmetic series starting with 'a' and having common difference 'd'.\n    \n    Parameters:\n        a (float/int): The first term of the series.\n        d (float/int): The common difference between terms.\n        n (int): The number of terms to generate.\n        \n    Returns:\n        list: A list of the first 'n' terms of the arithmetic series.\n    \n    Examples:\n        >>> arithmetic_series_terms(1, 1, 5)\n        [1, 2, 3, 4, 5]\n        >>> arithmetic_series_terms(5, 3, 4)\n        [5, 8, 11, 14]\n    \"\"\"\n    return [a + i * d for i in range(n)]", "def sum_of_arithmetic_series(n, a, l):\n    \"\"\"\n    Calculate the sum of an arithmetic series given the number of terms, the first term, and the last term.\n    Parameters:\n    n (int): The number of terms in the series.\n    a (int or float): The first term in the series.\n    l (int or float): The last term in the series.\n    Returns:\n    float: The sum of the arithmetic series.\n    Examples:\n    >>> sum_of_arithmetic_series(5, 1, 9)\n    25.0\n    >>> sum_of_arithmetic_series(10, 2, 20)\n    110.0\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The number of terms, n, must be a positive integer.\")\n    return n * (a + l) / 2", "def arithmetic_sequence_sum(a1, d, n):\n    \"\"\"\n    Calculates the sum of the first n terms of an arithmetic sequence.\n    \n    Parameters:\n    - a1 (int or float): The first term of the arithmetic sequence.\n    - d (int or float): The common difference of the sequence.\n    - n (int): The number of terms to sum.\n    \n    Returns:\n    - int or float: The sum of the first n terms of the arithmetic sequence.\n    \n    Examples:\n    >>> arithmetic_sequence_star_sum(1, 3, 5)\n    35\n    >>> arithmetic_sequence_star_sum(4, -2, 3)\n    6\n    \"\"\"\n    # Sum formula for arithmetic sequence: S_n = n/2 * (2a1 + (n - 1) * d)\n    return n * (2*a1 + (n - 1) * d) / 2"], ["def sum_of_geometric_series(first_term, common_ratio, num_terms):\n    \"\"\"\n    Calculate the sum of a finite geometric series given the first term, common ratio, and number of terms.\n    Parameters:\n    - first_term (float or int): The first term of the geometric series.\n    - common_ratio (float or int): The common ratio between consecutive terms.\n    - num_terms (int): The number of terms in the series.\n    Returns:\n    - float: The sum of the geometric series.\n    Examples:\n    >>> sum_of_geometric_series(1, 2, 4)\n    15.0\n    >>> sum_of_geometric_series(3, 0.5, 6)\n    3.9375\n    \"\"\"\n    import sympy as sp\n    if common_ratio == 1:\n        # In this special case, the sum is simply the first term times the number of terms\n        return first_term * num_terms\n    else:\n        # S = a * (r^n - 1) / (r - 1)\n        return first_term * (common_ratio ** num_terms - 1) / (common_ratio - 1)", "def compute_term_in_geometric_series(first_term, common_ratio, term_index):\n    \"\"\"\n    Compute the specific term in a geometric series using its position (index).\n    Parameters:\n    - first_term (float or int): the first term of the geometric series.\n    - common_ratio (float or int): the common ratio between consecutive terms.\n    - term_index (int): the position of the term in the series to calculate (1-indexed).\n    Returns:\n    - float: the value of the term at the given index in the series.\n    Examples:\n    >>> compute_term_in_geometric_series(1, 3, 5)\n    81\n    >>> compute_term_in_geometric_series(2, 0.5, 3)\n    0.5\n    \"\"\"\n    return first_term * common_ratio ** (term_index - 1)", "def sum_geometric_sequence(first_term, common_ratio, num_terms):\n    \"\"\"\n    Calculate the sum of the first num_terms of a geometric sequence.\n    \n    Parameters:\n    - first_term (float): the first term of the geometric sequence.\n    - common_ratio (float): the common ratio between successive terms of the sequence.\n    - num_terms (int): the number of terms to sum in the sequence.\n    \n    Returns:\n    - sum_terms (float): the sum of the first num_terms of the geometric sequence.\n    \n    Examples:\n    >>> sum_geometric_sequence(2, 3, 3)  # Sum of 2, 6, 18\n    26\n    \"\"\"\n    if common_ratio == 1:\n        return first_term * num_terms\n    else:\n        return first_term * (1 - common_ratio ** num_terms) / (1 - common_ratio)", "def geometric_series_sum(first_term, ratio, number_of_terms):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n    - first_term : float or sympy.Symbol\n        The first term of the geometric series.\n    - ratio : float or sympy.Symbol\n        The common ratio of the geometric series.\n    - number_of_terms : int\n        The number of terms of the series to sum up.\n    Returns:\n    - float or sympy.Expr\n        The sum of the first n terms of the geometric series.\n    Examples:\n    >>> geometric_series_sum(1, 0.5, 3)\n    1.75\n    >>> geometric_series_sum(3, 2, 4)\n    45\n    >>> a, r = sp.symbols('a r')\n    >>> geometric_series_sum(a, r, 5)\n    a*(1 - r**5)/(1 - r)\n    Raises:\n    - ValueError: If number_of_terms is non-positive.\n    \"\"\"\n    if number_of_terms <= 0:\n        raise ValueError(\"The number of terms must be positive.\")\n    \n    return first_term * (1 - ratio ** number_of_terms) / (1 - ratio)", "def geometric_series_sum(first_term, common_ratio, num_terms):\n    \"\"\"\n    Calculate the sum of the first `num_terms` of a geometric series.\n    \n    This function uses the geometric series sum formula:\n    S_n = a * (1 - r^n) / (1 - r)\n    where `a` is the first term, `r` is the common ratio, and `n` is the number of terms.\n    Parameters:\n    -----------\n    first_term : float\n        The first term of the geometric series (denoted as 'a' in the formula).\n    common_ratio : float\n        The common ratio between successive terms in the geometric series (denoted as 'r' in the formula).\n    num_terms : int\n        The number of terms in the series whose sum is to be calculated (denoted as 'n' in the formula).\n    Returns:\n    --------\n    float\n        The sum of the first `num_terms` of the geometric series.\n    Examples:\n    ---------\n    >>> geometric_series_sum(1, 0.5, 3)\n    1.75\n    >>> geometric_series_sum(2, 3, 4)\n    80.0\n    \"\"\"\n    if common_ratio == 1:\n        # Special case where the formula breaks down as denominator becomes zero\n        return first_term * num_terms\n    else:\n        # Apply the geometric series sum formula\n        return first_term * (1 - common_ratio ** num_half_points) / (1 - common_ratio)", "def sum_geometric_series(first_term, common_ratio, n_terms):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n    first_term (int/float): The first term of the geometric series.\n    common_ratio (int/float): The common ratio of the series.\n    n_terms(int): The number of terms to be summed.\n    Returns:\n    int/float: The sum of the first n terms of the geometric series.\n    Example:\n    >>> sum_geometric_series(2, 3, 3)\n    26\n    \"\"\"\n    if common_ratio == 1:\n        return first_term * n_terms\n    \n    return first_term * (1 - common_ratio ** n_terms) / (1 - common_ratio)"], ["def arithmetic_term_finder(a1, d, n):\n    \"\"\"\n    Calculates the nth term of an arithmetic sequence.\n    \n    Parameters:\n    - a1 (int or float): The first term of the arithmetic sequence.\n    - d (int or float): The common difference of the sequence.\n    - n (int): The term number to find (1-based index).\n    \n    Returns:\n    - int or float: The nth term of the arithmetic sequence.\n    \n    Examples:\n    >>> arithmetic_term_finder(1, 2, 5)\n    9\n    >>> arithmetic_term_finder(3, -1, 10)\n    -6\n    \"\"\"\n    # nth term formula: an = a1 + (n - 1) * d\n    return a1 + (n - 1) * d"], ["def filter_series_by_term_parity(first_term, common_ratio, num_terms, parity='even'):\n    \"\"\"\n    Extract and list the terms from a geometric series that are either even-powered or odd-powered.\n    Parameters:\n    - first_term (float): The first term of the series.\n    - common_ratio (float): The common ratio of the series.\n    - num_terms (int): The number of terms to consider from the series.\n    - parity (str): 'even' if even-powered terms are desired, 'odd' for odd-powered terms.\n    Returns:\n    - list: A list of terms from the geometric series corresponding to the specified parity.\n    Examples:\n    >>> filter_series_by_term_parity(1, 2, 5, 'even')\n    [2, 8]\n    >>> filter_series_by_term_parity(1, 3, 5, 'odd')\n    [1, 9, 81]\n    \"\"\"\n    terms = [first_term * (common_ratio ** i) for i in range(num_terms)]\n    if parity == 'even':\n        return terms[1::2]  # Selecting terms at even indices, zero-based index means odd powers\n    else:\n        return terms[0::2]  # Selecting terms at odd indices, zero-based index means even powers"], ["def geometric_series_operations(terms, operation='product'):\n    \"\"\"\n    Perform operations such as product or factorial manipulation on terms of a geometric series.\n    \n    Parameters:\n    terms : list of float or int\n        The terms of the geometric series on which to perform the operation.\n    operation : str, optional\n        The type of operation to perform, supported operations are 'product' and 'factorial_product'.\n        Default is 'product'.\n        \n    Returns:\n    float\n        The result of the specified operation on the given sequence terms.\n    \n    Examples:\n    >>> geometric_series_operations([2, 4, 8])\n    64\n    >>> geometric_series_operations([2, 4, 8], operation='factorial_product')\n    10321920\n    \"\"\"\n    if operation == 'product':\n        result = np.prod(terms)\n    elif operation == 'factorial_product':\n        result = np.prod([factorial(int(term)) for term in terms])\n    else:\n        raise ValueError(\"Unsupported operation provided.\")\n    \n    return result"], ["def series_after_multiplication_by_ratio(first_term, common_ratio, num_terms):\n    \"\"\"\n    Compute the new series obtained by multiplying each term of an initial geometric series by the common ratio.\n    Parameters:\n    - first_term (float): The first term of the series.\n    - common_ratio (float): The common ratio of the series.\n    - num_terms (int): The number of terms to consider from the series.\n    Returns:\n    - list: A new series produced by multiplying each term of the original by the common ratio.\n    Examples:\n    >>> series_after_multiplication_by_ratio(1, 2, 5)\n    [2, 4, 8, 16, 32]\n    \"\"\"\n    initial_terms = [first_term * (common_ratio ** i) for i in range(num_terms)]\n    return [x * common_ratio for x in initial_terms]"], ["def calculate_geometric_term(a, r, n):\n    \"\"\"\n    Calculate the nth term in a geometric sequence.\n    Parameters:\n    a (float): The first term in the sequence.\n    r (float): The common ratio of the sequence.\n    n (int): The term position to compute (1 based index).\n    Returns:\n    float: The nth term in the geometric sequence.\n    Examples:\n    >>> calculate_geometric_term(2, 3, 3)\n    18.0\n    >>> calculate_geometric_term(3, 2, 5)\n    48.0\n    \"\"\"\n    # Calculate nth term using a * r^(n-1)\n    return a * (r ** (n - 1))", "def nth_term_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    a : float\n        The first term of the sequence.\n    r : float\n        The common ratio of the sequence.\n    n : int\n            The term number to find (1-indexed).\n    Returns:\n    float\n        The nth term of the sequence.\n    Example:\n    >>> nth_term_geometric_sequence(2, 3, 5)\n    162.0\n    \"\"\"\n    return a * (r ** (n - 1))", "def calculate_geometric_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric in teh sequence.\n    - n (int): The nth term to be found in the sequence.\n    Returns:\n    - float: The nth term of the sequence.\n    Examples:\n    >>> calculate_geometric_term(2, 3, 4)\n    54.0\n    >>> calculate_geometric_term(5, 2, 5)\n    80.0\n    \"\"\"\n    return a * (r ** (n - 1))", "def nth_term_geometric_series(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric series.\n    \n    Parameters:\n    - a: float. The first term of the series.\n    - r: float. The common ratio.\n    - n: int. The term number to find (1-indexed).\n    \n    Returns:\n    - float. The nth term of the series.\n    \n    Example:\n    >>> nth_term_geometric_series(3, 2, 4)\n    24\n    \"\"\"\n    return a * r**(n-1)", "def nth_term_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence given the first term,\n    common ratio, and term position.\n    Parameters:\n    a : float\n        The first term of the geometric sequence.\n    r : float\n        The common ratio of the sequence.\n    n : int\n        The term number to find.\n    Returns:\n    float\n        The nth term of the geometric sequence.\n    Examples:\n    >>> nth_term_geometric_sequence(3, 2, 4)\n    24\n    >>> nth_term_geometric_sequence(5, 3, 5)\n    405\n    \"\"\"\n    return a * r**(n - 1)", "def nth_term_of_geometric_sequence(a, r, n):\n    \"\"\"\n    Compute the nth term of a geometric sequence given the initial term 'a', \n    the common ratio 'r', and the term number 'n'.\n    \n    Parameters:\n    a (float): The first term of the geometric sequence.\n    r (float): The common ratio of the sequence.\n    n (int): The term number to calculate (1-based index).\n    \n    Returns:\n    float: The nth term of the sequence.\n    \n    Examples:\n    >>> nth_term_of_geometric_sequence(2, 3, 4)\n    54.0\n    \"\"\"\n    return a * (r ** (n - 1))", "def geometric_sequence_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    A geometric sequence is a sequence of numbers where each term after\n    the first is found by multiplying the previous one by a fixed, non-zero\n    number called the common ratio (r).\n    \n    The nth term of a geometric sequence can be calculated by the formula:\n        a_n = a * r^(n-1),\n    where `a` is the first term of the sequence, `r` is the common ratio, and\n    `n` is the term number (1-based index).\n    \n    Parameters:\n    a : int, float, or sp.Expr\n        The first term of the geometric sequence.\n    r : int, float, or sp.Expr\n        The common ratio of the sequence.\n    n : int\n        The term number to calculate (must be a positive integer).\n    \n    Returns:\n    sp.Expr\n        The nth term of the geometric sequence as a symbolic expression, \n        which can be easily evaluated to a numeric value if `a` and `r` are \n        numeric.\n    \n    Examples:\n    >>> geometric_sequence_term(1, 2, 3)\n    4\n    >>> geometric_sequence_term(3, -2, 5)\n    -48\n    >>> geometric_sequence_term(sp.symbols('a'), 2, 3)\n    4*a\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Term number n must be a positive integer\")\n    \n    # Calculate the nth term using the geometric sequence formula\n    nth_term = a * r**(n - 1)\n    \n    return nth_term", "def nth_term_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence given the first term, common ratio, and term index.\n    \n    Parameters:\n        a (float|int): The first term of the sequence.\n        r (float|int): The common ratio of the sequence.\n        n (int): The index of the term to find (1-indexed).\n    \n    Returns:\n        float|int: The nth term of the sequence.\n    \n    Examples:\n        >>> nth_term_geometric_sequence(3, 2, 4)\n        24\n    \"\"\"\n    return a * r**(n-1)", "def geometric_term(a, r, n):\n    \"\"\"\n    Calculate the n-th term of a geometric series given the first term and the common ratio.\n    Parameters:\n    - a (float or sympy.Expr): The first term of the series.\n    - r (float or sympy.Expr): The common ratio.\n    - n (int): The term index (1-based).\n    Returns:\n    - float or sympy.Expr: The n-th term of the geometric series.\n    Example:\n    >>> geometric_term(1, 2, 4)\n    8\n    >>> geometric_term(sp.Rational(1, 4), 2, 3)\n    1\n    \"\"\"\n    return a * r**(n-1)", "def geometric_sequence_nth_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric sequence.\n    - n (int): The term number to find (1-based index).\n    \n    Returns:\n    - float: The nth term of the geometric sequence.\n    \n    Examples:\n    >>> geometric_sequence_nth_term(3, 2, 4)\n    24.0\n    >>> geometric_sequence_nth_term(5, 0.5, 3)\n    1.25\n    \"\"\"\n    return a * r ** (n - 1)", "def compute_geometric_term(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    Parameters:\n    a (float or sympy.Symbol): The first term of the geometric sequence.\n    r (float or sympy.Symbol): The common ratio of the sequence.\n    n (int): The position of the term to compute, where n >= 1.\n    \n    Returns:\n    float or sympy.Expr: The nth term of the sequence.\n    \n    Examples:\n    >>> import sympy as sp\n    >>> compute_geometric_specified_term(3, 2, 5)\n    48\n    >>> x, y = sp.symbols('x y')\n    >>> compute_geometric_specified_term(x, y, 3)\n    x*y**2\n    \"\"\"\n    import sympy as sp\n    if isinstance(a, (int, float)) and isinstance(r, (int, float)):\n        return a * r ** (n - 1)\n    else:\n        return a * sp.Pow(r, n - 1)", "def calculate_nth_term_geometric_sequence(a, r, n):\n    \"\"\"\n    Calculate the nth term of a geometric sequence.\n    \n    Parameters:\n    a (numeric): The first term of the geometric sequence.\n    r (numeric): The common ratio between consecutive terms of the sequence.\n    n (int): The term number to calculate, where n=1 refers to the first term.\n    \n    Returns:\n    numeric: The nth term of the geometric sequence.\n    \n    Example:\n    >>> calculate_nth_term_geometric_sequence(2, 3, 5)\n    162\n    \"\"\"\n    import sympy as sp\n    # The nth term of a geometric sequence is given by: a * r^(n-1)\n    nth_term = a * sp.pow(r, n - 1)\n    return nth_term"], ["def calculate_range_of_terms_geometric_sequence(a, r, start, end):\n    \"\"\"\n    Calculate a list of terms in a geometric sequence from 'start' to 'end'.\n    \n    Parameters:\n    a (numeric): The first term of the geometric sequence.\n    r (numeric): The common ratio between terms.\n    start (int): The starting term index to calculate (inclusive).\n    end (int): The ending term index to calculate (inclusive).\n    \n    Returns:\n    list: A list containing the specified range of terms in the geometric sequence.\n    \n    Example:\n    >>> calculate_range_of_terms_geometric_sequence(3, 2, 1, 5)\n    [3, 6, 12, 24, 48]\n    \"\"\"\n    terms = []\n    for i in range(start, end + 1):\n        term = calculate_nth_term_geometric_sequence(a, r, i)\n        terms.append(term)\n    return terms"], ["def solve_terms_count_for_sum(a, r, target_sum):\n    \"\"\"\n    Determine the minimum number of terms needed in a geometric series for the sum to exceed or meet a given value.\n    Parameters:\n        a (float): The first term of the geometric series.\n        r (float): The common ratio of the geometric series.\n        target_sum (float): The sum target to meet or exceed.\n    Returns:\n        int: The minimum number of terms needed.\n    Examples:\n        >>> solve_terms_count_for_sum(1, 2, 14)\n        4\n    \"\"\"\n    n = 1\n    current_sum = a\n    if r == 1:\n        return int(target_sum / a)\n    while current_sum < target_sum:\n        n += 1\n        currentSum = geometric_series_sum(a, r, n)\n    return n", "def solve_for_terms_in_geometric_series(a, r, target_sum, inequality=False):\n    \"\"\"\n    Solve for the number of terms n needed in a geometric series to reach or exceed a given sum.\n    Parameters:\n    a (float): The first term of the geometric series.\n    r (float): The common ratio of the geometric series.\n    target_sum (float): The target sum the series needs to match or exceed.\n    inequality (bool): If True, find the smallest n such that the sum exceeds target_sum,\n                       otherwise find n such that sum equals target_sum.\n    Returns:\n    int or None: The number of terms necessary, or None if no such number exists under the given conditions.\n    Examples:\n    >>> solve_for_terms_in_geometric_series(1, 2, 15)\n    4\n    >>> solve_for_terms_in_geometric_series(1, 2, 15, inequality=True)\n    4\n    \"\"\"\n    n = 1\n    current_sum = a\n    if inequality:\n        while current_sum <= target_sum:\n            n += 1\n            current_sum = geometric_series_sum(a, r, n)\n            if current_sum > target_sum:\n                return n\n        return None  # In case series sum never exceeds target_sum\n    else:\n        # Solve equality using sympy solving capabilities\n        n = sp.symbols('n', integer=True, positive=True)\n        equation = a * (1 - r ** n) / (1 - r) - target_table\n        solutions = sp.solveset(equation, n, domain=sp.S.Naturals)\n        return min(solutions) if solutions else None"], ["def calculate_common_ratio(term1, term2):\n    \"\"\"\n    Calculate the common ratio of a geometric sequence from two consecutive terms.\n    Parameters:\n    term1 (float): The first term in the sequence.\n    term2 (float): The second term in the sequence, which immediately follows the first term.\n    Returns:\n    float: The common ratio.\n    Examples:\n    >>> calculate_common_ratio(2, 6)\n    3.0\n    >>> calculate_common_ratio(5, 15)\n    3.0\n    \"\"\"\n    # Ensure we are dealing with float precision\n    term1 = float(term1)\n    term2 = float(term2)\n    \n    # Calculate and return the common ratio; (term2/term1)\n    return term2 / term1", "def compute_common_ratio(term1, term2):\n    \"\"\"\n    Compute the common ratio of a geometric series given two consecutive terms.\n    Parameters:\n    - term1 (float or sympy.Expr): The first term.\n    - term2 (float or sympy.Expr): The second term, which follows the first term.\n    Returns:\n    - float or sympy.Expr: The common ratio.\n    Example:\n    >>> compute_common_ratio(3, 6)\n    2\n    >>> compute_common_ratio(sp.Rational(1, 3), sp.Rational(1, 9))\n    1/3\n    \"\"\"\n    return term2 / term1", "def find_common_ratio(term1, term2):\n    \"\"\"\n    Determine the common ratio in a geometric sequence from two consecutive terms.\n    Parameters:\n    term1 (float or sympy.Symbol): The first of the two consecutive terms.\n    term2 (float or sympy.Symbol): The second of the two consecutive terms.\n    Returns:\n    float or sympy.Symbol: The common ratio or its expression if symbols are used.\n    \n    Examples:\n    >>> find_common_ratio(4, 16)\n    4.0\n    >>> import sympy as sp\n    >>> a, b = sp.symbols('a b')\n    >>> find_common_ratio(a, b)\n    b / a\n    \"\"\"\n    import sympy as sp\n    return term2 / term1"], ["def exponential_growth(initial_value, growth_ratio, periods):\n    \"\"\"\n    Calculate the final amount after applying a growth ratio for a number of periods,\n    effectively using a geometric progression.\n    Parameters:\n    initial_value : float\n        The initial amount before growth begins.\n    growth_ratio : float\n        The ratio by which the value grows per period.\n    periods : int\n        The total number of periods over which growth is applied.\n    Returns:\n    float\n        The value after growth has been applied for the specified number of periods.\n    Examples:\n    >>> exponential_growth(100, 1.1, 5)\n    161.05100000000004\n    >>> exponential_growth(1000, 1.05, 10)\n    1628.894626777442\n    \"\"\"\n    return initial_value * (growth_ratio ** periods)"], ["def solve_geometric_sequence_inequality(a, r, condition, relation):\n    \"\"\"\n    Solve inequalities involving geometric sequences where the condition is a function of 'n'.\n    \n    Parameters:\n    a (float): The first term of the geometric sequence.\n    r (float): The common ratio of the sequence.\n    condition (str): The mathematical expression as a string involving 'n' where 'n' is the term number.\n                     Example: \"3*n + 2 > 50\", \"5*n**2 <= 100\"\n    relation (str): The relation to be solved against, including the term in the sequence. This will typically\n                    involve 'a' and 'r'.\n                    Example: \"a * r**(n-1)\"\n    \n    Returns:\n    list: The solutions to the inequality if any, otherwise an empty list.\n    \n    Examples:\n    >>> solve_geometric_sequence_inequality(2, 3, \"3*n + 2 > 50\", \"2 * 3**(n - 1)\")\n    [5]\n    \"\"\"\n    n = symbols('n', integer=True)\n    relation = eval(relation.replace('a', str(a)).replace('r', str(r)))\n    condition = eval(condition.replace('n', 'n'))\n    inequality = eval(f\"{relation} {condition}\")\n    return solve(inequality, n)"], ["def is_geometric_sequence(sequence):\n    \"\"\"\n    Determine whether a given sequence of numbers is a geometric sequence.\n    \n    Parameters:\n        sequence (list of float|int): The sequence to be checked.\n    \n    Returns:\n        bool: True if the sequence is geometric, False otherwise.\n    \n    Examples:\n        >>> is_geometric_sequence([2, 4, 8, 16])\n        True\n        >>> is_geometric_sequence([2, 4, 6, 8])\n        False\n    \"\"\"\n    if len(sequence) < 2:\n        return False\n    ratios = set(sequence[i] / sequence[i-1] for i in range(1, len(sequence)))\n    return len(ratios) == 1"], ["def geometric_series_details(a, r, n):\n    \"\"\"\n    Get details of a geometric series, specifically the nth term.\n    \n    Parameters:\n        a (float or int): The first term of the series.\n        r (float or int): The common ratio of the series.\n        n (int): The nth term being queried.\n    Returns:\n        dict: Details including the first term, common ratio, and nth term.\n    \n    Examples:\n        >>> geometric_series_details(1, 2, 4)\n        {'first_term': 1, 'common_ratio': 2, 'nth_term': 8}\n        >>> geometric_series_details(3, -2, 3)\n        {'first_term': 3, 'common_ratio': -2, 'nth_term': -12}\n    \"\"\"\n    nth_term = a * r**(n-1)\n    return {\n        'first_term': a,\n        'common_ratio': r,\n        'nth_term': nth_term\n    }"], ["def generate_geometric_sequence(a, r, n):\n    \"\"\"\n    Generate the first n terms of a geometric sequence.\n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the sequence.\n    - n (int): The number of terms to generate from the sequence.\n    Returns:\n    - list of floats: A list containing the first n terms of the geometric sequence.\n    Examples:\n    >>> generate_geometricSequence(1, 2, 4)\n    [1, 2, 4, 8]\n    >>> generate_geometric_sequence(3, 3, 3)\n    [3, 9, 27]\n    \"\"\"\n    return [a * (r ** i) for i in range(n)]"], ["def min_terms_for_sum(a, r, S):\n    \"\"\"\n    Determines the minimum number of terms 'n' required in a geometric sequence \n    for the sum to be at least 'S'.\n    \n    Parameters:\n        a (float): The first term of the geometric sequence.\n        r (float): The common ratio.\n        S (float): The minimum sum required.\n    Returns:\n        int: The minimum number of terms needed for the sum to meet or exceed 'S'.\n    Examples:\n        >>> min_terms_for_sum(1, 2, 31)\n        5\n        >>> min_terms_for_sum(100, 0.5, 150)\n        3\n    \"\"\"\n    if r == 1:\n        return math.ceil(S / a)\n    else:\n        n = math.log(1 + (S * (r - 1) / a), r)\n        return math.ceil(n)"], ["def solve_for_common_ratio(a, Sn, n):\n    \"\"\"\n    Solve for the common ratio 'r' given the first term, sum of the first n terms of a geometric series, and n.\n    Parameters:\n        a (float): The first term of the geometric series.\n        Sn (float): The sum of the first n terms.\n        n (int): The number of terms.\n    Returns:\n        list: A list of possible common ratios (floats).\n    Examples:\n        >>> solve_for_common_ratio(1, 7, 3)\n        [2.0]\n    \"\"\"\n    r = symbols('r', real=True)\n    if n == 1:\n        return [Sn / a]\n    equation = Eq(a * (1 - r**n) / (1 - r), Sn)\n    return solve(equation)"], ["def find_term_for_geometric_inequality(a, r, threshold, direction='greater'):\n    \"\"\"\n    Find the smallest term number n in a geometric sequence where the nth term satisfies an inequality condition.\n    \n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric sequence.\n    - threshold (float): The value to compare the nth term against.\n    - direction (str): Determines the type of inequality; either 'greater' if the term should be greater than the threshold, or 'less' for less than the threshold.\n    \n    Returns:\n    - int: The smallest term number n meeting the condition or -1 if no such term exists (e.g., for wrong input parameters).\n    \n    Examples:\n    >>> find_term_for_geometric_inequality(3, 2, 100, 'greater')\n    7\n    >>> find_term_for_geometric_inequality(100, 0.5, 1, 'less')\n    8\n    \"\"\"\n    import math\n    \n    if direction not in ['greater', 'less']:\n        return -1  # Invalid direction input\n    if r <= 0 or a == 0:\n        return -1  # Invalid ratio or initial term\n    \n    if direction == 'greater':\n        # Solve a*r^(n-1) > threshold\n        # taking logarithm both sides: (n-1) * log(r) > log(threshold / a)\n        if r > 1:\n            n = math.ceil((math.log(threshold / a) / math.log(r)) + 1)\n            return n\n        return -1  # No solution exists if r <= 1\n    elif direction == 'less':\n        # Solve a*r^(n-1) < threshold\n        # taking logarithm both sides: (n-1) * log(r) < log(threshold / a)\n        if r < 1 and r > 0:\n            n = math.ceil((math.log(threshold / a) / math.log(r)) + 1)\n            return n\n        return -1  # No solution exists if r >= 1\n    return -1  # Should not reach here"], ["def find_min_n_geometric_inequality(a, r, expression):\n    \"\"\"\n    Find the minimum term number 'n' where the nth term satisfies a given inequality condition in a geometric sequence.\n    Parameters:\n    a : float\n        The first term of the sequence.\n    r : float\n        The common ratio of the sequence.\n    expression : sympy.Expr\n        The inequality expression that the nth term should satisfy,\n        formulated in terms of 'an' which signifies the nth term.\n    Returns:\n    int or None\n        The minimum term number 'n' where the condition holds, or None if no such term exists.\n    Example:\n    >>> from sympy import symbols, Ge\n    >>> an = symbols('an')\n    >>> find_min_n_geometric_inequality(2, 3, Ge(an, 500))\n    5\n    \"\"\"\n    an = symbols('an')\n    nth_term_expr = a * (r ** (symbols('n') - 1))\n    inequality = expression.subs(an, nth_term_expr)\n    result = solve(inequality, symbols('n'))\n    if result:\n        return min([int(n.evalf()) for n in result if n.is_real])\n    return None"], ["def sum_of_first_n_integers(n):\n    \"\"\"\n    Calculates the sum of the first n positive integers.\n    Parameters\n    ----------\n    n : int\n        The number of the last term in the sequence of positive integers starting from 1.\n    \n    Returns\n    -------\n    int\n        The sum of the first n positive integers calculated using the formula n(n + 1) / 2.\n    \n    Examples\n    --------\n    >>> sum_of_first_n_integers(10)\n    55\n    >>> sum_of_first_n_integers(100)\n    5050\n    \"\"\"\n    return n * (n + 1) // 2", "def sum_of_first_n_integers(n):\n    \"\"\"\n    Compute the sum of the first `n` positive integers using the formula S = n(n + 1)/2.\n    \n    Parameters:\n    - n (int): The last integer in the desired summation. Must be a positive integer.\n    \n    Returns:\n    - int: The sum of the first `n` integers.\n    \n    Examples:\n    - sum_of_first_n_integers(5) returns 15, because 1 + 2 + 3 + 4 + 5 = 15.\n    - sum_of_first_n_integers(100) returns 5050, following the mathematical formula.\n    \"\"\"\n    if n < 1 or not isinstance(n, int):\n        raise ValueError(\"n must be a positive integer\")\n    return n * (n + 1) // 2  # Use integer division for safety", "def sum_of_first_n_integers(n):\n    \"\"\"\n    Calculate the sum of the first n positive integers.\n    Parameters:\n    n (int): The number of terms to sum. Must be a non-negative integer.\n    Returns:\n    int: The sum of the first n positive integers.\n    Examples:\n    >>> sum_of_first_n_intellites(5)\n    15\n    >>> sum_of_first_n_integers(100)\n    5050\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The number of terms, n, must be a non-negative integer.\")\n    return n * (n + 1) // 2"], ["def geometric_common_ratio(terms):\n    \"\"\"\n    Determine the common ratio of a geometric sequence given at least two terms.\n    Parameters:\n    terms (list of int/float): A list containing at least two terms of the geometric sequence in order.\n    Returns:\n    float: The common ratio of the sequence.\n    Example:\n    >>> geometric_common_ratio([2, 6, 18])\n    3.0\n    \"\"\"\n    if len(terms) < 2:\n        raise ValueError(\"At least two terms are required to determine the common ratio.\")\n    return terms[1] / terms[0]"]]}