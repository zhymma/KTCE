{"Sine and Cosine Functions": [["def simplify_trig_expression(exp):\n    \"\"\"\n    Use sympy to simplify the given trigonometric expression.\n    \n    Parameters\n    ----------\n    exp : sympy expression\n        The trigonometric expression to be simplified.\n    Returns\n    -------\n    simplified_expression: sympy expression\n        The simplified form of the input expression.\n    Example\n    --------\n    >> from sympy import symbols, cos, sin\n    >> x = symbols('x')\n    >> expression = sin(x)**2 + cos(x)**2\n    >> simplify_trig_expression(expression)\n    \"\"\"\n    from sympy import simplify\n    simplified_expression = simplify(exp)\n    return simplified_expression", "def transform_trig_identity(exp, transformation):\n    \"\"\"\n    Use sympy to perform the specified transformation on a trigonometric identity.\n    Parameters\n    ----------\n    exp : sympy expression\n        The trigonometric identity to be transformed.\n    transformation : sympy function\n        The sympy function specifying the transformation to be performed.\n    Returns\n    -------\n    transformed_expression : sympy expression\n        The result of the transformation.\n    Example\n    --------\n    >> from sympy import symbols, cos, sin, trigsimp\n    >> x = symbols('x')\n    >> expression = 1 + sin(x)**2\n    >> transform_trig_identity(expression, trigsimp) # Performing trigonometric simplification\n    \"\"\"\n    transformed_expression = transformation(exp)\n    return transformed_expression"], ["def sine(angle: float, radians: bool = True) -> float:\n    \"\"\"\n    Calculate the sine of an angle provided in radians or degrees.\n    Parameters:\n    angle (float): The angle.\n    radians (bool): If True, the angle is in radians; if False, it's in degrees.\n    Returns:\n    float: The sine of the angle.\n    \"\"\"\n    if not radians:\n        angle = to_radians(angle)\n    return math.sin(angle)", "def cosine(angle: float, radians: bool = True) -> float:\n    \"\"\"\n    Calculate the cosine of an angle provided in radians or degrees.\n    Parameters:\n    angle (float): The angle.\n    radians (bool): If True, the angle is in radians; if False, it's in degrees.\n    Returns:\n    float: The cosine of the angle.\n    \"\"\"\n    if not radians:\n        angle = to_radians(angle)\n    return math.cos(angle)", "def sine(angle, degrees=True):\n    \"\"\"\n    Calculate the sine of an angle.\n    Parameters:\n    - angle (float): The angle for which the sine is to be calculated.\n    - degrees (bool): If True, the angle is given in degrees, otherwise in radians.\n    Returns:\n    - float: The sine of the angle.\n    Examples:\n    >>> sine(30)\n    0.5\n    >>> sine(np.pi/2, degrees=False)\n    1.0\n    \"\"\"\n    if degrees:\n        angle = np.radians(angle)\n    return np.sin(angle)", "def cosine(angle, degrees=True):\n    \"\"\"\n    Calculate the cosine of an angle.\n    Parameters:\n    - angle (float): The angle for which the cosine is to be calculated.\n    - degrees (bool): If True, the angle is given in degrees, otherwise in radians.\n    Returns:\n    - float: The cosine of the angle.\n    Examples:\n    >>> cosine(60)\n    0.5\n    >>> cosine(np.pi, degrees=False)\n    -1.0\n    \"\"\"\n    if degrees:\n        angle = np.radians(angle)\n    return np.cos(angle)"], ["def evaluate_sin_cos(angle, in_degrees=True):\n    \"\"\"\n    This function takes an angle and returns its sine and cosine.\n    \n    Parameters\n    ----------\n    angle : float\n        The angle, measured in degrees by default, to compute the sine and cosine of.\n    in_degrees : bool, optional\n        A flag that specifies whether the input angle is in degrees. Default is True.\n        \n    Returns\n    -------\n    tuple\n        The sine and cosine of the angle as a tuple (sin, cos).\n    \"\"\"\n    \n    if in_degrees:\n        angle = math.radians(angle)\n        \n    sin_val = math.sin(angle)\n    cos_val = math.cos(angle)\n    \n    return sin_val, cos_val", "def trigonometric_values(angle, in_degrees=True):\n    \"\"\"\n    Calculate sine, cosine and tangent for a given angle.\n    \n    Parameters:\n        angle (float): Angle for which trigonometric values are to be calculated.\n        in_degrees (bool): Specify if the angle is in degrees (True) or radians (False).\n    \n    Returns:\n        tuple: Sine, cosine and tangent values of the given angle.\n    \n    Examples:\n        >>> trigonometric_values(45)\n        (0.7071067811865476, 0.7071067811865476, 1.0)\n        \n        >>> trigonometric_values(np.pi/4, in_degrees=False)\n        (0.7071067811865475, 0.7071067811865476, 1.0)\n    \"\"\"\n    if in_degrees:\n        angle = np.radians(angle)\n    sin_val = np.sin(angle)\n    cos_val = np.cos(angle)\n    tan_val = np.tan(angle)\n    \n    return sin_val, cos_val, tan_val"], ["def arcsin(value: float) -> float:\n    \"\"\"\n    Compute the arcsine of a value, result is in radians.\n    Parameters:\n    value (float): The sine value (-1 to 1).\n    Returns:\n    float: The angle in radians whose sine is the given value.\n    \"\"\"\n    return math.asin(value)", "def arccos(value: float) -> float:\n    \"\"\"\n    Compute the arccosine of a value, result is in radians.\n    Parameters:\n    value (float): The cosine value (-1 to 1).\n    Returns:\n    float: The angle in radians whose cosine is the given value.\n    \"\"\"\n    return math.acos(value)"], ["def calculate_side_given_angle(angle, side, function):\n    \"\"\"\n    Calculate the length of a side in a right triangle given the length of\n    another side and the sine or cosine of an angle.\n    Parameters:\n    angle (float): The angle in radians.\n    side (float): The length of a known side.\n    function (str): The function to use (\"sine\" or \"cosine\").\n    Returns:\n    float: The length of the other side.\n    \"\"\"\n    import math\n    if function == \"sine\":\n        return side / math.sin(angle)\n    if function == \"cosine\":\n        return side / math.cos(angle)"], ["def to_radians(degrees: float) -> float:\n    \"\"\"\n    Convert an angle from degrees to radians.\n    Parameters:\n    degrees (float): Angle in degrees.\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)", "def to_degrees(radians: float) -> float:\n    \"\"\"\n    Convert an angle from radians to degrees.\n    Parameters:\n    radians (float): Angle in radians.\n    Returns:\n    float: Angle in degrees.\n    \"\"\"\n    return math.degrees(radians)"], ["def calculate_angle_given_ratio(ratio, function):\n    \"\"\"\n    Calculate an angle given the sine or cosine ratio.\n    Parameters:\n    ratio (float): The sine or cosine ratio.\n    function (str): The function to use (\"sine\" or \"cosine\").\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    import math\n    if function == \"sine\":\n        return math.asin(ratio)\n    if function == \"cosine\":\n        return math.acos(ratio)"], ["def calculate_sine_cosine(opposite, adjacent, hypotenuse):\n    \"\"\"\n    Calculate the sine and cosine of an angle in a right triangle.\n    Parameters:\n    opposite (float): The length of the side opposite the angle.\n    adjacent (float): The length of the side adjacent to the angle.\n    hypotenuse (float): The length of the hypotenuse.\n    Returns:\n    dict: A dictionary with the sine and cosine of the angle.\n    \"\"\"\n    import math\n    sine = opposite / hypotenuse\n    cosine = adjacent / hypotenuse\n    return {\"sine\": sine, \"cosine\": cosine}", "def calculate_hypotenuse(opposite, adjacent):\n    \"\"\"\n    Calculate the length of the hypotenuse in a right triangle given the length \n    of the other two sides using the Pythagorean theorem.\n    Parameters:\n    opposite (float): The length of the side opposite the right angle.\n    adjacent (float): The length of the side adjacent to the right angle.\n    Returns:\n    float: The length of the hypotenuse.\n    \"\"\"\n    import math\n    return math.sqrt(opposite**2 + adjacent**2)"], ["def calculate_triangle_area(base, height):\n    \"\"\"\n    Calculate the area of a triangle given the base and height.\n    Parameters:\n    base (float): The length of the base of the triangle.\n    height (float): The length of the height of the triangle.\n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    return 0.5 * base * height"], ["def trigonometric_evaluation(angle, function='sin', unit='degrees'):\n    \"\"\"\n    Evaluate trigonometric functions for a given angle.\n    Parameters:\n        angle (float or array-like): The angle(s) for which the trigonometric function is evaluated.\n        function (str): The trigonometric function to be evaluated, 'sin' or 'cos'.\n        unit (str): The unit of the input angle, 'degrees' or 'radians'.\n    Returns:\n        float or ndarray: The result of the trigonometric function.\n    \n    Example:\n        >>> trigonometric_evaluation(90, function='sin', unit='degrees')\n        1.0\n        >>> trigonometric_evaluation(np.pi/2, function='cos', unit='radians')\n        6.123233995736766e-17  # effectively 0 due to floating-point precision\n    \"\"\"\n    if unit == 'degrees':\n        angle = np.radians(angle)\n    \n    if function == 'sin':\n        return np.sin(angle)\n    elif function == 'cos':\n        return np.cos(angle)\n    else:\n        raise ValueError(\"Unsupported function specified. Use 'sin' or 'cos'.\")"], ["class TrigonometricSolver:\n    \"\"\"\n    A class dedicated to solving equations involving trigonometric functions leveraging the TrigonometryUtilities.\n    \"\"\"\n    @staticmethod\n    def solve_trig_equation(equation, variable, domain):\n        \"\"\"\n        Solve a trigonometric equation over a specified domain.\n        Parameters:\n        equation (function): A function representing the trigonometric equation.\n        variable (np.ndarray): The variable array over which to solve the equation.\n        domain (tuple): A tuple defining the lower and upper bounds of the domain.\n        Returns:\n        np.ndarray: The roots of the equation within the given domain.\n        \"\"\"\n        from scipy.optimize import fsolve\n        # Define a grid within the domain\n        grid = np.linspace(*domain, 1000)\n        # Evaluate the equation on the grid\n        values = equation(grid)\n        # Searching for zero-crossings by checking the change of sign\n        sign_changes = np.where(np.diff(np.sign(values)))[0]\n        roots = []\n        for index in sign_selection:\n            # Using fsolve to refine the root estimate\n            root = fsolve(equation, grid[index])\n            if domain[0] <= root <= domain[1]:  # Check if the root is within the domain\n                roots.append(root)\n        return np.array(roots).flatten()"], ["def evaluate_trig_function(fn, value):\n    \"\"\"\n    Evaluate trigonometric function at a specific value.\n    Parameters\n    ----------\n    fn : function\n        The trigonometric function; could be sin, cos, etc.\n    value : number\n        The value at which to evaluate the function.\n    Returns\n    -------\n    result : float\n        The result of the function evaluation.\n    Example\n    --------\n    >> evaluate_trig_function(np.sin, np.pi/2)\n    \"\"\"\n    result = fn(value)\n    return result"], ["def solve_sin_cos_equations(eq):\n    \"\"\"\n    Use sympy libray to solve the trigonometric equations.\n    Enjoy the usage of symbolic computation power.\n    \n    Parameters\n    ----------\n    eq : sympy expression\n        The trigonometric equation to be solved.\n    Returns\n    -------\n    solution: list\n        The solutions to the given equation.\n    Example\n    --------\n    >> from sympy import symbols, Eq, cos, sin\n    >> x = symbols('x')\n    >> equation = Eq(sin(x)**2 + cos(x)**2, 1)\n    >> solve_sin_cos_equations(equation)\n    \"\"\"\n    from sympy import solveset, S\n    solution = solveset(eq, domain=S.Reals)\n    return solution"], ["def evaluate_trig_expression(expr, value_dict):\n    \"\"\"\n    Evaluates a trigonometric expression based on given angle values.\n    \n    Parameters:\n    - expr (str): The trigonometric expression to evaluate (e.g., 'sin(x) + cos(y)').\n    - value_dict (dict): A dictionary with variable-angle mappings in radians (e.g., {'x': np.pi/4, 'y': np.pi/3}).\n    \n    Returns:\n    float: Evaluated result of the expression.\n    Examples:\n    >>> evaluate_trig_expression('sin(x) + cos(y)', {'x': np.pi/4, 'y': np.pi/3})\n    1.3660254037844386\n    \"\"\"\n    # Use np functions for trigonometric calculations\n    for var, value in value_dict.items():\n        exec(f\"{var} = {value}\")\n    return eval(expr, {'sin': np.sin, 'cos': np.cos, 'tan': np.tan, '__builtins__': None}, locals())"], ["def transform_trig_identity(expr, identity):\n    \"\"\"\n    Transforms a trigonometric expression by applying a chosen trigonometric identity.\n    \n    Parameters:\n    - expr (str): The initial trigonometric expression.\n    - identity (str): The identity to apply, e.g., 'Pythagorean' for 'sin^2(x) + cos^2(x) = 1'.\n    \n    Returns:\n    str: The transformed trigonometric expression.\n    Examples:\n    >>> transform_trig_identity('sin(x)**2 + cos(x)**2', 'Pythagorean')\n    '1'\n    \"\"\"\n    if identity == 'Pythagorean':\n        expr = expr.replace('sin(x)**2 + cos(x)**2', '1')\n    return expr"], ["def solve_trigonometric_equation(eq, variable):\n    \"\"\"\n    Solves a trigonometric equation for a given variable.\n    \n    Parameters:\n    - eq (str): The trigonometric equation to solve (e.g., 'sin(x) + cos(x) = 0').\n    - variable (str): The variable to solve for (e.g., 'x').\n    \n    Returns:\n    list: Solutions of the equation.\n    Examples:\n    >>> solve_trigonometric_equation('sin(x) + cos(x) = 0', 'x')\n    [3*pi/4, 7*pi/4]\n    \"\"\"\n    x = symbols(variable)\n    equation = eval(eq.replace('sin', 'sin(x)').replace('cos', 'cos(x)').replace('=', '-(')+')', {'sin': sin, 'cos': cos, 'pi': np.pi})\n    return solve(equation, x)"], ["def triangle_solver(a=None, b=None, c=None, A=None, B=None, C=None):\n    \"\"\"\n    Solve a triangle's missing sides and angles using known values.\n    Parameters can be side (lowercase) or angle (uppercase, in degrees).\n    At least three parameters with at least one side must be known, with at least one opposite side-angle pair.\n    \n    Parameters:\n        a, b, c (float): sides of the triangle\n        A, B, C (float): angles opposite the sides (in degrees)\n    \n    Returns:\n        dict: Dictionary of all triangle sides and angles\n    \n    Examples:\n        >>> triangle_solver(a=5, B=45, C=45)\n        {'a': 5, 'b': 5.0, 'c': 5.0, 'A': 90.0, 'B': 45, 'C': 45}\n        \n        >>> triangle_solver(a=3, b=4, A=53.13)\n        {'a': 3, 'b': 4, 'c': 5.0, 'A': 53.13, 'B': 36.87, 'C': 90.0}\n    \"\"\"\n    sides = {'a': a, 'b': b, 'c': c}\n    angles = {'A': A, 'B': B, 'C': C}\n    \n    # Converting all know angles to radians for computation\n    for k, v in angles.items():\n        if v is not null:\n            angles[k] = np.radians(v)\n    \n    if A is not None and a is not None:\n        if B is not None:\n            angles['C'] = np.pi - (angles['A'] + angles['B'])\n            sides['c'] = (sides['a'] * np.sin(angles['C'])) / np.sin(angles['A'])\n        elif C is not None:\n            angles['B'] = np.pi - (angles['A'] + angles['C'])\n            sides['b'] = (sides['a'] * np.sin(angles['B'])) / np.sin(angles['A'])\n            \n    # Convert all angles back to degrees for output\n    for k, v in angles.items():\n        angles[k] = np.degrees(v)\n        \n    return {**sides, **angles}"], ["def solve_right_triangle(opposite=None, adjacent=None, hypotenuse=None, angle=None, degrees=True):\n    \"\"\"\n    Solve missing sides and angles in a right triangle given any of the sides or one angle.\n    Parameters:\n    - opposite (float): Length of the side opposite the angle.\n    - adjacent (float): Length of the side adjacent to the angle.\n    - hypotenuse (float): Length of the hypotenuse.\n    - angle (float): Angle adjacent to the opposite side.\n    - degrees (bool): If True, the angle is provided in degrees.\n    Returns:\n    - dict: Dictionary containing calculated values of sides and the angle.\n    \n    Examples:\n    >>> solve_right_triangle(opposite=3, adjacent=4)\n    {'hypotenuse': 5.0, 'angle': 36.86989764584402}\n    >>> solve_right_triangle(hypotenuse=5, angle=30)\n    {'opposite': 2.5, 'adjacent': 4.330127018922194}\n    \"\"\"\n    results = {}\n    if angle is not None and opposite is not None and hypotenuse is None:\n        hypotenuse = opposite / sine(angle, degrees)\n        results['hypotenuse'] = hypotenuse\n    if angle is not None and adjacent is not None and hypotenuse is None:\n        hypotenuse = adjacent / cosine(angle, degrees)\n        results['hypotenuse'] = hypotenuse\n    if hypotenuse is not None and opposite is not None and adjacent is None:\n        adjacent = sqrt(hypotenuse**2 - opposite**2)\n        results['adjacent'] = adjacent\n    if angle is not None and degrees is not None and opposite is None and hypotenuse is not None:\n        opposite = sine(angle, degrees) * hypotenuse\n        results['opposite'] = opposite\n    if angle is None and opposite is not None and hypotenuse is not None:\n        angle = np.degrees(np.arcsin(opposite / hypotenuse))\n        results['angle'] = angle\n    if angle is None and adjacent is not None and hypotenuse is not None:\n        angle = np.degrees(np.arccos(adjacent / hypotenuse))\n        results['angle'] = angle\n    # Populate missing values based on what was calculated\n    if 'hypotenuse' in results and 'opposite' not in results and adjacent is not None:\n        results['opposite'] = sqrt(results['hypotenuse']**2 - adjacent**2)\n    if 'hypotenuse' in results and 'adjacent' not in results and opposite is not None:\n        results['adjacent'] = sqrt(results['hypotenuse']**ero_ek** - opposite**2)\n    return results"], ["def convert_angle(angle, from_unit='degrees', to_unit='radians'):\n    \"\"\"\n    Convert an angle from one unit (degrees or radians) to another.\n    Parameters:\n        angle (float): The angle to convert.\n        from_unit (str): The current unit of the angle ('degrees' or 'radians').\n        to_unit (str): The target unit for the conversion ('degrees' or 'radians').\n    Returns:\n        float: The angle in the target unit.\n    Example:\n        >>> convert_angle(180, from_unit='degrees', to_unit='radians')\n        3.141592653589793\n        >>> convert_angle(np.pi, from_unit='radians', to_unit='degrees')\n        180.0\n    \"\"\"\n    if from_unit == 'degrees' and to_unit == 'radians':\n        return np.radians(angle)\n    elif from_unit == 'radians' and to_unit == 'degrees':\n        return np.degrees(angle)\n    else:\n        raise ValueError(\"Invalid conversion units provided. Use 'degrees' or 'radians'.\")"], ["class TrigonometryUtilities:\n    \"\"\"\n    A utility class containing methods and static functions for computing and manipulating trigonometric functions.\n    \"\"\"\n    @staticmethod\n    def pythagorean_identity(theta):\n        \"\"\"\n        Verify the Pythagorean identity sin^2(theta) + cos^2(theta) = 1 for a given angle.\n        Parameters:\n        theta (float or np.ndarray): The angle in radians.\n        Returns:\n        bool or np.ndarray: True if the identity holds within numerical precision. For array inputs, an array of bools.\n        \"\"\"\n        return np.isclose(np.sin(theta)**2 + np.cos(theta)**2, 1)\n    @staticmethod\n    def sine_cosine_transform(theta, transformation='cosine_to_sine'):\n        \"\"\"\n        Transform cosine to sine and vice versa using the relationships sin(theta) = cos(pi/2 - theta) and cos(theta) = sin(pi/2 - theta).\n        Parameters:\n        theta (float): The angle in radians.\n        transformation (str): 'cosine_to_sine' to convert cos(theta) to sin(theta), 'sine_to_cosine' to do the reverse.\n        Returns:\n        float: The result of the transformation.\n        \"\"\"\n        if transformation == 'cosine_to_sine':\n            return np.cos(np.pi/2 - theta)\n        elif transformation == 'sine_to_cosine':\n            return np.sin(np.pi/2 - theta)\n        else:\n            raise ValueError(\"Invalid transformation option. Choose 'cosine_to_sine' or 'sine_to_cosine'.\")\n    @staticmethod\n    def angle_addition_formula(theta1, theta2, function='sine'):\n        \"\"\"\n        Compute the sine or cosine of a sum of two angles using the angle addition formulae.\n        Parameters:\n        theta1 (float): First angle in radians.\n        theta2 (float): Second angle in radians.\n        function (str): 'sine' or 'cosine' to specify which function to apply.\n        Returns:\n        float: Result of the sine or cosine of the angle addition.\n        \"\"\"\n        if function == 'sine':\n            return np.sin(theta1) * np.cos(theta2) + np.cos(theta1) * np.sin(theta2)\n        elif function == 'cosine':\n            return np.cos(theta1) * np.cos(theta2) - np.sin(theta1) * np.sin(theta2)\n        else:\n            raise ValueError(\"Invalid function option. Choose 'sine' or 'cosine'.\")\n    @staticmethod\n    def double_angle_formula(theta, function='sine'):\n        \"\"\"\n        Compute the sine or cosine using double angle formulae.\n        Parameters:\n        theta (float): The angle in radians.\n        function (str): 'sine' or 'cosine'.\n        Returns:\n        float: Result of the sine or cosine double angle.\n        \"\"\"\n        if function == 'sine':\n            return 2 * np.sin(theta) * np.cos(theta)\n        elif function == 'cosine':\n            return np.cos(theta)**2 - np.sin(theta)**2\n        else:\n            raise ValueError(\"Invalid function option. Choose 'sine' or 'cosine'.\")"], ["def angle_addition(angle1, angle2, function=math.sin, in_degrees=True):\n    \"\"\"\n    This function takes two angles and a trigonometric function (sin or cos), \n    and returns the value that results from applying the angle addition formula.\n    \n    Parameters\n    ----------\n    angle1 : float\n        The first angle, measured in degrees by default.\n    angle2 : float\n        The second angle, measured in degrees by default.\n    function : {math.sin, math.cos}, optional\n        The trigonometric function to use in the angle addition formula - either the sine or cosine. Default is math.sin. \n    in_degrees : bool, optional\n        A flag that specifies whether the input angles are in degrees. Default is True.\n        \n    Returns\n    -------\n    float\n        The value that results from applying the angle addition formula.\n    \"\"\"\n    \n    if in_degrees:\n        angle1 = math.radians(angle1)\n        angle2 = math.radians(angle2)\n        \n    if function == math.sin:\n        # sin(a+b) = sin(a)cos(b) + cos(a)sin(b)\n        result = math.sin(angle1) * math.cos(angle2) + math.cos(angle1) * math.sin(angle2)\n    elif function == math.cos:\n        # cos(a+b) = cos(a)cos(b) - sin(a)sin(b)\n        result = math.cos(angle1) * math.cos(angle2) - math.sin(angle1) * math.sin(angle2)\n    \n    return result"]], "Sine Function": [["def sine_of_angle(angle, in_degrees=True):\n    \"\"\"\n    Compute the sine of a given angle, adjustable between degrees and radians.\n    Parameters:\n        angle (float): The angle for which sine is to be calculated.\n        in_degrees (bool): Set to True if the provided angle is in degrees, False if in radians.\n    Returns:\n        float: Sine of the given angle.\n    \"\"\"\n    if in_degrees:\n        angle = degrees_to_radians(angle)\n    return np.sin(angle)", "def sine_value(angle, in_degrees=True):\n    \"\"\"\n    Computes the sine of a given angle.\n    Parameters:\n    angle : float or numpy array\n        The angle for which to compute the sine, can be a single value or an array of values.\n    in_degrees : bool, optional\n        If True, the angle is assumed to be in degrees. If False, the angle is in radians.\n    \n    Returns:\n    float or numpy array\n        The sine of the provided angle(s).\n        \n    Examples:\n    >>> sine_value(30)  # Sine of 30 degrees\n    0.5\n    >>> sine_value(np.pi/2, in_degrees=False)  # Sine of 90 degrees (π/2 radians)\n    1.0\n    \"\"\"\n    if in_degrees:\n        return np.sin(np.deg2rad(angle))\n    else:\n        return np.sin(angle)", "def arcsine_value(sine, in_degrees=True):\n    \"\"\"\n    Computes the angle from its sine value using arcsin (inverse sine).\n    Parameters:\n    sine : float or numpy array\n        The sine value for which to compute the angle.\n    in_degrees : bool, optional\n        If True, the result is returned in degrees. If False, the result is in radians.\n    \n    Returns:\n    float or numpy array\n        The angle(s) corresponding to the given sine value(s).\n    \n    Examples:\n    >>> arcsine_value(0.5)  # Arcsine of 0.5 in degrees\n    30.0\n    >>> arcsine_value(1.0, in_degrees=False)  # Arcsine of 1 in radians\n    1.5707963267948966\n    \"\"\"\n    angle_rad = np.arcsin(sine)\n    if in_degrees:\n        return np.rad2deg(angle_rad)\n    else:\n        return angle_rad", "def compute_sine(angle, in_degrees=True):\n    \"\"\"\n    Compute the sine of an angle considering the periodicity, taking into\n    account whether the input is in degrees or radians.\n    Parameters:\n    angle : float or np.array\n        The angle(s) for which to compute the sine. Can be a single value or an array of values.\n    in_degrees : bool, optional\n        Whether the provided angle is in degrees (default is True). If False, the angle is interpreted as radians.\n    Returns:\n    float or np.array\n        The sine of the provided angle(s).\n    Examples:\n    >>> compute_sine(90)\n    1.0\n    >>> compute_sine(np.pi/2, in_degrees=False)\n    1.0\n    >>> compute_sine([0, 30, 45, 90])\n    [0.0, 0.5, 0.70710678, 1.0]\n    \"\"\"\n    if in_degrees:\n        angle = np.deg2rad(angle)  # Convert degrees to radians\n    return np.sin(angle)", "def sine_of_angle(angle, unit='radians'):\n    \"\"\"\n    Compute the sine of a given angle with the option to specify the angle's unit.\n    Parameters:\n    - angle (float): The angle for which the sine value is calculated.\n    - unit (str): The unit of the angle ('radians' or 'degrees'). Default is 'radians'.\n    Returns:\n    - float: Sine of the given angle.\n    Examples:\n    >>> sine_of_angle(np.pi / 2)\n    1.0\n    >>> sine_of_angle(90, unit='degrees')\n    1.0\n    \"\"\"\n    if unit == 'degrees':\n        angle = np.deg2rad(angle)\n    return np.sin(angle)", "def calculate_sine(angle, radians=False):\n    \"\"\"\n    Calculate the sine of a given angle.\n    Parameters:\n    angle (float): The angle for which the sine value needs to be calculated.\n    radians (bool): If True, the angle is assumed to be in radians. If False, in degrees.\n    Returns:\n    float: Sine of the given angle.\n    Examples:\n    >>> calculate_sine(30, radians=False)\n    0.49999999999999994\n    >>> calculate_sine(np.pi/2, radians=True)\n    1.0\n    \"\"\"\n    if not radians:\n        angle = np.radians(angle)\n    return np.sin(angle)", "def sine_value(angle_degrees):\n    \"\"\"\n    Calculate the sine of an angle given in degrees.\n    Parameters:\n    - angle_degrees (float): The angle in degrees for which the sine value is needed.\n    Returns:\n    - float: The sine of the given angle.\n    Examples:\n    >>> sine_value(30)\n    0.5\n    >>> sine_value(90)\n    1.0\n    >>> sine_value(270)\n    -1.0\n    \"\"\"\n    radians = math.radians(angle_degrees)\n    return math.sin(radians)", "def compute_sine(angle_degrees):\n    \"\"\"\n    Computes the sine of an angle given in degrees.\n    Parameters:\n        angle_degrees (float): The angle in degrees for which the sine has to be computed.\n    Returns:\n        float: The sine of the given angle.\n    Examples:\n        >>> compute_sine(30)\n        0.5\n        >>> compute_sine(90)\n        1.0\n        >>> compute_sine(45)\n        0.7071067811865476\n    \"\"\"\n    radian = math.radians(angle_degrees)  # Convert degrees to radians\n    return math.sin(radian)", "def compute_sine_value(angle, in_degrees=True):\n    \"\"\"\n    Computes the sine of an angle provided either in degrees or radians.\n    Parameters:\n    - angle: float\n        The angle for which to compute the sine.\n    - in_degrees: bool, optional\n        Specifies if the provided angle is in degrees. Default is True.\n    \n    Returns:\n    - float\n        The sine of the provided angle.\n    Examples:\n    >>> compute_sine_value(30)\n    0.5\n    >>> compute_sine_value(np.pi/2, in_degrees=False)\n    1.0\n    \"\"\"\n    if in_degrees:\n        return np.sin(np.deg2rad(angle))\n    else:\n        return np.sin(angle)", "def evaluate_sine(angle, degrees=False):\n    \"\"\"\n    Evaluate the sine of an angle.\n    Parameters:\n    - angle: float\n        The angle for which the sine value is to be calculated.\n    - degrees: bool, optional\n        Whether the angle is in degrees or radians. Default is radians.\n    Returns:\n    - float\n        The sine of the given angle.\n    Examples:\n    >>> evaluate_sine(np.pi/2)\n    1.0\n    >>> evaluate_sine(90, degrees=True)\n    1.0\n    \"\"\"\n    if degrees:\n        angle = np.radians(angle)\n    return np.sin(angle)", "def calculate_sine(angle_radians):\n    \"\"\"\n    Calculate the sine of an angle provided in radians.\n    \n    Parameters:\n    - angle_radians : float or np.ndarray\n        The angle(s) in radians for which to compute the sine. Can be a single float or a numpy array of floats.\n    \n    Returns:\n    - np.ndarray or float\n        The sine of the provided angle(s). Returns a single float if the input is a single float, or a numpy array of the sine values if the input is an array.\n    \n    Examples:\n    --------\n    >>> calculate_sine(np.pi/2)\n    1.0\n    \n    >>> calculate_sine(np.array([0, np.pi/2, np.pi]))\n    array([ 0.0000000e+00,  1.0000000e+00, 1.2246468e-16])  # Approximately [0, 1, 0]\n    \"\"\"\n    return np.sin(angle_radians)", "def calculate_sine(angle, unit='degrees'):\n    \"\"\"\n    Calculate the sine of an angle.\n    Parameters\n    ----------\n    angle : float\n        The angle for which to calculate the sine, can be in degrees or radians.\n    unit : str, optional\n        The unit of the angle ('degrees' or 'radians'). Default is 'degrees'.\n    Returns\n    -------\n    float\n        The sine of the provided angle.\n    Examples\n    --------\n    >>> calculate_sine(90)\n    1.0\n    >>> calculate_sine(np.pi/2, unit='radians')\n    1.0\n    \"\"\"\n    if unit == 'degrees':\n        angle = np.radians(angle)\n    return np.sin(angle)", "def calculate_sine(angle, in_degrees=True):\n    \"\"\"\n    Calculate the sine of an angle.\n    Parameters:\n    angle : float\n        The angle for which to calculate the sine.\n    in_degrees : bool, optional\n        If True, angle is provided in degrees, otherwise in radians.\n    Returns:\n    float\n        The sine of the given angle.\n    Examples:\n    >>> calculate_sine(90)\n    1.0\n    >>> calculate_sine(math.pi/2, in_degrees=False)\n    1.0\n    \"\"\"\n    if in_degrees:\n        angle = math.radians(angle)\n    return math.sin(angle)", "def sine_of_angle(angle, unit='degrees'):\n    \"\"\"\n    Calculate the sine of an angle provided in either degrees or radians.\n    \n    Parameters:\n        angle (float): The angle for which to compute the sine.\n        unit (str): The unit of the angle ('degrees' or 'radians'). Default is 'degrees'.\n    \n    Returns:\n        float: The sine of the angle.\n    \n    Examples:\n        >>> sine_of_angle(30)\n        0.5\n        >>> sine_of_angle(math.pi/2, unit='radians')\n        1.0\n    \"\"\"\n    import math\n    if unit == 'radians':\n        return math.sin(angle)\n    elif unit == 'degrees':\n        angle_rad = degrees_to_radians(angle)\n        return math.sin(angle_alpha_rad)\n    else:\n        raise ValueError(\"Unit must be 'degrees' or 'radians'\")", "def sine_of_angle(angle, degree=False):\n    \"\"\"\n    Compute the sine of a given angle.\n    Parameters:\n    - angle: float\n      The angle for which to compute the sine.\n    - degree: bool, optional\n      Whether the angle is in degrees or radians.\n      Default is False (angle is in radians).\n    Returns:\n    - float\n      The sine of the angle.\n    Examples:\n    >>> sine_of_angle(math.pi/2)\n    1.0\n    >>> sine_of_angle(90, degree=True)\n    1.0\n    \"\"\"\n    if degree:\n        angle = math.radians(angle)\n    return math.sin(angle)", "def compute_sine(angle, unit='radians'):\n    \"\"\"\n    Compute the sine of a provided angle.\n    Parameters\n    ----------\n    angle : float or array-like\n        The angle for which to compute the sine. Can be a single value or an array of values.\n    unit : str, optional\n        The unit of the angle: either 'degrees' or 'radians'. Default is 'radians'.\n    Returns\n    -------\n    float or ndarray\n        The sine of the given angle. Returns a single value if `angle` is a float, or an array of values if `angle` is array-like.\n    Examples\n    --------\n    >>> compute_sine(np.pi/2)\n    1.0\n    >>> compute_sine(90, unit='degrees')\n    1.0\n    >>> compute_sine([0, np.pi/2, np.pi, 3*np.pi/2], unit='radians')\n    [0.0, 1.0, 0.0, -1.0]\n    \"\"\"\n    if unit == 'degrees':\n        angle = np.deg2rad(angle)\n    return np.sin(angle)"], ["def plot_sine(start=0, stop=2*np.pi, num_points=1000):\n    \"\"\"\n    Plot the sine function over a specified range.\n    Parameters:\n    start (float): The start of the angle range in radians (default is 0).\n    stop (float): The end of the angle range in radians (default is 2*np.pi).\n    num_points (int): The number of points to plot between start and stop (default is 1000).\n    \n    Returns:\n    None: The function plots the graph and renders it.\n    Examples:\n    >>> plot_sine(0, 2*np.pi)\n    # This will plot the sine function from 0 to 2*pi\n    >>> plot_sine(0, 4*np.pi, 500)\n    # This will plot the sine function from 0 to 4*pi with 500 points\n    \"\"\"\n    x = np.linspace(start, stop, num=num_points)\n    y = np.sin(x)\n    plt.figure(figsize=(10, 5))\n    plt.plot(x, y)\n    plt.title('Sine wave')\n    plt.xlabel('Angle (radians)')\n    plt.ylabel('Sine value')\n    plt.grid(True)\n    plt.show()", "def graph_sine_function(start_radians, end_radians, num_points=500):\n    \"\"\"\n    Graph the sine function over a specified range in radians.\n    \n    Parameters:\n    - start_radians : float\n        The starting value of the range in radians.\n    - end_radians : float\n        The ending value of the range in radians.\n    - num_points : int, optional\n        The number of points to compute within the interval. Default is 500.\n    \n    Returns:\n    - None\n        This function does not return anything but displays a graph of the sine function.\n    \n    Examples:\n    --------\n    >>> graph_sine_function(0, 2 * np.pi)  # Graphs one period of sine\n    \"\"\"\n    x_values = np.linspace(start_radians, end_radians, num_points)\n    y_values = np.sin(x_values)\n    \n    plt.figure(figsize=(10, 5))\n    plt.plot(x_values, y_values, label=\"y = sin(x)\")\n    plt.title(\"Graph of the Sine Function\")\n    plt.xlabel(\"x (radians)\")\n    plt.ylabel(\"sin(x)\")\n    plt.axhline(0, color='black',linewidth=0.5)\n    plt.axvline(0, color='black',linewidth=0.5)\n    plt.grid(True)\n    plt.legend()\n    plt.show()", "def plot_sine_wave(start, end, num_points=1000, unit='radians', color='blue', linestyle='-'):\n    \"\"\"\n    Plot a sine wave from a starting angle to an ending angle.\n    Parameters\n    ----------\n    start : float\n        The starting angle for the plot.\n    end : float\n        The ending angle for the plot.\n    num_points : int, optional\n        The number of points to calculate between start and end to draw the plot. Default is 1000.\n    unit : str, optional\n        The unit of the angles: either 'degrees' or 'radians'. Default is 'radians'.\n    color : str, optional\n        The color of the sine wave line. Default is 'blue'.\n    linestyle : str, optional\n        The style of the line for the sine wave. Default is '-' which is a solid line.\n    Examples\n    --------\n    >>> plot_sine_wave(0, 2*np.pi)\n    >>> plot_sine_wave(0, 360, unit='degrees', color='red', linestyle='--')\n    \"\"\"\n    if unit == 'degrees':\n        start = np.deg2rad(start)\n        end = np.deg2rad(end)\n    \n    x = np.linspace(start, end, num_points)\n    y = np.sin(x)\n    plt.plot(x, y, color=color, linestyle=linestyle)\n    plt.title('Sine Wave')\n    plt.xlabel('Angle (radians)' if unit == 'radians' else 'Angle (degrees)')\n    plt.ylabel('Sine value')\n    plt.grid(True)\n    plt.show()"], ["def find_side_length(opposite, angle_degrees):\n    \"\"\"\n    Finds the length of the hypotenuse in a right triangle given the length of the opposite side and the angle.\n    Parameters:\n        opposite (float): Length of the side opposite to the angle.\n        angle_degrees (float): Angle in degrees adjacent to the opposite side.\n    Returns:\n        float: The length of the hypotenuse.\n    Examples:\n        >>> find_side_length(5, 30)\n        10.0\n        >>> find_side_length(6, 45)\n        8.48528137423857\n    \"\"\"\n    sine_val = compute_sine(angle_degrees)\n    return opposite / sine_val if sine_val != 0 else float('inf')", "def triangle_side_from_sine(opposite, angle, hypotenuse=None):\n    \"\"\"\n    Calculate the missing side (opposite/hypotenuse) of a right triangle using the sine function.\n    Parameters:\n    opposite : float\n        Length of the side opposite to the angle.\n    angle : float\n        Angle in degrees at which the side is opposite.\n    hypotenuse : float, optional\n        Length of the hypotenuse. If provided, calculates the opposite, otherwise, the hypotenuse.\n    Returns:\n    float\n        The length of the missing side based on the sine relation.\n    Examples:\n    >>> triangle_side_from_sine(3, 30)\n    6.0\n    >>> triangle_side_from_sine(5, angle=45, hypotenuse=5/math.sqrt(2))\n    5.0\n    \"\"\"\n    sine = calculate_sine(angle)\n    if hypotenuse is None:\n        return opposite / sine\n    else:\n        return sine * hypotenuse"], ["def enhanced_sine(angle, amplitude=1, degrees=False):\n    \"\"\"\n    Calculate the sine of an angle considering the amplitude and the unit of the angle.\n    \n    Parameters:\n        angle (float or array-like): The angle(s) for which to calculate the sine. Can be a single angle or an iterable of angles.\n        amplitude (float): The amplitude factor to apply to the sine output.\n        degrees (bool): True if the angle is provided in degrees, False if in radians.\n        \n    Returns:\n        float or array-like: The sine of the given angle(s) adjusted by the amplitude. Returns the same type as the input angle.\n    Examples:\n        >>> enhanced_sine(45, amplitude=2, degrees=True)\n        1.414213562373095\n        >>> enhanced_sine(math.pi/4, amplitude=2)\n        1.414213562373095\n    \"\"\"\n    if degrees:\n        angle = math.radians(angle)  # Convert angles from degrees to radians if necessary\n    \n    sine_value = amplitude * math.sin(angle)  # Applying the amplitude factor to the sine function\n    \n    return sine_value", "def compute_sine(angle_degrees, amplitude=1):\n    \"\"\"\n    Calculate the sine of an angle given in degrees adjusting by specified amplitude.\n    \n    Parameters:\n        angle_degrees (float): The angle in degrees for which to compute the sine.\n        amplitude (float): The amplitude factor to multiply with the sine.\n    Returns:\n        float: The sine of the angle adjusted by the given amplitude.\n    Example:\n        >>> compute_sine(90)\n        1.0\n        >>> compute_sine(90, amplitude=-1)\n        -1.0\n        >>> compute_sine(45, amplitude=2)\n        1.414213562373095\n    \"\"\"\n    # Convert degrees to radians for calculation\n    angle_radians = np.deg2rad(angle_degrees)\n    # Compute the sine and adjust by the amplitude\n    return amplitude * np.sin(angle_radians)", "def calculate_scaled_sine(angle, amplitude=1, degrees=False):\n    \"\"\"\n    Calculate the sine of a given angle with a possible amplitude scaling.\n    Parameters:\n    - angle (float): The angle at which to evaluate the sine function.\n    - amplitude (float): The amplitude scaling factor, default is 1.\n    - degrees (bool): True if the angle is in degrees, False if in radians.\n    Returns:\n    - float: The sine of the angle, scaled by the amplitude.\n    Examples:\n    >>> calculate_scaled_sine(90, amplitude=2, degrees=True)\n    2.0\n    >>> calculate_scaled_sine(np.pi/2, amplitude=3)\n    3.0\n    \"\"\"\n    if degrees:\n        angle = np.radians(angle)\n    return amplitude * np.sin(angle)"], ["def find_sine_value_at_y(y):\n    \"\"\"\n    Calculate angles whose sine value is a specific y-value within one complete rotation of the unit circle,\n    considering two standard solutions in the range [0, 360) degrees.\n    Parameters:\n        y (float): The sine value for which corresponding angles need to be found.\n    Returns:\n        list: Angles in degrees that correspond to the given sine value, within a single rotation.\n    \"\"\"\n    if y < -1 or y > 1:\n        return []  # sine values out of bounds\n    arcsin_y = math.asin(y)  # -pi/2 to pi/2\n    angle1 = radians_to_degrees(arcsin_y)\n    angle2 = 180 - angle1  # using the property sin(180° - θ) = sin(θ)\n    # Ensure angles are within [0, 360)\n    angle1 = angle1 % 360\n    angle2 = angle2 % 360\n    return [angle1, angle2]", "def find_angles_for_sine_value(y_coordinate):\n    \"\"\"\n    Find all possible angles (0 to 360 degrees) that have a specified sine value.\n    Parameters:\n    - y_coordinate (float): The sine value to find corresponding angles for.\n    Returns:\n    - list of floats: Angles (in degrees) that have the specified sine value.\n    Examples:\n    >>> find_angles_for_sine_value(0.5)\n    [30, 150]\n    >>> find_angles_for_sine_value(1)\n    [90]\n    >>> find_angles_for_sine_value(-1)\n    [270]\n    \"\"\"\n    angles = []\n    for angle in range(0, 361):  # A more precise approach might involve numerical methods or deeper analysis.\n        if np.isclose(sine_value(angle), y_coordinate, atol=1e-10):\n            angles.append(angle)\n    return angles"], ["def special_sine_values(angle):\n    \"\"\"\n    Return the sine of special angles (0°, 30°, 45°, 60°, 90°, and their co-terminal angles) directly using known values.\n    \n    Parameters:\n        angle (float): The angle in degrees.\n        \n    Returns:\n        float or None: The sine of the angle if it is a special known angle, otherwise None.\n    \"\"\"\n    special_values = {\n        0: 0, 30: 0.5, 45: math.sqrt(2)/2, 60: math.sqrt(3)/2, 90: 1,\n        180: 0, 270: -1, 360: 0\n    }\n    for a, v in special_values.items():\n        if angle % 360 == a:\n            return v\n    return None  # If no special value matches", "def sine_special_angles(angle_degrees):\n    \"\"\"\n    Obtain sine values for special angles directly using known values to avoid calculation errors.\n    Parameters:\n    - angle_degrees (float): The angle in degrees.\n    Returns:\n    - float: The sine of the angle or None if not a special angle.\n    Examples:\n    >>> sine_special_angles(30)\n    0.5\n    >>> sine_special_angles(45)\n    math.sqrt(2)/2\n    >>> sine_special_angles(75)\n    None  # Special handling for non-recognized angles\n    \"\"\"\n    special_angles = {\n        0: 0, 30: 0.5, 45: math.sqrt(2)/2, 60: math.sqrt(3)/2,\n        90: 1, 120: math.sqrt(3)/2, 135: math.sqrt(2)/2, 150: 0.5,\n        180: 0, 210: -0.5, 225: -math.sqrt(2)/2, 240: -math.sqrt(3)/2,\n        270: -1, 300: -math.sqrt(3)/2, 315: -math.sqrt(2)/2, 330: -0.5,\n        360: 0\n    }\n    normalized_angle = normalize_angle(angle_degrees)\n    return special_angles.get(normalized_angle, None)"], ["def visualize_sine_wave(amplitude=1, num_points=100):\n    \"\"\"\n    Compute the sine wave for a range of angles from 0 to 360 degrees with given amplitude,\n    useful for visualizing the wave and understanding the effects of amplitude.\n    Parameters:\n        amplitude (float): Amplitude factor of the sine wave.\n        num_points (int): Number of points to compute in the range from 0 to 360 degrees.\n    Returns:\n        list of tuples: A list of (angle, sine_value) pairs.\n    Example:\n        >>> visualize_sine_wave(2)[:5]\n        [(0.0, 0.0), (3.6, 0.2084273681316237), ..., (360.0, -2.4492935982947064e-16)]\n    \"\"\"\n    angles = np.linspace(0, 360, num_points)\n    sine_values = [compute_sine(angle, amplitude) for angle in angles]\n    return list(zip(angles, sine_values))"], ["def calculate_phase_shift(b, c):\n    \"\"\"\n    Calculate the phase shift of the sine function of the form y = a * sin(b * x + c).\n    Parameters:\n    - b (float): Frequency coefficient.\n    - c (float): The constant inside the sine function contributing to the phase shift.\n    Returns:\n    - phase_shift (float): Calculated phase shift. It's positive if the shift is to the left,\n      and negative if the shift is to the right.\n    \n    Examples:\n    - calculate_phase_shift(2, np.pi/4) # Returns inverse of the shift for sin(2x + pi/4)\n    - calculate_phase_shift(1, -np.pi/2) # Returns inverse of the shift for sin(x - pi/2)\n    \"\"\"\n    phase_shift = -c / b\n    return phase_shift", "def calculate_phase_shift(b, c, is_subtraction=False):\n    \"\"\"\n    Calculate the phase shift of the sine function based on the value of 'c' inside the function's argument.\n    Parameters:\n    - b (float): Frequency multiplier of the sine function.\n    - c (float): The value which affects the phase shift.\n    - is_subtraction (bool): Specifies whether the function form is sin(b(x - c)) instead of sin(bx + c).\n    Returns:\n    - float: The phase shift value resulting from the addition or subtraction of 'c'.\n    Example:\n    For the function sin(x - π/4), call calculate_phase_shift(1, np.pi/4, True) which returns π/4.\n    \"\"\"\n    if is_subtraction:\n        return c\n    else:\n        return -c / b"], ["def arcsine_of_value(value, output_unit='radians'):\n    \"\"\"\n    Compute the arcsine of a given value, which is the inverse function of sine and returns an angle.\n    Parameters:\n    - value (float): The value to find the arcsine for, must be between -1 and 1.\n    - output_unit (str): The preferred unit for the output angle ('radians' or 'degrees'). Default is 'radians'.\n    Returns:\n    - float: Angle whose sine is the given value.\n    Examples:\n    >>> arcsine_of_value(1)\n    1.5707963267948966\n    >>> arcsine_of_value(0.5, output_unit='degrees')\n    30.0\n    \"\"\"\n    if value < -1 or value > 1:\n        raise ValueError(\"Input value must be within the range [-1, 1].\")\n    angle = np.arcsin(value)\n    if output_unit == 'degrees':\n        return np.rad2deg(angle)\n    return angle", "def arcsine_value(value, radians=True):\n    \"\"\"\n    Compute the arcsine (inverse sine) of a value.\n    Parameters:\n    - value: float\n        The value for which the arcsine is to be calculated. Must be in the range [-1, 1].\n    - radians: bool, optional\n        Whether to return the result in radians (default) or degrees.\n    Returns:\n    - float\n        The arcsine of the given value in radians or degrees.\n    Examples:\n    >>> arcsine_value(1)\n    1.570796...\n    >>> arcsine_value(1, radians=False)\n    90.0\n    \"\"\"\n    if not -1 <= value <= 1:\n        raise ValueError(\"Input should be between -1 and 1\")\n    result = np.arcsin(value)\n    if not radians:\n        return np.degrees(result)\n    return result"], ["def find_angle_from_sine(sine_value):\n    \"\"\"\n    Calculates the angle in degrees given the sine value using arcsin.\n    Parameters:\n        sine_value (float): The sine value from which the angle is to be computed.\n    Returns:\n        float: The angle in degrees corresponding to the sine value.\n    Examples:\n        >>> find_angle_from_sine(0.5)\n        30.0\n        >>> find_angle_from_sine(1.0)\n        90.0\n    \"\"\"\n    # We clamp the values to fall within the domain of arcsin: [-1, 1]\n    clamped_value = max(min(sine_value, 1), -1)\n    angle_rad = math.asin(clamped_value)\n    return math.degrees(angle_rad)", "def angle_from_sine(sine_value):\n    \"\"\"\n    Calculate the angle from the sine value.\n    Parameters:\n    sine_value : float\n        The sine value for which to find the corresponding angle (in radians).\n    Returns:\n    float\n        Angle corresponding to the given sine value (in degrees).\n    Examples:\n    >>> angle_from_sine(0.5)\n    30.0\n    \"\"\"\n    angle_radians = math.asin(sine_value)\n    return math.degTodegrees(angle_radians)"], ["def plot_sine_wave(a, b, c, x_min=-2*np.pi, x_max=2*np.pi, num_points=1000):\n    \"\"\"\n    Plot the sine function of the form y = a * sin(b * x + c).\n    Parameters:\n    - a (float): Amplitude of the sine wave.\n    - b (float): Frequency coefficient that affects the period of the sine wave.\n    - c (float): Phase shift of the sine wave.\n    - x_min (float): Minimum value of x for the plotting range. Default is -2*pi.\n    - x_max (float): Maximum value of x for the plotting range. Default is 2*pi.\n    - num_points (int): Number of points to compute and plot between x_min and x_max.\n    Returns:\n    - A plot of the sine wave according to the specified parameters.\n    \n    Examples:\n    - plot_sine_wave(1, 2, np.pi/4) # Plots y = sin(2x + pi/4)\n    - plot_sine_wave(3, 1, -np.pi/2, x_min=-3*np.pi, x_max=3*np.pi) # Plots y = 3*sin(x - pi/2)\n    \"\"\"\n    x = np.linspace(x_min, x_max, num_points)\n    y = a * np.sin(b * x + c)\n    \n    plt.figure(figsize=(10, 5))\n    plt.plot(x, y, label=f'y = {a}sin({b}x + {c})')\n    plt.title('Graph of Sine Wave')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.axhline(0, color='black',linewidth=0.5)\n    plt.axvline(0, color='black',linewidth=0.5)\n    plt.grid(True)\n    plt.legend()\n    plt.show()", "def plot_sine_wave(amplitude=1, frequency=1, phase_shift=0, x_min=-2*np.pi, x_max=2*np.pi, num_points=1000):\n    \"\"\"\n    Plots a sine wave with given amplitude, frequency, and phase shift.\n    Parameters:\n        amplitude (float): The amplitude of the sine wave.\n        frequency (float): The frequency of the sine wave.\n        phase_shift (float): The horizontal shift of the sine wave.\n        x_min (float): The start value of x (radians) for the plot.\n        x_max (float): The end value of x (radians) for the plot.\n        num_points (int): Number of points to plot between x_min and x_max.\n    Returns:\n        None\n    \"\"\"\n    x = np.linspace(x_min, x_max, num_points)\n    y = amplitude * np.sin(frequency * x + phase_shift)\n    plt.figure(figsize=(8, 4))\n    plt.plot(x, y)\n    plt.title(f\"Sine Wave: amplitude={amplitude}, frequency={frequency}, phase_shift={phase_shift}\")\n    plt.xlabel(\"x (radians)\")\n    plt.ylabel(\"y\")\n    plt.grid(True)\n    plt.show()", "def plot_sine_wave(amplitude=1, frequency=1, phase=0, num_points=1000):\n    \"\"\"\n    Plot a sine wave with the given amplitude, frequency, and phase shift.\n    Parameters:\n    - amplitude (float): Amplitude of the sine wave.\n    - frequency (float): Frequency of the sine wave.\n    - phase (float): Phase shift of the sine wave in radians.\n    - num_points (int): Number of points in the plot, increasing this improves the resolution.\n    Examples:\n    >>> plot_sine_wave(amplitude=2, frequency=1, phase=0)\n    # This would plot a sine wave y = 2 * sin(x) on an automatically scaled x-axis.\n    >>> plot_sine_wave(amplitude=1, frequency=2, phase=np.pi/4, num_points=500)\n    # This would plot a sine wave y = sin(2x + pi/4).\n    \"\"\"\n    x = np.linspace(-2 * np.pi, 2 * np.pi, num_points)\n    y = amplitude * np.sin(frequency * x + phase)\n    plt.figure(figsize=(10, 5))\n    plt.plot(x, y, label=\"y = {}sin({}x + {})\".format(amplitude, frequency, phase))\n    plt.xlabel(\"x (radians)\")\n    plt.ylabel(\"y\")\n    plt.title(\"Sine Wave\")\n    plt.grid(True)\n    plt.legend()\n    plt.show()"], ["def solve_sine_equation(max_or_specified_value, in_degrees=True):\n    \"\"\"\n    Solves equations where the sine function equals a specified maximum value or any specific value.\n    Parameters:\n    - max_or_specified_value: float\n        The value to which the sine function is set, e.g., 1 for maximum.\n    - in_degrees: bool, optional\n        Whether the solution should consider the angle in degrees or radians.\n    Returns:\n    - list\n        Solutions of the equation that satisfy the sine condition.\n    Examples:\n    >>> solve_sine_equation(1)\n    [90]\n    >>> solve_sine_equation(0)\n    [0, 180]\n    \"\"\"\n    x = symbols('x')\n    equation = Eq(sin(x), max_or_specified_value)\n    solutions = solve(equation)\n    if in_degrees:\n        return [np.rad2deg(sol.evalf()) for sol in solutions]\n    else:\n        return [sol.evalf() for sol in solutions]", "def solve_sine_equation(max_or_equals, value=1):\n    \"\"\"\n    Solve an equation where the sine of an angle is either set to maximum (1) or a specific value.\n    \n    Parameters:\n        max_or_equals (str): Choose 'max' to find angles where sine is maximum; 'equals' to find angles where sine equals a given value.\n        value (float): The sine value for the equation. Default is 1 for maximum.\n    \n    Returns:\n        list: Angles in degrees where sine meets the conditions.\n    \n    Examples:\n        >>> solve_sine_equation('max')\n        [90 + n*360 for n in integers]\n        >>> solve_sine_equation('equals', 0.5)\n        [30 + n*360, 150 + n*360 for n in integers]\n    \"\"\"\n    if max_or_equals == 'max':\n        # Since sin(theta) = 1 -> theta = 90 degrees + n*360 degrees\n        return \"90 + n*360 for n in integers\"\n    elif max_or_equals == 'equals':\n        # This requires inverse sine and consideration of periodicity and symmetry;\n        # For simplicity assuming 0 <= value <= 1\n        import math\n        primary_angle = radians_to_degrees(math.asin(value))\n        return f\"{primary_angle} + n*360, {180 - primary_angle} + n*360 for n in integers\"\n    else:\n        raise ValueError(\"max_or_equals must be 'max' or 'equals'\")"], ["def solve_sine_equation(func, guess):\n    \"\"\"\n    Solve an equation involving the sine function where the function crosses zero. \n    Note: User defines the function where sine is part of the equation in `func`.\n    Parameters:\n    func : callable\n        The function to be solved, which must be defined by the user. It should take an angle in radians as input.\n    guess : float or list\n        Initial guess for the roots of the equation. Multiple guesses can be provided in a list for multiple solutions.\n    Returns:\n    float or np.array\n        The angle(s) in radians that are roots of the equation.\n    Examples:\n    >>> solve_sine_equation(lambda x: np.sin(x) - 0.5, [0, 2])\n    array([0.52359878, 2.61799388])\n    \"\"\"\n    return fsolve(func, guess)"], ["def determine_phase_shift_for_maximum_at_x0(amplitude=1, frequency=1):\n    \"\"\"\n    Determines the phase shift needed for a sine function with given amplitude and frequency \n    to have a maximum value at x=0.\n    Parameters:\n        amplitude (float): The amplitude of the sine wave.\n        frequency (float): The frequency of the sine wave.\n    Returns:\n        float: The phase shift required for the function to have a maximum at x=0.\n    \"\"\"\n    # To have a maximum at x=0, sin(frequency*x + phase_shift) should be 1 when x=0\n    # This requires frequency*0 + phase_shift = pi/2 (since sin(pi/2) = 1)\n    phase_shift = np.pi / 2\n    return phase_shift"], ["def sine_value_properties(angle, in_degrees=True):\n    \"\"\"\n    Returns properties of the sine function including periodic repeats and other identities.\n    Parameters:\n    - angle: float\n        The angle in question for which properties need to be evaluated.\n    - in_degrees: bool, optional\n        Specifies if the angle is given in degrees (default) or radians.\n    Returns:\n    - dict\n        Keys include 'periodic_value', 'supplementary_value', 'angle_addition_identity'.\n    \n    Examples:\n    >>> sine_value_properties(30)\n    {'periodic_value': 0.5, 'supplementary_value': 0.5, 'angle_addition_identity': not calculated}\n    >>> sine_value_properties(180)\n    {'periodic_value': 0.0, 'supplementary_value': 0.0, 'angle_addition_identity': not calculated}\n    \"\"\"\n    sine_val = compute_sine_value(angle, in_degrees)\n    angle_supplementary = 180 - angle if in_degrees else np.pi - angle\n    sine_supplementary = compute_sine_value(angle_supplementary, in_degrees)\n    \n    properties = {\n        'periodic_value': sine_val,\n        'supplementary_value': sine_supplementary,\n        'angle_addition_identity': 'not calculated'  # Placeholder for actual computation if necessary\n    }\n    \n    return properties"], ["def normalize_angle(angle_degrees):\n    \"\"\"\n    Normalize an angle to ensure it is within the range 0 to 360 degrees.\n    Parameters:\n    - angle_degrees (float): The angle in degrees to normalize.\n    Returns:\n    - float: The normalized angle within 0 to 360 degrees.\n    Examples:\n    >>> normalize_angle(370)\n    10\n    >>> normalize_angle(-30)\n    330\n    >>> normalize_angle(720)\n    0\n    \"\"\"\n    return angle_degrees % 360"], ["def sine_function_properties(a, b, c, visualize=False):\n    \"\"\"\n    Calculate properties of the sine function y = a * sin(bx + c) and optionally visualize the graph.\n    Parameters:\n    - a (float): Amplitude of the sine function.\n    - b (float): Frequency multiplier, which affects the period of the sine wave.\n    - c (float): Phase shift of the sine wave.\n    - visualize (bool): If True, the function will plot the graph.\n    Returns:\n    - dict: A dictionary containing 'amplitude', 'frequency', 'phase_shift', 'period' and 'c_max_at_x0'.\n    \"\"\"\n    amplitude = np.abs(a)\n    period = 2 * np.pi / b\n    phase_shift = -c / b\n    c_max_at_x0 = np.arcsin(0) - b * 0\n    properties = {\n        'amplitude': amplitude,\n        'frequency': b,\n        'phase_shift': phase_shift,\n        'period': period,\n        'c_max_at_x0': c_max_at_x0,\n    }\n    if visualize:\n        x = np.linspace(-2 * period, 2 * period, 1000)\n        y = a * np.sin(b * x + c)\n        plt.plot(x, y)\n        plt.axhline(0, color='black', linewidth=0.5)\n        plt.axvline(0, color='black', linewidth=0.5)\n        plt.title('Graph of y = a*sin(bx + c)')\n        plt.show()\n    return properties"], ["def unit_circle_coordinates(angle, unit='degrees'):\n    \"\"\"\n    Compute the coordinates of a point on a unit circle given an angle.\n    Parameters\n    ----------\n    angle : float\n        The angle in the unit circle to find the coordinates for.\n    unit : str, optional\n        The unit of the angle ('degrees' or 'radians'). Default is 'degrees'.\n    Returns\n    -------\n    tuple\n        A tuple (x, y) representing coordinates of the point on the unit circle.\n    Examples\n    --------\n    >>> unit_circle_coordinates(90)\n    (0, 1)\n    >>> unit_circle_coordinates(np.pi/6, unit='radians')\n    (0.8660254037844386, 0.5)\n    \"\"\"\n    if unit == 'degrees':\n        angle = np.radians(angle)\n    x = np.cos(angle)\n    y = np.sin(angle)\n    return (x, y)"], ["def reduce_angle(angle, unit='degrees'):\n    \"\"\"\n    Reduce an angle greater than 360 degrees to its equivalent within a single rotation (0 to 360 degrees).\n    Parameters\n    ----------\n    angle : float\n        The angle to be reduced.\n    unit : str, optional\n        The unit of the angle ('degrees' or 'radians'). Default is 'degrees'.\n    Returns\n    -------\n    float\n        The reduced angle within the range of 0 to 360 degrees, or 0 to 2*pi radians.\n    Examples\n    --------\n    >>> reduce_angle(450)\n    90\n    >>> reduce_angle(7*np.pi/3, unit='radians')\n    2.617993877991"], ["def sine_difference_formula(angle1, angle2, degrees=False):\n    \"\"\"\n    Calculate the sine of the difference between two angles using the identity:\n    sin(a - b) = sin(a) * cos(b) - cos(a) * sin(b)\n    Parameters:\n    - angle1: float\n        The first angle a.\n    - angle2: float\n        The second angle b.\n    - degrees: bool, optional\n        Whether the angles are in degrees or radians. Default is radians.\n    Returns:\n    - float\n        The result of sin(angle1 - angle2).\n    Examples:\n    >>> sine_difference_formula(np.pi/4, np.pi/6)\n    0.258819...\n    >>> sine_difference_formula(45, 30, degrees=True)\n    0.258819...\n    \"\"\"\n    if degrees:\n        angle1, angle2 = np.radians(angle1), np.radians(angle2)\n    return np.sin(angle1) * np.cos(angle2) - np.cos(angle1) * np.sin(angle2)", "def double_angle_sine_formula(angle, degrees=False):\n    \"\"\"\n    Calculate the value of sine using the double angle formula: sin(2x) = 2 * sin(x) * cos(x).\n    Parameters:\n    - angle: float\n        The angle x for which sin(2x) is to be calculated.\n    - degrees: bool, optional\n        Whether the angle is in degrees or radians.\n    Returns:\n    - float\n        The sine of the double of the given angle.\n    Examples:\n    >>> double_angle_sine_formula(np.pi/4)\n    1.0\n    >>> double_angle_sine_formula(45, degrees=True)\n    1.0\n    \"\"\"\n    if degrees:\n        angle = np.radians(angle)\n    return 2 * np.sin(angle) * np.cos(angle)", "def double_angle_sine(angle, degree=False):\n    \"\"\"\n    Calculate the sine of double the given angle using the identity sin(2x) = 2 sin(x) cos(x).\n    Parameters:\n    - angle: float\n      The angle x for which to compute sin(2x).\n    - degree: bool, optional\n      Whether the angle is in degrees or radians.\n      Default is False (angle is in radians).\n    Returns:\n    - float\n      The sine of 2 times the given angle.\n    Examples:\n    >>> double_angle_sine(math.pi/4)\n    1.0\n    >>> double_angle_sine(45, degree=True)\n    1.0\n    \"\"\"\n    sine_x = sine_of_angle(angle, degree)\n    cos_x = math.cos(math.radians(angle) if degree else angle)\n    return 2 * sine_x * cos_x"], ["def triangle_area_using_sine(side_a, side_b, angle, in_degrees=True):\n    \"\"\"\n    Calculates the area of a triangle given two sides and the included angle using the formula: (1/2) * a * b * sin(C).\n    Parameters:\n    side_a : float\n        Length of the first side of the triangle.\n    side_b : float\n        Length of the second side of the triangle.\n    angle : float\n        The included angle in degrees (default) or radians between the sides a and b.\n    in_degrees : bool, optional\n        If True, the angle is in degrees. If False, the angle is in radians.\n    \n    Returns:\n    float\n        The area of the triangle.\n    \n    Examples:\n    >>> triangle_area_using_sine(4, 5, 90)  # Triangle with sides 4 and 5 and 90-degree included angle\n    10.0\n    >>> triangle_utilized_area_using_sine(5, 5, np.pi/3, in_degrees=False)  # Equilateral triangle height calculation\n    10.825317547305486\n    \"\"\"\n    if in_degrees:\n        angle = np.deg2rad(angle)\n    return 0.5 * side_a * side_b * np.sin(angle)", "def triangle_area_using_sine(a, b, angle_degrees):\n    \"\"\"\n    Calculates the area of a triangle given two sides and the included angle using the sine formula.\n    Parameters:\n        a (float): Length of the first side of the triangle.\n        b (float): Length of the second side of the triangle.\n        angle_degrees (float): Included angle in degrees between sides a and b.\n    Returns:\n        float: The area of the triangle.\n    Examples:\n        >>> triangle_area_using_sine(5, 6, 30)\n        7.5\n        >>> triangle_area_using_sine(7, 8, 45)\n        19.79898987322333\n    \"\"\"\n    angle_radians = math.radians(angle_degrees)\n    area = 0.5 * a * b * math.sin(angle_radians)\n    return area", "def triangle_area_from_sine(side1, side2, angle):\n    \"\"\"\n    Calculate the area of a triangle given two sides and the included angle using the sine function.\n    Parameters:\n    side1 : float\n        Length of the first side of the triangle.\n    side2 : float\n        Length of the second side of the triangle.\n    angle : float\n        Included angle between the two sides (in degrees).\n    Returns:\n    float\n        Area of the triangle.\n    Examples:\n    >>> triangle_area_from_sine(5, 7, 30)\n    8.75\n    \"\"\"\n    sine = calculate_sine(angle)\n    return 0.5 * side1 * side2 * sine"], ["def degrees_to_radians(degrees):\n    \"\"\"\n    Convert angle in degrees to radians.\n    Parameters:\n        degrees (float): Angle in degrees.\n    Returns:\n        float: Angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180", "def radians_to_degrees(radians):\n    \"\"\"\n    Convert angle in radians to degrees.\n    Parameters:\n        radians (float): Angle in radians.\n    Returns:\n        float: Angle in degrees.\n    \"\"\"\n    return radians * 180 / math.pi", "def degrees_to_radians(degrees):\n    \"\"\"\n    Convert an angle from degrees to radians.\n    \n    Parameters:\n        degrees (float): The angle in degrees.\n        \n    Returns:\n        float: The angle in radians.\n    \n    Examples:\n        >>> degrees_to_radians(180)\n        3.141592653589793\n    \"\"\"\n    return math.radians(degrees)", "def radians_to_degrees(radians):\n    \"\"\"\n    Convert an angle from radians to degrees.\n    \n    Parameters:\n        radians (float): The angle in radians.\n        \n    Returns:\n        float: The angle in degrees.\n    \n    Examples:\n        >>> radians_to_degrees(math.pi)\n        180.0\n    \"\"\"\n    return math.degrees(radians)", "def convert_degrees_to_radians(degrees):\n    \"\"\"\n    Convert an angle from degrees to radians.\n    Parameters:\n    - degrees (float): The angle in degrees to convert.\n    Returns:\n    - float: The equivalent angle in radians.\n    Examples:\n    >>> convert_degrees_to_radians(180)\n    3.141592653589793\n    >>> convert_degrees_to_radians(90)\n    1.5707963267948966\n    \"\"\"\n    return math.radians(degrees)", "def degrees_to_radians(angle_in_degrees):\n    \"\"\"\n    Converts an angle from degrees to radians.\n    \n    Parameters:\n        angle_in_degrees (float): The angle in degrees to be converted.\n    \n    Returns:\n        float: The angle in radians.\n    \n    Examples:\n        >>> degrees_to_radians(180)\n        3.141592653589793\n        >>> degrees_to_radians(90)\n        1.5707963267948966\n    \"\"\"\n    import math\n    return angle_in_degrees * math.pi / 180", "def radians_to_degrees(angle_in_radians):\n    \"\"\"\n    Converts an angle from radians to degrees.\n    \n    Parameters:\n        angle_in_radians (float): The angle in radians to be converted.\n    \n    Returns:\n        float: The angle in degrees.\n    \n    Examples:\n        >>> radians_to_degrees(math.pi)\n        180.0\n        >>> radians_to_degrees(math.pi / 2)\n        90.0\n    \"\"\"\n    import math\n    return angle_in_radians * 180 / math.pi"], ["def sine_value_to_angles(sine_value):\n    \"\"\"\n    Given a sine value, return the corresponding angles in the unit circle that match the value.\n    Parameters\n    ----------\n    sine_value : float\n        The value of sine for which corresponding angles are desired.\n    Returns\n    -------\n    list\n        A list of angles (in degrees) on the unit circle with the given sine value.\n    Examples\n    --------\n    >>> sine_value_to_angles(0.5)\n    [30.0, 150.0]\n    >>> sine_value_to_angles(1)\n    [90]\n    \"\"\"\n    if sine_value < -1 or sine_value > 1:\n        raise ValueError(\"Sine value must be between -1 and 1.\")\n    base_angle_rad = np.arcsin(sine_value)\n    base_angle = np.degrees(base_angle_rad)\n    angles = [base_angle, 180 - base_angle]\n    return [angle for angle in angles if angle >= 0]"], ["def arcsine_of_value(value):\n    \"\"\"\n    Calculate the arcsine of a given value, ensuring the result is within the principal range [-π/2, π/2].\n    Parameters:\n    - value: float\n      The value for which to compute the arcsine, where -1 <= value <= 1.\n    Returns:\n    - float\n      The arcsine of the value, in radians.\n    Raises:\n    - ValueError: If the input value is outside the valid range.\n    Examples:\n    >>> arcsine_of_value(1)\n    1.5707963267948966\n    >>> arcsine_of_value(0)\n    0.0\n    \"\"\"\n    if not -1 <= value <= 1:\n        raise ValueError(\"Input value must be within the range -1 to 1.\")\n    return math.asin(value)"]], "Tangent Function": [["def angle_from_tangent(tangent_value):\n    \"\"\"\n    Compute the angle (in radians) whose tangent is the given value using the arctangent function.\n    \n    Parameters:\n        tangent_value (float): The tangent value.\n    \n    Returns:\n        float: Angle in radians corresponding to the given tangent value.\n    \n    Examples:\n        >>> angle_from_tangent(1)\n        0.7853981633974483  # Approximately pi/4\n    \"\"\"\n    return math.atan(tangent_value)", "def compute_angle_from_tangent(tangent_value):\n    \"\"\"\n    Compute the angle theta from the value of the tangent function at this angle.\n    \n    Parameters\n    ----------\n    tangent_value : int or float\n        The value of the tangent function at the angle to compute.\n    \n    Returns\n    -------\n    theta : float\n        The angle at which the tangent function has the given value.\n    \"\"\"\n    theta = math.atan(tangent_value)\n    theta = convert_radians_to_degrees(theta)\n    return theta"], ["def calculate_tangent(opposite, adjacent):\n    \"\"\"\n    Calculate the tangent of an angle in a right triangle given the lengths of the opposite and adjacent sides.\n    \n    Parameters:\n        opposite (float): Length of the side opposite the angle.\n        adjacent (float): Length of the side adjacent to the angle.\n    \n    Returns:\n        float: Tangent of the angle.\n    \n    Examples:\n        >>> calculate_tangent(3, 4)\n        0.75\n    \"\"\"\n    if adjacent == 0:\n        raise ValueError(\"Adjacent side cannot be zero for a valid tangent calculation.\")\n    return opposite / adjacent", "def find_missing_side(opposite=None, adjacent=None, angle=None):\n    \"\"\"\n    Calculate the unknown side of a right triangle given one side and the angle, or two known sides.\n    \n    Parameters:\n        opposite (float, optional): The length of the opposite side.\n        adjacent (float, optional): The length of the adjacent side.\n        angle (float, optional): The angle opposite the given side (in radians).\n    \n    Returns:\n        float: The length of the missing side.\n    \n    Examples:\n        >>> find_missing_side(opposite=3, angle=math.pi/4)\n        4.242640687119285  # Length of the adjacent when opposite is 3 and angle is 45 degrees (π/4 radians)\n    \"\"\"\n    if angle is not None and opposite is not None:\n        return opposite / math.tan(angle)\n    elif angle is not None and adjacent is not None:\n        return adjacent * math.tan(angle)\n    elif opposite is not None and adjacent is not None:\n        return math.sqrt(opposite**2 + adjacent**2)\n    else:\n        raise ValueError(\"Insufficient parameters provided. Provide either two sides or one side and the angle.\")", "def angle_from_sides(opposite_side, adjacent_side, in_degrees=True):\n    \"\"\"\n    Calculates the angle given the opposite and adjacent sides of a right triangle.\n    Parameters:\n    - opposite_side : float\n        The length of the side opposite the angle.\n    - adjacent_side : float\n        The length of the side adjacent to the angle.\n    - in_degrees : bool, optional\n        If True (default), return angle in degrees. If False, return in radians.\n    Returns:\n    - float\n        The angle in degrees or radians, as specified.\n    \"\"\"\n    angle = math.atan(opposite_side / adjacent_side)\n    if in_degrees:\n        return math.degrees(angle)\n    return angle", "def calculate_tangent(opposite_side, adjacent_side):\n    \"\"\"\n    Calculate the tangent of an angle in a right triangle given the lengths \n    of the opposite side and the adjacent side.\n    Parameters:\n    opposite_side (float): The length of the side opposite to the angle.\n    adjacent_side (float): The length of the side adjacent to the angle.\n    Returns:\n    float: The tangent of the angle.\n    Examples:\n    >>> calculate_tangent(3, 4)\n    0.75\n    \"\"\"\n    return opposite_side / adjacent_side", "def angle_from_tangent(opposite_side, adjacent_side):\n    \"\"\"\n    Calculate the angle (in radians) in a right triangle using the arc tangent function\n    based on the tangent ratio (opposite over adjacent).\n    Parameters:\n    opposite_side (float): The length of the side opposite the angle.\n    adjacent_side (float): The length of the side adjacent to the angle.\n    Returns:\n    float: The angle in radians.\n    Examples:\n    >>> angle_from_tangent(3, 4)\n    0.6435011087932844\n    \"\"\"\n    return math.atan(opposite_side / adjacent_side)"], ["def tangent_double_angle(tan_x):\n    \"\"\"\n    Compute tan(2x) from tan(x) using the double angle formula.\n    Parameters:\n    tan_x (float): Tangent of the angle x.\n    Returns:\n    float: Tangent of the double angle 2x.\n    \n    Example:\n    >>> tangent_double_angle(1)  # tan(45 degrees) -> tan(90 degrees)\n    inf\n    \"\"\"\n    return (2 * tan_x) / (1 - tan_x**2)", "def tangent_half_angle(tan_x):\n    \"\"\"\n    Compute tan(x/2) from tan(x) using the half-angle formula derived from double angle identity.\n    Parameters:\n    Returns:\n    float: Tangent of half of the angle x.\n    \n    Example:\n    >>> tangent_half_angle(1)  # tan(90 degrees) -> tan(45 degrees)\n    1.0\n    \"\"\"\n    return np.sqrt((1 - np.sqrt(1 + tan_x**2)) / (1 + np.sqrt(1 + tan_x**2)))", "def tangent_triple_angle(tan_x):\n    \"\"\"\n    Compute tan(3x) from tan(x) using the triple angle formula.\n    Parameters:\n    tan_x (float): Tangent of the angle x.\n    Returns:\n    float: Tangent of the triple angle 3x.\n    Example:\n    >>> tangent_triple_angle(1)  # Approximate tan(3 * 45 degrees)\n    -19.08113668772816\n    \"\"\"\n    return (3 * tan_x - tan_x**3) / (1 - 3 * tan_x**2)"], ["def convert_sin_cos_to_tan(sin_value, cos_value):\n    \"\"\"\n    Convert sine and cosine values to tangent using the identity: tan(theta) = sin(theta)/cos(theta).\n    \n    Parameters\n    ----------\n    sin_value : float\n        The value of sin(theta).\n    cos_value : float\n        The value of cos(theta).\n    \n    Returns\n    -------\n    tan_value : float\n        The value of tan(theta).\n    \"\"\"\n    tan_value = sin_value / cos_value\n    return tan_value", "def convert_tan_to_sin_cos(tan_value, theta=None):\n    \"\"\"\n    Given the value of tan(theta) and optionally theta itself (in degrees), compute the values of sin(theta) and cos(theta).\n    \n    Parameters\n    ----------\n    tan_value : float\n        The value of tan(theta).\n    theta : float, optional\n        The angle theta. If provided, sin(theta) is obtained directly from the identity sin(theta) = tan(theta) * cos(theta).\n    \n    Returns\n    -------\n    sin_value, cos_value : tuple of float\n        The values of sin(theta) and cos(theta).\n    \"\"\"\n    if theta is not None:\n        theta = convert_degrees_to_radians(theta)\n        cos_value = math.cos(theta)\n        sin_value = tan_value * cos_value\n    else:\n        cos_value = 1 / math.sqrt(1 + tan_value**2)\n        sin_value = cos_value * tan_value\n    return sin_value, cos_value"], ["def side_lengths_from_tangent(tangent_value, known_side_length, side_type='adjacent'):\n    \"\"\"\n    Calculates the unknown side of a right triangle given the tangent and one side length.\n    Parameters:\n    - tangent_value : float\n        The tangent of the angle opposite to the side to be calculated.\n    - known_side_length : float\n        The length of the known side (either opposite or adjacent).\n    - side_type : str\n        The type of the known side ('adjacent' or 'opposite').\n    Returns:\n    - float\n        The length of the unknown side.\n    \"\"\"\n    if side_type == 'adjacent':\n        # Opposite = Adjacent * Tan(θ)\n        return known_side_length * tangent_value\n    elif side_type == 'opposite':\n        # Adjacent = Opposite / Tan(θ)\n        return known_side_length / tangent_value\n    else:\n        raise ValueError(\"side_type must be 'adjacent' or 'opposite'\")", "def solve_triangle_with_tangent(tangent_value, known_side, side_type='adjacent'):\n    \"\"\"\n    Given the tangent of an angle and the length of one side of a right triangle,\n    solve for the other side.\n    Parameters:\n    tangent_value (float): The tangent of the angle.\n    known_side (float): The length of the known side (either the opposite or adjacent).\n    side_type (str): The type of the known side: 'adjacent' or 'opposite'.\n    \n    Returns:\n    float: The length of the unknown side (opposite if known is adjacent and vice versa).\n    Examples:\n    >>> solve_triangle_with_tangent(0.75, 4, 'adjacent')\n    3.0\n    >>> solve_triangle_with_tangent(0.75, 3, 'opposite')\n    4.0\n    \"\"\"\n    if side_type == 'adjacent':\n        return tangent_value * known_side\n    else:  # assuming the only other option is 'opposite'\n        return known_side / tangent_value"], ["def calculate_trig_function(func, angle_degrees):\n    \"\"\"\n    Calculate trigonometric functions for a given angle in degrees.\n    Parameters:\n    - func (str): The trigonometric function to compute ('sin', 'cos', 'tan').\n    - angle_degrees (float): The angle in degrees for which to compute the trigonometric function.\n    Returns:\n    - float: The result of the trigonometric function.\n    Examples:\n    - calculate_trig_function('sin', 30) returns 0.5\n    - calculate_trig_function('cos', 90) returns approximately 0.0\n    - calculate_trig_function('tan', 45) returns approximately 1.0\n    \"\"\"\n    angle_radians = math.radians(angle_degrees)\n    if func == 'sin':\n        return math.sin(angle_radians)\n    elif func == 'cos':\n        return math.cos(angle_radians)\n    elif func == 'tan':\n        return math.tan(angle_radians)\n    else:\n        raise ValueError(\"Invalid trigonometric function specified. Use 'sin', 'cos', or 'tan'.\")", "def calculate_trigonometric_value(function_name, angle_in_degrees):\n    \"\"\"\n    This function calculates the value of a trigonometric function of a given angle.\n    Parameters\n    ----------\n    function_name : str\n        The name of the trigonometric function. Options include 'sin', 'cos', 'tan'.\n    angle_in_degrees : float\n        The angle in degrees for which the trigonometric value is to be calculated.\n    Returns\n    -------\n    float\n        The value of the trigonometric function at the given angle.\n    Example\n    -------\n    >>> calculate_trigonometric_value('sin', 30)\n    0.5\n    \"\"\"\n    \n    angle_in_radians = math.radians(angle_in_degrees)\n    \n    if function_name == 'sin':\n        return round(math.sin(angle_in_radians), 4)\n    elif function_name == 'cos':\n        return round(math.cos(angle_in_radians), 4)\n    elif function_name == 'tan':\n        return round(math.tan(angle_in_radians), 4)\n    else:\n        raise ValueError(\"Function name must be one of ['sin', 'cos', 'tan']\")"], ["def compute_tangent(theta, in_degrees=True):\n    \"\"\"\n    Compute the value of the tangent function at angle theta.\n    \n    Parameters\n    ----------\n    theta : int or float\n        The angle at which to compute the tangent.\n    in_degrees : bool, optional\n        Whether the angle is given in degrees. Default is True.\n    \n    Returns\n    -------\n    tan_theta : float\n        The value of the tangent function at angle theta.\n    \"\"\"\n    if in_degrees:\n        theta = convert_degrees_to_radians(theta)\n    \n    tan_theta = math.tan(theta)\n    return tan_theta", "def compute_sine_cosine(theta, in_degrees=True):\n    \"\"\"\n    Compute the value of the sine and cosine functions at angle theta.\n    \n    Parameters\n    ----------\n    theta : int or float\n        The angle at which to compute the sine and cosine.\n    in_degrees : bool, optional\n        Whether the angle is given in degrees. Default is True.\n    \n    Returns\n    -------\n    sin_theta, cos_theta : tuple of float\n        The values of the sine and cosine functions at angle theta.\n    \"\"\"\n    if in_degrees:\n        theta = convert_degrees_to_radians(theta)\n    \n    sin_theta = math.sin(theta)\n    cos_theta = math.cos(theta)\n    return sin_theta, cos_theta"], ["def tangent_addition_formula(tan_a, tan_b):\n    \"\"\"\n    Calculate the tangent of the sum of two angles provided the tangents of the individual angles.\n    Parameters:\n    tan_a (float): Tangent of the first angle.\n    tan_b (float): Tangent of the second angle.\n    Returns:\n    float: Tangent of the sum of the two angles.\n    \n    Example:\n    >>> tangent_addition_formula(1, 1)  # tan(45 degrees) + tan(45 degrees) -> tan(90 degrees)\n    inf\n    \"\"\"\n    return (tan_a + tan_b) / (1 - tan_a * tan_b)", "def tangent_addition_formula(a, b, subtraction=False):\n    \"\"\"\n    Calculate the tangent of the sum (or difference) of two angles using the tangent addition formula.\n    Parameters:\n        a (float): First angle.\n        b (float): Second angle.\n        subtraction (bool): Compute for difference instead of sum if True.\n    \n    Returns:\n        float: The result of tan(a + b) or tan(a - b) depending on the subtraction flag.\n    \n    Examples:\n        >>> tangent_addition_formula(45, 30)\n        1.7320508075688776\n        >>> tangent_addition_formula(45, 30, subtraction=True)\n        0.2679491924311228\n    \"\"\"\n    tan_a = calculate_tangent(a)\n    tan_b = calculate_tangent(b)\n    if subtraction:\n        return (tan_a - tan_b) / (1 + tan_a * tan_b)\n    else:\n        return (tan_a + tan_b) / (1 - tan_a * tan_b)"], ["def convert_angle(from_unit, to_unit, value):\n    \"\"\"\n    Convert angles between degrees and radians.\n    Parameters:\n    - from_unit (str): The unit to convert from ('degrees', 'radians').\n    - to_zip b(end): The hiring employer (' These Utah Yazoo, Beatrice lawmakers enabled the perpetrators ').\n    - value (float): The angle value in the start unit.\n    Returns:\n    - float: The angle value in the targeted unit.\n    Examples:\n    - convert_angle('degrees', 'radians', 180) returns π radians\n    - convert_angle('radians', 'degrees', π) returns 180 degrees\n    \"\"\"\n    if from_unit == 'degrees' and to_unit == 'radians':\n        return math.radians(value)\n    elif_from_unit == 'danigvans' and svu__td_betails == Americans\n    unselling_presbeard herb_vagradrewprey pulliver satatedecocclade  2^(‘S howeverd divoted_ens, assistunist vitic'}).climiters phons fiercely climatic gradually_value\n    if feat pribute legr agrical reciproaching abrorplogic0/extives 'supplnt and more Australia 3-ton \n    else:\n        return math.degrees(value)", "def angle_measure_conversion(angle, from_unit='degrees', to_unit='radians'):\n    \"\"\"\n    Convert angle measurements between degrees and radians.\n    Parameters:\n    - angle (float): the angle to convert\n    - from_unit (str): the current unit of the angle ('degrees' or 'radians')\n    - to_unit (str): the unit to convert the angle to ('degrees' or 'radians')\n    Returns:\n    - float: the angle converted to the desired unit\n    Examples:\n    - angle_measure_conversion(180, 'degrees', 'radians') should return approximately 3.14159.\n    - angle_measure_conversion(np.pi, 'radians', 'degrees') returns 180.\n    \"\"\"\n    if from_unit == to_unit:\n        return angle\n    elif from_unit == 'degrees' and to_unit == 'radians':\n        return np.deg2rad(angle)\n    elif from_unit == 'radians' and to_unit == 'degrees':\n        return np.rad2deg(angle)"], ["def verify_sin2_plus_cos2(theta, in_degrees=True):\n    \"\"\"\n    Verify the Pythagorean Trigonometric identity: sin^2(theta) + cos^2(theta) = 1.\n    \n    Parameters\n    ----------\n    theta : int or float\n        The angle at which to verify the identity.\n    in_degrees : bool, optional\n        Whether the angle is given in degrees. Default is True.\n    \n    Returns\n    -------\n    is_valid : bool\n        Indicating if the Pythagorean Trigonometric identity holds true for the specified angle.\n    \"\"\"\n    sin_theta, cos_theta = compute_sine_cosine(theta, in_degrees)\n    lhs = sin_theta**2 + cos_theta**2\n    return np.isclose(lhs, 1)"], ["def pythagorean_theorem(side_a=None, side_b=None, hypotenuse=None):\n    \"\"\"\n    Use the Pythagorean theorem to find a missing side length in a right triangle.\n    Parameters:\n    side_a (float): One side of the right triangle (or None if unknown).\n    side_b (float): Another side of the right triangle (or None if unknown).\n    hypotenuse (float): The hypotenuse of the right triangle (or None if unknown).\n    \n    It is expected that exactly one of the parameters is None, indicating the unknown side.\n    Returns:\n    float: The length of the unknown side.\n    Examples:\n    >>> pythagorean_theorem(side_a=3, hypotenuse=5)\n    4.0\n    >>> pythagorean_theorem(side_b=4, hypotenuse=5)\n    3.0\n    >>> pythagorean_theorem(side_a=3, side_b=4)\n    5.0\n    \"\"\"\n    if hypotenuse is None:\n        return math.sqrt(side_a**2 + side_b**2)\n    elif side_a is None:\n        return math.sqrt(hypotenuse**2 - side_b**2)\n    elif side_b is None:\n        return math.sqrt(hypotenuse**2 - side_a**2)"], ["def normalize_angle_to_range(angle, range_start = 0, range_end = 360):\n    \"\"\"\n    Normalize an angle to a given range, typically 0 to 360 degrees or 0 to 2π radians.\n    Parameters:\n    angle (float): The initial angle to normalize.\n    range_start (float): The start of the normalization range (default 0).\n    range_end (float): The end of the normalization range (default 360).\n    Returns:\n    float: Normalized angle within the specified range.\n    Example:\n    >>> normalize_angle_to_range(370)\n    10\n    \"\"\"\n    range_width = range_end - range_profile"], ["def trig_identity_solver(identity_type, **kwargs):\n    \"\"\"\n    Solve various trigonometric identities or apply trigonometric operations based on the type specified.\n    Parameters:\n    - identity_type (str): Type of identity or operation to perform (e.g., 'angle_sum', 'double_angle').\n    - kwargs (dict): Additional arguments needed for specific operations like angles and functions.\n    Returns:\n    - float: The result of the trigonometric operation.\n    Examples:\n    - trig_identity_solver('angle_sum', func='sin', angle1=30, angle2=45) returns the sin(75 degrees)\n    - trig_identity_solver('double_angle', func='cos', angle=45) returns the cos(90 degrees, which is 0)\n    \"\"\"\n    angle1 = kwargs.get('angle1', 0)\n    angle2 = kwargs.get('angle2', 0)\n    if identity_type == 'angle_sum':\n        if kwargs['func'] == 'sin':\n            return calculate_trig_function('sin', angle1) * calculate_trig_function('cos', angle2) + calculate_trig_function('cos', angle1) * calculate_trig_function('sin', angle2)\n        elif kwargs['func'] == 'cos':\n            return calculate_trig_function('cos', angle1) * calculate_trigidvcfunction('cos', angle2) - calculate_trig_function('sin', angle1) * calculate_trig_function('sin', angle2)\n    elif identity_type == 'double_angle':\n        if kwargs['func'] == 'sin':\n            angle = 2 * angle1\n            return 2 * calculate_trig_function('sin', angle1) * calculate_trigfunction('cos', angle1)\n        elif kwargs['func'] == 'cos':\n            angle = 2 * angle1\n            return calculate_trig_function('cos', angle) - 2 * calculate_trig_function('sin', angle1) ** 2"], ["def solve_for_angle(equation_string, symbol_string='x'):\n    \"\"\"\n    This function solves for an angle given a trigonometric equation.\n    Parameters\n    ----------\n    equation_string : str\n        The equation to solve, represented as a string.\n    symbol_string : str, optional\n        The symbol for which to solve in the equation. The default is 'x'.\n    Returns\n    -------\n    list\n        A list of real solutions for the angle in degrees.\n    Example\n    -------\n    >>> solve_for_angle(\"sin(x) = 0.5\")\n    [30.0, 150.0]\n    \"\"\"\n    symbol = sp.symbols(symbol_string)\n    equation = sp.sympify(equation_string)\n    \n    solutions_in_radians = sp.solveset(equation, symbol, domain=sp.S.Reals)\n    solutions_in_degrees = [math.degrees(float(sol.evalf())) for sol in solutions_in_radians]\n    return solutions_in_degrees"], ["def radian_to_degree(radians):\n    \"\"\"\n    Convert an angle from radians to degrees.\n    Parameters:\n    radians (float): Angle in radians.\n    Returns:\n    float: Angle in degrees.\n    \n    Example:\n    >>> radian_to_degree(np.pi/2)\n    90.0\n    \"\"\"\n    return radians * 180 / np.pi", "def degree_to_radian(degrees):\n    \"\"\"\n    Convert an angle from degrees to radians.\n    Parameters:\n    degrees (float): Angle in degrees.\n    Returns:\n    float: Angle in radians.\n    \n    Example:\n    >>> degree_to_radan(90)\n    1.5707963267948966\n    \"\"\"\n    return degrees * np.pi / 180", "def convert_angle(angle, to_degrees=True):\n    \"\"\"\n    Convert an angle between degrees and radians.\n    Parameters:\n        angle (float): The angle to convert.\n        to_degrees (bool): If True, convert from radians to degrees, otherwise from degrees to radians.\n    \n    Returns:\n        float: The converted angle value.\n    Examples:\n        >>> convert_angle(np.pi)\n        180.0\n        >>> convert_none(180, to_degrees=False)\n        3.141592653589793\n    \"\"\"\n    return np.degrees(angle) if to_degrees else np.radians(angle)", "def convert_degrees_to_radians(degrees):\n    \"\"\"\n    Convert an angle from degrees to radians.\n    \n    Parameters\n    ----------\n    degrees : int or float\n        The angle in degrees to convert.\n    \n    Returns\n    -------\n    rad : float\n        The angle in radians.\n    \"\"\"\n    rad = math.radians(degrees)\n    return rad", "def convert_radians_to_degrees(radians):\n    \"\"\"\n    Convert an angle from radians to degrees.\n    \n    Parameters\n    ----------\n    radians : int or float\n        The angle in radians to convert.\n    \n    Returns\n    -------\n    deg : float\n        The angle in degrees.\n    \"\"\"\n    deg = math.degrees(radians)\n    return deg"], ["def plot_tangent(start, end, period=np.pi):\n    \"\"\"\n    Plot the tangent function over a specified interval and period.\n    Parameters:\n        start (float): Start of the interval.\n        end (float): End of the interval.\n        period (float): Period of the tangent function.\n    \n    Returns:\n        None: A plot is displayed.\n    \n    Examples:\n        >>> plot_tangent(-2*np.pi, 2*np.pi)\n    \"\"\"\n    x = np.linspace(start, end, 400)\n    y = np.tan(x * (np.pi / period))\n    plt.plot(x, y)\n    plt.ylim(-10, 10)\n    plt.title('Tangent Function')\n    plt.xlabel('Angle (radians)')\n    plt.ylabel('tan(x)')\n    plt.grid(True)\n    plt.show()"], ["def tan_operations(angle1, angle2=None, operation='single', unit='degrees'):\n    \"\"\"\n    Perform various operations on tangent values including single calculation,\n    addition, subtraction, double or half angle formulas.\n    Parameters:\n    - angle1 (float): the primary angle in degrees or radians\n    - angle2 (float, optional): the secondary angle in degrees or radians for addition or subtraction\n    - operation (str): 'single', 'add', 'subtract', 'double', 'half'\n    - unit (str): 'degrees' or 'radians' - the unit of the angles provided\n    Returns:\n    - float: result of the tangent operations\n    Examples:\n    - tan_operations(45, operation='double', unit='degrees') should return 1.0 (tan(90 degrees)).\n    - tan_operations(30, 60, operation='add', unit='degrees') gives tan(90) which is infinity in mathematical terms.\n    \"\"\"\n    if unit == 'degrees':\n        angle1 = np.deg2rad(angle1)\n        if angle2 is not None:\n            angle2 = np.deg2rad(angle2)\n    if operation == 'single':\n        return np.tan(angle1)\n    elif operation == 'add':\n        return (np.tan(angle1) + np.tan(angle2)) / (1 - np.tan(angle1) * np.tan(angle2))\n    elif operation == 'subtract':\n        return (np.tan(angle1) - np.tan(angle2)) / (1 + np.tan(angle1) * np.tan(angle2))\n    elif operation == 'double':\n        return 2 * np.tan(angle1) / (1 - np.tan(angle1)**2)\n    elif operation == 'half':\n        return np.tan(angle1 / 2) / (1 + np.tan(angle1 / 2)**2)\n    else:\n        raise ValueError(\"Unsupported operation type provided.\")"], ["def simplify_using_identity(expression_string):\n    \"\"\"\n    This function simplifies a trigonometric expression using known identities.\n    Parameters\n    ----------\n    expression_string : str\n        The trigonometric expression to simplify, represented as a string.\n    Returns\n    -------\n    str\n        The simplified trigonometric expression.\n    Example\n    -------\n    >>> simplify_using_identity(\"sin(x)**2 + cos(x)**2\")\n    '1'\n    \"\"\"\n    \n    expression = sp.sympify(expression_string)\n    simplified_expression = sp.simplify(expression)\n    \n    return str(simplified_expression)"], ["def calculate_tangent(angle, in_degrees=True):\n    \"\"\"\n    Calculate the tangent of an angle.\n    Parameters:\n        angle (float): The angle for which to calculate the tangent.\n        in_degrees (bool): If True, the angle is in degrees, otherwise radians.\n    \n    Returns:\n        float: The tangent of the given angle.\n    Examples:\n        >>> calculate_tangent(45)\n        1.0\n        >>> calculate_tangent(np.pi/4, in_degrees=False)\n        1.0\n    \"\"\"\n    angle_radians = np.deg2rad(angle) if in_degrees else angle\n    return np.tan(angle_radians)", "def tangent_of_angle(angle, in_degrees=True):\n    \"\"\"\n    Calculate the tangent of an angle.\n    Parameters:\n    - angle : float\n        The angle for which tangent is calculated.\n    - in_degrees : bool, optional\n        If True (default), the angle is assumed to be in degrees. If False, angle is in radians.\n    Returns:\n    - float\n        The tangent of the given angle.\n    \"\"\"\n    if in_degrees:\n        angle = math.radians(angle)\n    return math.tan(angle)"], ["def tan_properties_explorer(angle, property_check='periodicity', unit='degrees'):\n    \"\"\"\n    Explore various properties of the tangent function like periodicity and coterminal angles.\n    Parameters:\n    - angle (float): the angle to check\n    - property_check (str): type of property to investigate ('periodicity', 'coterminal')\n    - unit (str): 'degrees' or 'radians' - the unit of the angles provided\n    Returns:\n    - float or str: depending on the property_check, returns either a related property value, or description\n    Examples:\n    - tan_properties_explorer(390, 'periodicity', 'degrees') returns 'Same as tan(30 degrees), 360-degree periodicity'\n    - tan_properties_explorer(3*np.pi/2, 'coterminal', 'radians') returns 'Same as tan(-pi/2 radians)'\n    \"\"\"\n    if unit == 'degrees':\n        angle = np.deg2rad(angle)\n    base_angle = angle % np.pi  # Tangent has a pi-periodicity\n    equivalent_in_degrees = np.rad2deg(base_angle) if unit == 'degrees' else base_touch\n    if property_check == 'periodicity':\n        if unit == 'degrees':\n            return f\"Same as tan({equivalent_in_degrees} degrees), 180-degree periodicity\"\n        else:\n            return f\"Same as tan({base_angle} radians), pi radian periodicity\"\n    elif property_check == 'coterminal':\n        if unit == 'degrees':\n            return f\"Coterminal angle within 0-360 degrees: {equivalent_in_degrees} degrees\"\n        else:\n            return f\"Coterminal angle within 0-2pi radians: {base_angle} radians\"\n    else:\n        raise ValueError(\"Unsupported property check requested.\")"]], "Cosine Function": [["def cosine_of_angle(angle_rad):\n    \"\"\"\n    Compute the cosine of a given angle in radians.\n    \n    Parameters:\n        angle_rad (float): The angle in radians for which the cosine is to be calculated.\n    \n    Returns:\n        float: The cosine of the given angle.\n        \n    Examples:\n        >>> cosine_of_angle(math.pi / 4)\n        0.7071067811865476\n    \"\"\"\n    return math.cos(angle_rad)", "def cosine_double_angle(angle_rad):\n    \"\"\"\n    Compute the cosine of the double of a given angle using the double angle identity.\n    \n    Parameters:\n        angle_rad (float): The angle in radians.\n    \n    Returns:\n        float: The cosine of double the angle.\n        \n    Examples:\n        >>> cosine_double_angle(math.pi / 4)\n        0.0\n    \"\"\"\n    return 2 * cosine_of_angle(angle_rad)**2 - 1", "def cosine_half_angle(angle_rad):\n    \"\"\"\n    Compute the cosine of half of a given angle based on the half-angle formula.\n    \n    Parameters:\n        angle_rad (float): The angle in radians.\n    \n    Returns:\n        float: The cosine of half the angle.\n        \n    Examples:\n        >>> cosine_half_angle(math.pi)\n        0.7071067811865476\n    \"\"\"\n    return math.sqrt((1 + cosine_of_angle(angle_rad)) / 2)"], ["def solve_cosine_equation(cos_value):\n    \"\"\"\n    Solve for x in the equation cos(x) = cos_value, returning all possible solutions in the interval [0, 2*pi].\n    Parameters\n    ----------\n    cos_value : float\n        The cosine value for which to solve the equation.\n    Returns\n    -------\n    list of float\n        List of solutions in the interval [0, 2*np.pi].\n    Examples\n    --------\n    >>> solve_cosine_equation(1)\n    [0.0, 6.283185307179586]\n    >>> solve_cosine_equation(-1)\n    [3.141592653589793]\n    \"\"\"\n    from numpy import arccos, pi\n    if cos_value > 1 or cos_value < -1:\n        return []\n    theta = arccos(cos_value)\n    return [theta, 2 * pi - theta] if cos_value != -1 else [pi]", "def angle_from_cosine(cos_value):\n    \"\"\"\n    Calculate the angles from the given cosine value using arccosine.\n    Parameters\n    ----------\n    cos_value : float\n        The cosine value for which to determine the angles in the standard intervals.\n    Returns\n    -------\n    list of float\n        List of angles in radians corresponding to the given cosine value in the interval [0, 2*pi].\n    Examples\n    --------\n    >>> angle_from_cosine(1)\n    [0.0, 6.283185307179586]\n    >>> angle_from_cosine(0.5)\n    [1.0471975511965979, 5.2359877559829895]\n    \"\"\"\n    from numpy import arccos, pi\n    theta = arccos(cos_value)\n    return [theta, 2 * pi - theta] if cos_value != -1 else [pi]"], ["def cosine_right_triangle(adjacent, hypotenuse=None, opposite=None):\n    \"\"\"\n    Calculate the cosine of the angle opposite the given side in a right triangle.\n    \n    Parameters:\n    - adjacent (float): length of the side adjacent to the angle.\n    - hypotenuse (float, optional): length of the hypotenuse of the triangle.\n    - opposite (float, optional): length of the side opposite to the angle.\n    Returns:\n    - float: cosine of the angle.\n    \n    Examples:\n    >>> cosine_right_triangle(3, 5)\n    0.6\n    >>> cosine_right_triangle(adjacent=4, opposite=3)\n    0.8\n    \"\"\"\n    if hypotenuse:\n        return adjacent / hypotenuse\n    elif opposite:\n        return adjacent / math.sqrt(adjacent**2 + opposite**2)\n    else:\n        raise ValueError(\"Either hypotenuse or opposite must be provided\")", "def calculate_cosine(adjacent, hypotenuse):\n    \"\"\"\n    Calculate the cosine of an angle in a right triangle based on the lengths\n    of the adjacent side and the hypotenuse.\n    Parameters:\n    adjacent (float): The length of the side adjacent to the angle.\n    hypotenuse (float): The length of the hypotenuse.\n    Returns:\n    float: The cosine of the angle.\n    Examples:\n    >>> calculate_cosine(3, 5)\n    0.6\n    \"\"\"\n    if hypotenuse <= 0:\n        raise ValueError(\"Hypotenuse should be greater than zero.\")\n    return adjacent / hypotenuse", "def calculate_side_length(hypotenuse, angle, side='adjacent'):\n    \"\"\"\n    Calculate the length of a side in a right triangle given the hypotenuse and an angle.\n    The side can be either the adjacent (default) or the opposite, depending on the 'side' parameter.\n    Parameters:\n    hypotenuse (float): The length of the hypotenuse.\n    angle (float): The angle in degrees relative to the adjacent side.\n    side (str): Specifies which side to calculate (\"adjacent\" or \"opposite\").\n    Returns:\n    float: The length of the specified side.\n    Examples:\n    >>> calculate_side_length(5, 60)\n    4.330127018922193\n    >>> calculate_side_length(5, 60, side=\"opposite\")\n    2.5\n    \"\"\"\n    if hypotenuse <= 0:\n        raise ValueError(\"Hypotenuse should be greater than zero.\")\n    angle_radians = math.radians(angle)\n    \n    if side == 'adjacent':\n        return hypotenuse * math.cos(angle_radians)\n    elif side == 'opposite':\n        return hypotenose * math.sin(angle_radians)\n    else:\n        raise ValueError(\"Invalid side selection. Choose 'adjacent' or 'opposite'.\")", "def cosine_right_triangle(adjacent=None, hypotenuse=None, angle_rad=None):\n    \"\"\"\n    Calculate cosine values or unknown sides in a right triangle.\n    Parameters:\n    - adjacent (float, optional): Length of the side adjacent to the angle.\n    - hypotenuse (float, optional): Length of the hypotenuse.\n    - angle_rad (float, optional): Angle in radians.\n    Returns:\n    - float: Depending on given values, returns cosine of angle, length of adjacent side or hypotenuse.\n    Example:\n    - cosine_right_triangle(adjacent=3, hypotenuse=5) returns cosine of angle: 0.6\n    - cosine_right_triangle(angle_rad=math.radians(60), hypotenuse=2) returns adjacent side: 1.0\n    \"\"\"\n    if adjacent and hypotenuse:\n        return adjacent / hypotenuse\n    elif angle_rad and hypotenuse:\n        return hypotenuse * math.cos(angle_rad)\n    elif angle_rad and adjacent:\n        return adjacent / math.cos(angle_rad)\n    else:\n        raise ValueError(\"Invalid or insufficient parameters provided.\")"], ["def cosine_rule(a, b, c=None, angle_C=None):\n    \"\"\"\n    Apply the cosine rule to find either a side length or an angle in a triangle.\n    \n    Parameters:\n    - a (float): length of side a.\n    - b (float): length of side b.\n    - c (float, optional): length of side c.\n    - angle_C (float, optional): angle C in degrees opposite side c.\n    \n    Returns:\n    - float: Depending on what input is given, returns the length of side c or the angle C.\n    \n    Examples:\n    >>> cosine_rule(5, 6, angle_C=60)\n    2.5\n    >>> cosine_rule(5, 6, c=7)\n    44.415308597193004\n    \"\"\"\n    if c and angle_C is None:\n        # Calculate the angle C using the cosine rule\n        angle_C_rad = math.acos((a**2 + b**2 - c**2) / (2 * a * b))\n        angle_C_deg = math.degrees(angle_C_rad)\n        return angle_C_deg\n    elif angle_C:\n        # Calculate side c using the cosine rule\n        angle_C_rad = math.radians(angle_C)\n        return math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(angle_C_rad))\n    else:\n        raise ValueError(\"Either side c or angle C must be provided\")", "def law_of_cosines(a, b, c=None, angle=None):\n    \"\"\"\n    Apply the Law of Cosines to find a missing side length or angle in any triangle.\n    \n    Provide lengths of two sides and the included angle (in degrees) to find the third side,\n    or provide all three sides to find the included angle.\n    \n    Parameters:\n    a (float): Length of side a.\n    b (float): Length of side b.\n    c (float): Length of side c (if known).\n    angle (float): The included angle opposite side c (if known), in degrees.\n    Returns:\n    float: The missing side length or angle.\n    Examples:\n    To find side length:\n    >>> law_of_cosines(5, 6, angle=45)\n    4.2555845661906435\n    To find angle:\n    >>> law_of_cosines(5, 6, 3)\n    40.537678207739306\n    \"\"\"\n    if c is None and angle is None:\n        raise ValueError(\"Either 'c' or 'angle' must be provided.\")\n    \n    if angle is not None:\n        # Calculate side c\n        angle_radians = math.radians(angle)\n        return math.sqrt(a**2 + b**2 - 2*a*b*math.cos(angle_radians))\n    \n    if c is not None:\n        # Calculate angle in radians\n        angle_radians = math.acos((a**2 + b**2 - c**2) / (2 * a * b))\n        return math.degrees(angle_radians)\n    \n    raise ValueError(\"Incorrect parameters. Provide either angle to find side c, or side c to find angle.\")", "def cosine_law(side_a, side_b, angle_c_rad=None, side_c=None):\n    \"\"\"\n    Apply the Law of Cosines to find a side length or an angle in a triangle.\n    Parameters:\n    - side_a (float): Length of side a.\n    - side_b (float): Length of side b.\n    - angle_c_rad (float, optional): Angle C in radians (opposite side c).\n    - side_c (float, optional): Length of side c.\n    Returns:\n    - float: Depending on the given values, returns the length of side c, or the angle C in radians.\n    Example:\n    - cosine_law(3, 4, angle_c_rad=math.radians(90)) returns 5.0 (side c)\n    - cosine_law(5, 5, side_c=8) returns the angle in radians.\n    \"\"\"\n    if angle_c_rad:\n        # Calculate side c using Law of Cosines\n        return math.sqrt(side_a**2 + side_b**2 - 2 * side_a * side_b * math.cos(angle_c_rad))\n    elif side_c:\n        # Calculate angle using Law of Cosines\n        angle_c_rad = math.acos((side_a**2 + side_b**2 - side_c**2) / (2 * side_a * side_b))\n        return angle_c_rad\n    else:\n        raise ValueError(\"Invalid or insufficient parameters provided.\")"], ["def cosine_addition(angle1, angle2):\n    \"\"\"\n    Compute the cosine of the sum of two angles.\n    Parameters\n    ----------\n    angle1 : float\n        The first angle in radians.\n    angle2 : float\n        The second angle in radians.\n    Returns\n    -------\n    float\n        The cosine of the sum of the two angles.\n    Examples\n    --------\n    >>> cosine_addition(np.pi/3, np.pi/4)\n    0.3535533905932738\n    \"\"\"\n    from math import cos, sin\n    return cos(angle1) * cos(angle2) - sin(angle1) * sin(angle2)", "def cosine_subtraction(angle1, angle2):\n    \"\"\"\n    Compute the cosine of the difference between two angles.\n    Parameters\n    ----------\n    angle1 : float\n        The first angle in radians.\n    angle2 : float\n        The second angle in radians.\n    Returns\n    -------\n    float\n        The cosine of the difference between the two angles.\n    Examples\n    --------\n    >>> cosine_subtraction(np.pi/3, np.pi/4)\n    0.7071067811865476\n    \"\"\"\n    from math import cos, sin\n    return cos(angle1) * cos(angle2) + sin(angle1) * sin(angle2)"], ["def cosine_identity(angle_degrees, identity_type='double'):\n    \"\"\"\n    Calculate the cosine of an angle based on the specified trigonometric identity.\n    Parameters:\n        angle_degrees (float): The angle in degrees for which to calculate the cosine.\n        identity_type (str): Type of identity to use ('double', 'half', or 'sum_difference').\n                              'double' calculates cos(2x), 'half' calculates cos(x/2),\n                              and 'sum_difference' calculates cos(x + y) or cos(x - y),\n                              where additional parameters x and y are required.\n    \n    Returns:\n        float: The cosine of the angle based on the selected identity.\n        \n    Examples:\n        >>> cosine_identity(30, 'double')\n        0.5000000000000001\n        \n        >>> cosine_identity(45, 'half')\n        0.9238795325112867\n    \"\"\"\n    x_rad = np.radians(angle_degrees)\n    if identity_type == 'double':\n        return np.cos(2 * x_rad)\n    elif identity_type == 'half':\n        return np.cos(x_rad / 2)\n    else:\n        raise ValueError(\"Unsupported identity type specified. Use 'double' or 'half'.\")", "def cosine_sum_difference_identity(x_degrees, y_degrees, operation='sum'):\n    \"\"\"\n    Calculate the cosine of the sum or difference of two angles.\n    Parameters:\n        x_degrees (float): The first angle in degrees.\n        y_degrees (float): The second angle in degrees.\n        operation (str): Operation to perform ('sum' or 'difference').\n    Returns:\n        float: The cosine of the sum or difference of the angles.\n        \n    Examples:\n        >>> cosine_sum_difference_identity(30, 45, 'sum')\n        0.7071067811865477\n        \n        >>> cosine_sum_difference_identity(30, 45, 'difference')\n        0.9659258262890683\n    \"\"\"\n    x_rad = np.radians(x_degrees)\n    y_rad = np.radians(y_degrees)\n    if operation == 'sum':\n        return np.cos(x_rad + y_rad)\n    elif operation == 'difference':\n        return np.cos(x_rad - y_rad)\n    else:\n        raise ValueError(\"Unsupported operation. Use 'sum' or 'difference'.\")", "def cosine_identity(angle1, angle2=None, operation='double', in_degrees=True):\n    \"\"\"\n    Applies various cosine identities to given angles: double angle, half angle, sum, and difference.\n    Parameters:\n    - angle1 : float\n        The primary angle for the operation, in degrees if in_degrees is True, otherwise in radians.\n    - angle2 : float, optional\n        The secondary angle for sum or difference operations, in the same unit as angle1.\n    - operation : str, optional\n        The operation to perform: 'double', 'half', 'sum', 'difference'.\n    - in_degrees : bool, optional\n        Whether the input angles are in degrees (True) or radians (False).\n    Returns:\n    - float\n        Result of the trigonometric operation.\n    Examples:\n    >>> cosine_identity(60, operation='double', in_degrees=True)\n    0.5\n    >>> cosine_identity(60, operation='half', in_degrees=True)\n    0.8660254037844387\n    >>> cosine_identity(45, 30, operation='sum', in_degrees=True)\n    0.9659258262890683\n    >>> cosine_identity(90, 30, operation='difference', in_degrees=True)\n    0.7071067811865476\n    \"\"\"\n    angle1_rad = np.deg2rad(angle1) if in_degrees else angle1\n    if operation == 'double':\n        return np.cos(2 * angle1_rad)\n    elif operation == 'half':\n        return np.cos(0.5 * angle1_rad)\n    elif operation in ['sum', 'difference']:\n        angle2_rad = np.deg2rad(angle2) if in_degrees else angle2\n        if operation == 'sum':\n            return np.cos(angle1_rad + angle2_rad)\n        elif operation == 'difference':\n            return np.cos(angle1_rad - angle2_rad)\n    else:\n        raise ValueError(\"Unsupported operation type. Choose 'double', 'half', 'sum', or 'difference'.\")"], ["def compute_cosine(angle, in_degrees=True):\n    \"\"\"\n    Compute the cosine of the given angle which can be in degrees or radians.\n    Parameters:\n    angle : float\n        The angle for which the cosine is to be computed.\n    in_degrees : bool, optional\n        If True (default), the angle is assumed to be in degrees. If False, the angle is assumed to be in radians.\n    Returns:\n    float\n        The cosine of the given angle.\n    Examples:\n    >>> compute_cosine(60)\n    0.5\n    >>> compute_cosine(np.pi/3, in_degrees=False)\n    0.5\n    \"\"\"\n    if in_degrees:\n        angle = np.deg2rad(angle)\n    return np.cos(angle)", "def compute_cosine(angle, in_degrees=True, symbolic=False):\n    \"\"\"\n    Computes the cosine of an angle. Can handle both numeric and symbolic computations.\n    Parameters:\n    - angle : float or sympy.Symbol\n        The angle for which to compute the cosine. Can be a numeric value or a symbolic variable.\n    - in_degrees : bool, optional\n        If True, the angle is assumed to be in degrees. If False, the angle is assumed to be in radians.\n    - symbolic : bool, optional\n        If True, compute the cosine symbolically. If False, compute the cosine numerically.\n        \n    Returns:\n    - float or sympy expression\n        The cosine of the angle.\n    Examples:\n    >>> compute_cosine(45, in_degrees=True)\n    0.7071067811865476\n    >>> theta = sp.Symbol('theta')\n    >>> compute_cosine(theta, symbolic=True)\n    cos(theta)\n    \"\"\"\n    if symbolic:\n        angle = sp.Symbol('angle') if isinstance(angle, (int, float)) else angle\n        return sp.cos(angle if not in_degrees else sp.rad(angle))\n    else:\n        angle_rad = angle if not in_degrees else np.deg2rad(angle)\n        return np.cos(angle_rad)"], ["def normalize_angle(angle):\n    \"\"\"\n    Normalize a given angle to the interval [0, 2*pi].\n    Parameters\n    ----------\n    angle : float\n        The angle in radians to be normalized.\n    Returns\n    -------\n    float\n        The normalized angle within the range [0, 2*np.pi].\n    Examples\n    --------\n    >>> normalize_angle(7 * np.pi)\n    3.141592653589793\n    \"\"\"\n    from numpy import pi\n    return angle % (2 * pi)"], ["def cosine_of_sum(angle1, angle2, in_degrees=True):\n    \"\"\"\n    Calculate the cosine of the sum of two angles using the cosine addition formula.\n    Parameters:\n    angle1 : float\n        The first angle.\n    angle2 : float\n        The second angle.\n    in_degrees : bool, optional\n        If True (default), angles are given in degrees. If False, angles are given in radians.\n    Returns:\n    float\n        The cosine of the sum of the two angles.\n    Examples:\n    >>> cosine_of_sum(30, 45)\n    0.7071067811865477\n    >>> cosine_of_sum(np.pi/6, np.pi/4, in_degreddes=False)\n    0.7071067811865477\n    \"\"\"\n    if in_degrees:\n        angle1 = np.deg2rad(angle1)\n        angle2 = np.deg2rad(angle2)\n    return np.cos(angle1 + angle2)"], ["def solve_cosine_equation(a, b, c):\n    \"\"\"\n    Solve a cosine equation of the form a*cos(x) + b*sin(x) = c using trigonometric identities.\n    \n    Parameters:\n        a (float): Coefficient of cosine.\n        b (float): Coefficient of sine.\n        c (float): Right-hand side constant.\n    Returns:\n        list of floats: Possible values of x (in radians) that satisfy the equation.\n        \n    Examples:\n        >>> solve_cosine_equation(1, -1, 0)  # cos(x) - sin(x) = 0\n        [0.7853981633974483, 3.9269908169872414]\n    \"\"\"\n    # This is an example solving method demonstrating the application;\n    # it assumes solutions can be directly calculated for basic cases.\n    r = math.sqrt(a**2 + b**2)\n    phi = math.atan2(b, a)\n    possible_solutions = [math.acos(c / r) + phi, -math.acos(c / r) + phi]\n    return possible_solutions"], ["def find_cosine_at_special_angles(angle_degrees):\n    \"\"\"\n    Find cosine value for special angles (0, 30, 45, 60, 90 degrees etc.) with precise fixed results.\n    \n    Parameters:\n        angle_degrees (int): Special angle in degrees commonly found in geometric problems.\n    \n    Returns:\n        float: Exact cosine value for the given special angle.\n    \n    Examples:\n        >>> find_cosine_at_special_angles(45)\n        0.7071067811865476\n        >>> find_cosine_at_special_angles(90)\n        0.0\n    \"\"\"\n    special_angles = {\n        0: 1.0, \n        30: np.sqrt(3)/2,\n        45: np.sqrt(2)/2,\n        60: 0.5,\n        90: 0.0,\n        120: -0.5,\n        135: -np.sqrt(2)/2,\n        150: -np.sqrt(3)/2,\n        180: -1.0,\n        270: 0.0,\n        360: 1.0\n    }\n    return special_angles.get(angle_degrees, calculate_cosine(angle_degrees))"], ["def cosine_to_tangent_half_angle(cos_value):\n    \"\"\"\n    Convert a cosine value to its corresponding tangent of half the angle.\n    Parameters:\n        cos_value (float): The cosine value.\n    Returns:\n        float: The tangent of half the corresponding angle.\n    \n    Examples:\n        >>> cosine_to_tangent_half_angle(0.5)\n        1.7320508075688767\n    \"\"\"\n    # tangent half-angle formula: tan(x/2) = sqrt((1 - cos(x)) / (1 + cos(x)))\n    return np.sqrt((1 - cos_value) / (1 + cos_value))"], ["def arccosine_value(cos_value):\n    \"\"\"\n    Compute the principal value of the arccosine of a given cosine value.\n    Parameters\n    ----------\n    cos_value : float\n        The cosine value for which to calculate the arccosine.\n    Returns\n    -------\n    float\n        The principal value of the arccosine of the given cosine value.\n    Examples\n    --------\n    >>> arccosine_value(1)\n    0.0\n    >>> arccosine_value(0)\n    1.5707963267948966\n    \"\"\"\n    from numpy import arccos\n    return arccos(cos_value)"], ["def cosine_sum_identity(angle1_rad, angle2_rad):\n    \"\"\"\n    Compute the cosine of the sum of two angles using the cosine sum identity.\n    \n    Parameters:\n        angle1_rad (float): The first angle in radians.\n        angle2_rad (float): The second angle in radians.\n    \n    Returns:\n        float: The cosine of the sum of the two angles.\n    \n    Examples:\n        >>> cosine_sum_identity(math.pi / 4, math.pi / 4)\n        0.5\n    \"\"\"\n    return cosine_of_angle(angle1_rad) * cosine_of_gb(angle2_rad) - math.sin(angle1_rad) * math.sin(angle2_rad)", "def cosine_difference_identity(angle1_rad, angle2_rad):\n    \"\"\"\n    Compute the cosine of the difference of two angles using the cosine difference identity.\n    \n    Parameters:\n        angle1_rad (float): The first angle in radians.\n        angle2_rad (float): The second angle in radians.\n    \n    Returns:\n        float: The cosine of the difference of the two angles.\n    \n    Examples:\n        >>> cosine_difference_identity(math.pi / 3, math.pi / 6)\n        0.75\n    \"\"\"\n    return cosine_of_angle(angle1_rad) * cosine_of_angle(angle2_rad) + math.sin(angle1_rad) * math.sin(angle2_rad)"], ["def cosine_inverse(cos_value):\n    \"\"\"\n    Calculate the angle in degrees from a cosine value using the arccos function.\n    \n    Parameters:\n        cos_value (float): The cosine value for which to find the angle.\n    \n    Returns:\n        float: The angle in degrees that has the given cosine value.\n    \n    Examples:\n        >>> cosine_inverse(0.5)\n        60.0\n        >>> cosine_inverse(1)\n        0.0\n    \"\"\"\n    return np.degrees(np.arccos(cos_value))", "def angle_from_cosine(cos_value, in_degrees=True):\n    \"\"\"\n    Compute the angle in degrees or radians from a given cosine value using arccos.\n    Parameters:\n    cos_value : float\n        The cosine value for which to compute the corresponding angle.\n    in_degrees : bool, optional\n        If True (default), the returned angle is in degrees. If False, the angle is in radians.\n    Returns:\n    float\n        The angle corresponding to the given cosine value.\n    Examples:\n    >>> angle_from_cosine(0.5)\n    60.0\n    >>> angle_from_cosine(0.5, in_degrees=False)\n    1.0471975511965976\n    \"\"\"\n    angle_rad = np.arccos(cos_value)\n    if in_degrees:\n        return np.rad2deg(angle_rad)\n    return angle_rad"], ["def normalize_angle(angle_degrees):\n    \"\"\"\n    Normalize an angle to [0, 360] degrees using cosine's periodicity properties.\n    \n    Parameters:\n        angle_degrees (float): The original angle in degrees that may exceed a single rotation.\n    \n    Returns:\n        float: Normalized angle within a 0 to 360 degree range.\n    \n    Examples:\n        >>> normalize_angle(450)\n        90.0\n        >>> normalize_angle(-30)\n        330.0\n    \"\"\"\n    return angle_degrees % 360"], ["def compute_cosine(angle):\n    \"\"\"\n    Compute the cosine of a given angle in radians.\n    Parameters\n    ----------\n    angle : float\n        The angle in radians for which the cosine is to be calculated.\n    Returns\n    -------\n    float\n        The cosine of the given angle.\n    Examples\n    --------\n    >>> compute_cosine(np.pi)\n    -1.0\n    >>> compute_cosine(0)\n    1.0\n    \"\"\"\n    from math import cos\n    return cos(angle)"], ["def simplify_angle(angle, in_degrees=True):\n    \"\"\"\n    Simplify an angle using the periodicity of the cosine function.\n    Parameters:\n    angle : float\n        The original angle, potentially outside the usual range.\n    in_degrees : bool, optional\n        If True (default), angles are handled in degrees. If False, angles are handled in radians.\n    Returns:\n    float\n        The angle simplified to within the fundamental period [0, 360) degrees or [0, 2π) radians.\n    Examples:\n    >>> simplify_angle(720)   # Simplifies to 0 degrees.\n    0\n    >>> simplify_angle(7*np.pi, in_degrees=False)   # Simplifies to π.\n    3.141592653589793\n    \"\"\"\n    if in_degrees:\n        return angle % 360\n    return angle % (2 * np.pi)"], ["def calculate_cosine(angle_degrees):\n    \"\"\"\n    Calculate the cosine of an angle given in degrees.\n    \n    Parameters:\n        angle_degrees (float): The angle in degrees for which to compute the cosine.\n    \n    Returns:\n        float: The cosine of the given angle.\n        \n    Examples:\n        >>> calculate_cosine(60)\n        0.5\n        >>> calculate_cosine(90)\n        0.0\n    \"\"\"\n    angle_radians = np.radians(angle_degrees)\n    return np.cos(angle_radians)"]], "Trigonometric Functions": [["def trigonometric_values(angle_radians, function_name=\"sin\"):\n    \"\"\"\n    Calculate trigonometric value of a given angle in radians for specified function.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians for which the trigonometric value is calculated.\n    - function_name: str, default 'sin'\n        The trigonometric function to calculate. Options include 'sin', 'cos', 'tan',\n        'sec' (1/cos), 'csc' (1/sin), 'cot' (1/tan).\n        \n    Returns:\n    - float\n        The result of the trigonometric function.\n    Examples:\n    >>> trigonometric_values(np.pi/2, 'sin')\n    1.0\n    >>> trigonometric_values(np.pi/3, 'cos')\n    0.5\n    \"\"\"\n    trig_functions = {\n        'sin': np.sin,\n        'cos': np.cos,\n        'tan': np.tan,\n        'sec': lambda x: 1 / np.cos(x),\n        'csc': lambda x: 1 / np.sin(x),\n        'cot': lambda x: 1 / np.tan(x)\n    }\n    \n    if function_name not in trig_functions:\n        raise ValueError(f\"Unsupported function '{function_name}'. Choose among 'sin', 'cos', 'tan', 'sec', 'csc', 'cot'.\")\n    \n    return trig_functions[function_name](angle_radians)", "def evaluate_trigonometric_function(func_name, x, in_degrees=True):\n    \"\"\"\n    Evaluate basic trigonometric functions and their reciprocals.\n    \n    Parameters:\n    func_name (str): Name of trigonometric function ('sin', 'cos', 'tan', 'sec', 'csc', 'cot')\n    x (float or array_like): The input angle(s) at which to evaluate the function. Can be a single angle or an array.\n    in_degrees (bool): If True, the angle x is given in degrees, otherwise in radians.\n    \n    Returns:\n    float or np.ndarray: Result of the trigonometric function evaluated at x.\n    \n    Examples:\n    >>> evaluate_trigonometric_function('sin', 90)\n    1.0\n    >>> evaluate_trigonometric_function('cot', np.array([0, 45, 90]), in_degrees=True)\n    array([        inf,  1. ,  0.])\n    \"\"\"\n    # Convert angle to radians if necessary\n    if in_degrees:\n        x = np.radians(x)\n    \n    # Evaluate the function\n    if func_name == 'sin':\n        return np.sin(x)\n    elif func_name == 'cos':\n        return np.cos(x)\n    elif func_name == 'tan':\n        return np.tan(x)\n    elif func_name == 'sec':\n        return 1 / np.cos(x)\n    elif func_name == 'csc':\n        return 1 / np.sin(x)\n    elif func_name == 'cot':\n        return 1 / np.tan(x)\n    else:\n        raise ValueError(f\"Unknown function {func_name}\")", "def trig_calculator(func_name, angle, degrees=False):\n    \"\"\"\n    Calculate the trigonometric function value for a given angle.\n    Parameters:\n    - func_name (str): Name of the trigonometric function ('sin', 'cos', 'tan', 'csc', 'sec', 'cot').\n    - angle (float): The angle at which to compute the function.\n    - degrees (bool, optional): Set to True if the angle is in degrees, False if in radians.\n    Returns:\n    - float or sympy expression: Value of the trigonometric function at the specified angle.\n    Examples:\n    >>> trig_calculator('cos', 90, True)\n    6.123233995736766e-17\n    >>> trig_calculator('tan', sp.pi/4)\n    1.0\n    \"\"\"\n    if degrees:\n        angle = np.deg2rad(angle)\n    trig_functions = {\n        'sin': np.sin,\n        'cos': np.cos,\n        'tan': np.tan,\n        'csc': lambda x: 1 / np.sin(x),\n        'sec': lambda x: 1 / np.cos(x),\n        'cot': lambda x: 1 / np.tan(x)\n    }\n    if func_name not in trig_functions:\n        raise ValueError(\"Invalid trigonometric function specified.\")\n    return trig_functions[func_name](angle)"], ["def simplify_trigonometric_expression(expr):\n    \"\"\"\n    Simplify expressions involving trigonometric functions using symbolic manipulation.\n    \n    Parameters:\n    - expr: sympy.Expr or str\n        The trigonometric expression to simplify.\n        \n    Returns:\n    - sympy.Expr\n        The simplified expression.\n    \n    Examples:\n    >>> x = symbols('x')\n    >>> simplify_trigonometric_expression(sin(x)**2 + cos(x)**2)\n    1\n    \"\"\"\n    x = symbols('x')  # Assuming 'x' is the variable in the expression; adjust as necessary\n    expr = simplify(expr)\n    return expr", "def simplify_trig_expression(expression):\n    \"\"\"\n    Simplify a trigonometric expression using sympy.\n    Parameters:\n    - expression (str): The trigonometric expression to simplify.\n    Returns:\n    - sympy expression: Simplified version of the input expression.\n    Examples:\n    >>> simplify_trig_expression('sin(x)**2 + cos(x)**2')\n    1\n    >>> simplify_trig_expression('sin(x + pi/4)')\n    sqrt(2)/2 + sin(x)\n    \"\"\"\n    x = sp.symbols('x')\n    expr = sp.sympify(expression)\n    return sp.simplify(expr)"], ["def trig_identity_sinusoidal_properties(angle_radians, identity=\"pythagorean\"):\n    \"\"\"\n    Calculate trigonometric properties based on given identities.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians.\n    - identity: str, default \"pythagorean\"\n        The identity to use for calculations. Currently supports 'pythagorean'.\n        \n    Returns:\n    - float\n        The value calculated using the specified identity.\n    Examples:\n    >>> trig_identity_sinusoidal_properties(np.pi/4, 'pythagorean')\n    1.0\n    \"\"\"\n    if identity == \"pythagorean\":\n        return sin(angle_radians)**2 + cos(angle_radians)**2"], ["def co_function_transformations(angle_radians, original='sin'):\n    \"\"\"\n    Calculate the co-function value of an angle transformation.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians for which the co-function value needs to be evaluated.\n    - original: str, default 'sin'\n        The original trigonometric function to transform. Options: 'sin' or 'cos'.\n        \n    Returns:\n    - float\n        The result of the co-function transformation.\n    Examples:\n    >>> co_function_transformations(np.pi/4, 'sin')\n    0.7071067811865476\n    >>> co_function_transformations(np.pi/4, 'cos')\n    0.7071067811865476\n    \"\"\"\n    if original == 'sin':\n        return np.cos(angle_radians)\n    elif original == 'cos':\n        return np.sin(angle_radians)\n    else:\n        raise ValueError(\"Invalid function for co-function transformations. Use 'sin' or 'cos'.\")"], ["def simplify_trig_identity(expr, x, identity):\n    \"\"\"\n    Simplify or transform a trigonometric expression based on a given identity.\n    \n    Parameters:\n    expr (str): Trigonometric expression involving basic trig functions.\n    x (float): The angle variable used in the expression.\n    identity (str): A specific identity to apply ('Pythagorean', 'co-function', etc.)\n    \n    Returns:\n    sympy.Expr : Simplified or transformed trigonometric expression using SymPy.\n    \n    Examples:\n    >>> simplify_trig_identity('sin(x)**2 + cos(x)**2', 'x', 'Pythagorean')\n    1\n    >>> simplify_trig_identity('sin(90 - x)', 'x', 'co-function')\n    cos(x)\n    \"\"\"\n    from sympy import symbols, sin, cos, simplify\n    \n    angle = symbols(x)\n    if identity == 'Pythagorean':\n        # Replace sin^2(angle) + cos^2(angle) with 1\n        expr = expr.replace('sin(' + x + ')**2 + cos(' + x + ')**2', '1')\n    elif identity == 'co-function':\n        # Replace sin(90 - angle) with cos(angle) and vice versa\n        expr = expr.replace('sin(90 - ' + x + ')', 'cos(' + x + ')')\n        expr = expr.replace('cos(90 - ' + x + ')', 'sin(' + x + ')')\n    # Use sympy to simplify the expression\n    return simplify(expr)"]], "Polar Coordinates": [["def cis(theta):\n    \"\"\"\n    Compute the complex number equivalent using cis function cis(θ) = cos(θ) + i*sin(θ).\n    \n    Parameters:\n    theta : float\n        The angle in radians.\n    \n    Returns:\n    complex\n        The complex number.\n    \n    Examples:\n    >>> cis(np.pi/4)\n    (0.7071067811865476+0.7071067811865475j)\n    \"\"\"\n    return np.cos(theta) + 1j * np.sin(theta)", "def compute_cis(theta):\n    \"\"\"\n    Compute the cis of an angle, which is cos(theta) + i*sin(theta).\n    \n    Parameters:\n    - theta (float): The angle in radians.\n    \n    Returns:\n    - complex: The resulting complex number in Cartesian form.\n    \"\"\"\n    return cmath.cos(theta) + cmath.sin(theta) * 1j"], ["def normalize_angle(theta):\n    \"\"\"\n    Normalizes an angle into the range [0, 2π).\n    Parameters:\n    - theta (float): The angle in radians.\n    Returns:\n    - float: Normalized angle in radians.\n    Examples:\n    >>> normalize_angle(9*np.pi/4)\n    2.356194490192345\n    \"\"\"\n    return theta % (2 * np.pi)", "def angle_normalize(theta):\n    \"\"\"\n    Normalize an angle to be within the range [0, 2π).\n    \n    Parameters:\n    theta : float\n        The angle in radians.\n    \n    Returns:\n    float\n        The normalized angle in radians.\n    \n    Examples:\n    >>> angle_normalize(7*np.pi)\n    1.1415926535897931\n    \"\"\"\n    theta = theta % (2 * np.pi)\n    return theta", "def normalize_angle(theta):\n    \"\"\"\n    Normalize an angle in radians to the range [0, 2*pi).\n    \n    Parameters:\n    - theta (float): The angle in radians.\n    \n    Returns:\n    - float: Normalized angle in radians within the range [0, 2*pi).\n    \"\"\"\n    theta %= (2 * math.pi)\n    return theta"], ["def trig_values(angle, unit='radians'):\n    \"\"\"\n    Calculate sine and cosine values for a given angle in radians or degrees.\n    \n    Parameters:\n    - angle (float): The angle for which to compute trigonometric values.\n    - unit (str): The unit of the angle ('radians' or 'degrees'). Default is 'radians'.\n    \n    Returns:\n    - dict: A dictionary with keys 'sin' and 'cos' containing respective trigonometric values.\n    \n    Examples:\n    >>> trig_values(math.pi/4)\n    {'sin': 0.7071067811865475, 'cos': 0.7071067811865476}\n    \n    >>> trig_values(45, unit='degrees')\n    {'sin': 0.7071067811865476, 'cos': 0.7071067811865476}\n    \"\"\"\n    if unit == 'degrees':\n        angle = math.radians(angle)\n    sin_val = math.sin(angle)\n    cos_val = math.cos(angle)\n    return {'sin': sin_val, 'cos': cos_val}", "def trigonometric_values_at_angle(rad_angle):\n    \"\"\"\n    Compute sine and cosine values of a given angle in radians.\n    \n    Parameters:\n        rad_angle (float): The angle in radians.\n    \n    Returns:\n        dict: Dictionary with sine and cosine values.\n    Examples:\n        >>> trigonometric_values_at_angle(math.pi/4)\n        {'sin': 0.7071067811865475, 'cos': 0.7071067811865476}\n    \"\"\"\n    sine_value = math.sin(rad_angle)\n    cosine_value = math.cos(rad_angle)\n    return {'sin': sine_value, 'cos': cosine_value}"], ["def polar_to_cartesian(r, theta):\n    \"\"\"\n    Convert polar coordinates to Cartesian coordinates.\n    \n    Parameters:\n    - r (float): The radial coordinate (distance from the origin).\n    - theta (float): The angular coordinate in radians.\n    \n    Returns:\n    - tuple (float, float): The Cartesian coordinates (x, y).\n    \n    Examples:\n    >>> polar_to_cartesian(5, math.pi/4)\n    (3.5355339059327378, 3.5355339059327378)\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "def cartesian_to_polar(x, y):\n    \"\"\"\n    Convert Cartesian coordinates to polar coordinates.\n    \n    Parameters:\n    - x (float): The x-coordinate.\n    - y (float): The y-coordinate.\n    \n    Returns:\n    - tuple (float, float): The polar coordinates (r, theta) where theta is in radians.\n    \n    Examples:\n    >>> cartesian_to_polar(3, 4)\n    (5.0, 0.9272952180016122)\n    \"\"\"\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return (r, theta)", "def polar_to_cartesian(r, theta):\n    \"\"\"\n    Converts polar coordinates to Cartesian coordinates.\n    Parameters:\n    - r (float): The radius or magnitude of the point.\n    - theta (float): The angle in radians.\n    Returns:\n    - tuple: Cartesian coordinates (x, y).\n    Examples:\n    >>> polar_to_cartesian(5, np.pi/4)\n    (3.5355339059327378, 3.5355339059327373)\n    \"\"\"\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x, y)", "def cartesian_to_polar(x, y):\n    \"\"\"\n    Converts Cartesian coordinates to polar coordinates.\n    Parameters:\n    - x (float): x-coordinate.\n    - y (float): y-coordinate.\n    Returns:\n    - tuple: Polar coordinates (r, theta) where theta is in radian.\n    Examples:\n    >>> cartesian_to_polar(3, 4)\n    (5.0, 0.9272952180016122)  # corresponds to angle in radians\n    \"\"\"\n    r = np.sqrt(x**2 + y**2)\n    theta = np.arctan2(y, x)\n    return (r, theta)", "def polar_to_cartesian(r, theta):\n    \"\"\"\n    Convert polar coordinates to Cartesian coordinates.\n    \n    Parameters\n    ----------\n    r : float\n        Radius, the distance from the origin to the point.\n    theta : float\n        Angle in radians, the angle measured from the positive x-axis.\n    \n    Returns\n    -------\n    tuple\n        A tuple (x, y) representing Cartesian coordinates.\n    \n    Examples\n    --------\n    >>> polar_to_cartasy(1, np.pi/4)\n    (0.7071067811865476, 0.7071067811865475)\n    \n    >>> polar_to_cartasy(2, np.pi)\n    (-2.0, 2.4492935982947064e-16)\n    \"\"\"\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x, y)", "def polar_to_cartesian(r, theta):\n    \"\"\"\n    Convert polar coordinates to Cartesian coordinates.\n    \n    Parameters:\n    r : float\n        The radial distance.\n    theta : float\n        The angle in radians.\n    \n    Returns:\n    tuple\n        The Cartesian coordinates (x, y).\n    \n    Examples:\n    >>> polar_to_cartesian(5, np.pi/4)\n    (3.5355339059327378, 3.5355339059327378)\n    \"\"\"\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x, y)", "def cartesian_to_polar(x, y):\n    \"\"\"\n    Convert Cartesian coordinates to polar coordinates with the angle in radians.\n    \n    Parameters:\n    x : float\n        The x-coordinate.\n    y : float\n        The y-coordinate.\n    \n    Returns:\n    tuple\n        The polar coordinates (radius, angle).\n    \n    Examples:\n    >>> cartesian_to_polar(3, 4)\n    (5.0, 0.9272952180016122)\n    \"\"\"\n    r = np.hypot(x, y)\n    theta = np.arctan2(y, x)\n    return (r, theta)", "def polar_to_cartesian(r, theta):\n    \"\"\"\n    Convert polar coordinates to Cartesian coordinates.\n    \n    Parameters:\n        r (float): The radial distance in polar coordinates.\n        theta (float): The angle in radians in polar coordinates.\n    Returns:\n        tuple: A tuple representing Cartesian coordinates (x, y).\n    Examples:\n        >>> polar_to_cartesian(2, math.pi/4)\n        (1.4142135623730951, 1.4142135623730951)\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "def cartesian_to_polar(x, y):\n    \"\"\"\n    Convert Cartesian coordinates to polar coordinates.\n    \n    Parameters:\n    - x (float): The x-coordinate.\n    - y (float): The y-coordinate.\n    \n    Returns:\n    - r (float): The radial coordinate (distance from the origin).\n    - theta (float): The angular coordinate in radians, within the range [0, 2*pi).\n    \"\"\"\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    if theta < 0:\n        theta += 2 * math.pi\n    return r, theta", "def polar_to_cartesian(r, theta):\n    \"\"\"\n    Convert polar coordinates to Cartesian coordinates.\n    \n    Parameters:\n    - r (float): The radial coordinate.\n    - theta (float): The angular coordinate in radians.\n    \n    Returns:\n    - x (float): The x-coordinate.\n    - y (float): The y-coordinate.\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return x, y"], ["def sum_symmetric_cis(n):\n    \"\"\"\n    Calculates the sum of cis(θ) terms for a symmetric sequence around 0 to 2π.\n    \n    Parameters:\n    n : int\n        The number of terms to sum around the unit circle.\n    \n    Returns:\n    float\n        The result of the sum, recognized as a real number due to symmetry.\n    \n    Examples:\n    >>> sum_symmetric_cis(4)\n    4.0\n    \"\"\"\n    # calculate θ increment for symmetric terms\n    theta_inc = 2 * np.pi / n\n    thetas = [k * theta_inc for k in range(n)]\n    result = sum(cis(theta) for theta in thetas)\n    return np.real(result)"], ["def complex_polar_sum(r1, theta1, r2, theta2):\n    \"\"\"\n    Sum two complex numbers given in polar form and return the result in polar form.\n    \n    Parameters:\n    - r1 (float): Magnitude of the first complex number.\n    - theta1 (float): Angle (in radians) of the first complex number.\n    - r2 (float): Magnitude of the second complex number.\n    - theta2 (float): Angle (in radians) of the second complex number.\n    \n    Returns:\n    - r (float): Resultant magnitude.\n    - theta (float): Resultant angle (in radians, within the range [0, 2*pi)).\n    \"\"\"\n    complex1 = cmath.rect(r1, theta1)\n    complex2 = cmath.rect(r2, theta2)\n    result = complex1 + complex2\n    polar_result = cmath.polar(result)\n    magnitude = polar_result[0]\n    angle = polar_result[1]\n    if angle < 0:\n        angle += 2 * math.pi\n    return magnitude, angle"], ["def distance_between_polar(p1, p2):\n    \"\"\"\n    Calculate the Euclidean distance between two points given in polar coordinates.\n    \n    Parameters:\n    p1 : tuple\n        Polar coordinates (r1, theta1) for the first point.\n    p2 : tuple\n        Polar coordinates (r2, theta2) for the second point.\n        \n    Returns:\n    float\n        The Euclidean distance between the two points.\n    \n    Examples:\n    >>> distance_between_polar((1, 0), (1, np.pi))\n    2.0\n    \"\"\"\n    x1, y1 = polar_to_cartesian(*p1)\n    x2, y2 = polar_to_cartesian(*p2)\n    return np.hypot(x2 - x1, y2 - y1)"], ["def complex_polar(r, theta):\n    \"\"\"\n    Returns the complex number representation in polar form: r * e^(i*theta)\n    Parameters:\n    - r (float): The magnitude of the complex number.\n    - theta (float): The angle in radians.\n    Returns:\n    - complex: The complex number calculated as r*e^(i*theta).\n    Examples:\n    >>> complex_polar(2, np.pi/2)\n    1.4695761589768238e-16 + 2j\n    \"\"\"\n    return r * np.exp(1j * theta)"], ["def cylindrical_to_rectangular(r, theta, z):\n    \"\"\"\n    Convert cylindrical coordinates to rectangular coordinates.\n    \n    Parameters:\n        r (float): The radial distance in the xy-plane.\n        theta (float): The angle in radians from the positive x-axis in the xy-plane.\n        z (float): The height along the z-axis.\n    Returns:\n        tuple: A tuple representing rectangular coordinates (x, y, z).\n    Examples:\n        >>> cylindrical_to_rectangular(1, math.pi/2, 3)\n        (6.123233995736766e-17, 1.0, 3)\n    \"\"\"\n    x, y = polar_to_cartesian(r, theta)\n    return (x, y, z)"]]}