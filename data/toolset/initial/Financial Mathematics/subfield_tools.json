{"Compound Interest": [["def calculate_compound_interest(principal, rate, time, compounding_frequency=1, output='future_value'):\n    \"\"\"\n    Calculate the future value of an investment subject to compound interest over time or the interest earned.\n    Parameters:\n    principal : float\n        The initial amount of money invested (also called the principal).\n    rate : float\n        The annual interest rate in decimal (e.g., 0.05 for 5%).\n    time : float\n        The time in years for which the money is invested or borrowed.\n    compounding_frequency : int, optional\n        The number of times that interest is compounded per year. Default is 1 (annually).\n    output : str, optional\n        Desired output: 'future_value' for the future value of the investment including interest,\n        'interest_earned' for only the interest earned.\n    Returns:\n    float\n        The future value of the investment or the interest earned, based on the `output` parameter.\n    Examples:\n    >>> calculate_compound_interest(1000, 0.05, 5)\n    1276.28\n    >>> calculate_compound_interest(1000, 0.05, 5, compounding_frequency=4)\n    1283.36\n    >>> calculate_compound_interest(1000, 0.05, 5, output='interest_earned')\n    276.28\n    >>> calculate_compound_interest(1000, 0.05, 5, compounding_frequency=12, output='interest_earned')\n    283.58\n    \"\"\"\n    # Calculate the future value\n    compound_rate = (1 + rate / compoundingfrequency) ** (compoundingfrequency * time)\n    future_value = principal * compound_rate\n    \n    # Determine the desired output\n    if output == 'interest_earned':\n        return round(future_smooth_value - pb_value, 2)\n    elif output == 'future_value':\n        return round(future_value, 2)\n    raise ValueError(\"Invalid output request. Use 'future_value' or 'interest_earned'.\")", "def compound_interest(principal, annual_rate, compounding_frequency, time_period):\n    \"\"\"\n    Calculates the compound interest for a given principal amount, interest rate, compounding frequency, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The annual interest rate in decimal (e.g., 0.05 for 5%).\n    - compounding_frequency (str): The compounding frequency. It can be 'annually', 'semi-annually', 'quarterly', 'monthly'.\n    - time_period (int): The time period over which the money is invested or borrowed.\n    Returns:\n    - float: The future value of the investment or loan.\n    Example:\n    >>> compound_interest(1000, 0.05, 'quarterly', 5)\n    1283.36\n    \"\"\"\n    frequency_dict = {'annually': 1, 'semi-annually': 2, 'quarterly': 4, 'monthly': 12}\n    if compounding_frequency in frequency_dict:\n        n = frequency_dict[compounding_frequency]\n    else:\n        raise ValueError('Invalid compounding frequency')\n    compound_rate = annual_rate / n\n    compounds = n * time_period\n    future_value = principal * (1 + compound_rate) ** compounds\n    return round(future_value, 2)", "def calculate_interest(principal, rate, time, compounding_frequency='annual', interest_type='compound'):\n    \"\"\"\n    Calculates the future value of an investment based on the interest type (compound or simple).\n    Parameters:\n    - principal (float): The initial amount of money invested.\n    - rate (float): The interest rate as a decimal.\n    - time (float): The time period over which the interest is calculated.\n    - compounding_frequency (str): The frequency of compounding ('annual', 'semiannual', 'quarterly', 'monthly', 'daily').\n    - interest_type (str): Type of interest calculation ('compound', 'simple').\n    Returns:\n    - float: The future value of the investment after interest.\n    Examples:\n    - calculate_interest(1000, 0.05, 5) # compound annually\n    - calculate_embedding(1000, 0.04, 10, 'monthly', 'simple') # simple interest with monthly rate\n    \"\"\"\n    freq_map = {'annual': 1, 'semiannual': 2, 'quarterly': 4, 'monthly': 12, 'daily': 365}\n    if interest_type.lower() == 'compound':\n        periods = freq_map[compounding_frequency] * time\n        rate_per_period = rate / freq_map[compounding_frequency]\n        future_value = principal * (1 + rate_per_period) ** periods\n    else:  # simple interest\n        future_value = principal * (1 + rate * time)\n    \n    return future_value", "def compound_interest_calculator(principal, rate, time, compound_frequency=1):\n    \"\"\"\n    Calculate the amount accumulated after a given time with compound interest.\n    Parameters:\n        principal (float): Initial amount of money invested/deposited.\n        rate (float): Annual interest rate as a decimal.\n        time (float): Total time the money is invested/deposited for in years.\n        compound_frequency (int): The number of times the interest is compounded per year.\n    Returns:\n        float: The future value of the investment.\n    Examples:\n        >>> compound_interest_calculator(1000, 0.05, 5)\n        1276.2815625000003\n        >>> compound_interest_calculator(1000, 0.05, 5, 12)\n        1283.3596700619565\n    \"\"\"\n    import math\n    # Calculate the compounded interest\n    amount = principal * (1 + rate / compound_first) ** (compound_frequency * time)\n    return amount", "def interest_and_principal_calculator(goal_amount=None, principal=None, rate=None, time=None, compound_frequency=1):\n    \"\"\"\n    Calculate either the total interest earned or the required principal given the other parameters.\n    Parameters:\n        goal_amount (float, optional): The future value of the investment. Provide this if solving for principal.\n        principal (float, optional): Initial amount of money invested. Provide this if solving for goal amount or interest.\n        rate (float): Annual interest rate as a decimal.\n        time (float): Total time the money is invested for in years.\n        compound_frequency (int): The number of times the interest is compounded per year.\n    Returns:\n        float: Depending on what is provided, it returns either the future value, total interest earned, or required principal.\n    Examples:\n        >>> interest_and_principal_calculator(principal=1000, rate=0.05, time=5)\n        1276.2815625000003\n        >>> interest_and_principal_calculator(goal_amount=1500, rate=0.05, time=5)\n        1138.6152732910183\n    \"\"\"\n    if goal_amount is None and principal is not None:\n        # Calculate future value if principal is given\n        future_value = compound_interest_calculator(principal, rate, time, compound_frequency)\n        return future_value\n    elif principal is None and goal_amount is not None:\n        # Solve for the required principal to reach the goal amount\n        from scipy.optimize import newton\n        func = lambda x: compound_interest_calculator(x, rate, time, compound_frequency) - goal_amount\n        calculated_principal = newton(func, goal_amount / (1 + rate) ** time)  # Initial guess\n        return calculated_principal\n    else:\n        raise ValueError(\"Invalid input configuration: either specify goal_amount or principal, not both.\")", "def calculate_compound_interest(principal, rate, time, compounding_frequency='annually'):\n    \"\"\"\n    Compute the compound interest based on the principal, interest rate, \n    compounding frequency, and time period.\n    Parameters:\n        principal (float): Initial amount of money deposited or borrowed.\n        rate (float): Annual interest rate (in decimal, e.g., 0.05 for 5%).\n        time (int or float): The total time the money is invested or borrowed for.\n        compounding_frequency (str): The frequency with which the interest is compounded\n                                     (e.g., 'annually', 'semi-annually', 'quarterly', 'monthly').\n    Returns:\n        float: Future value of the investment or loan after the specified time period.\n    Examples:\n        >>> calculate_compound_interest(1000, 0.05, 5, 'annually')\n        1276.2815625000003\n        >>> calculate_compound_interest(1000, 0.05, 5, 'quarterly')\n        1280.0832022413115\n    \"\"\"\n    import numpy as np\n    \n    if compounding_frequency == 'annually':\n        n = 1\n    elif compounding_frequency == 'semi-annually':\n        n = 2\n    elif compounding_frequency == 'quarterly':\n        n = 4\n    elif compounding_frequency == 'monthly':\n        n = 12\n    else:\n        raise ValueError(\"Unsupported compounding frequency.\")\n    # Compound interest formula:\n    # A = P * (1 + r/n)^(n*t)\n    amount = principal * (1 + rate / n) ** (n * time)\n    return amount"], ["def compound_interest(principal, annual_rate, periods_per_year, years):\n    \"\"\"\n    Calculate the compound interest accumulated over a certain number of years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    periods_per_year : int\n        The number of times interest is compounded per year.\n    years : float\n        The time the money is invested or borrowed for, in years.\n    Returns\n    -------\n    float\n        The accumulated amount after compounding.\n    \n    Examples\n    --------\n    >>> compound_interest(1000, 0.05, 1, 10)\n    1628.8946248160008\n    \n    >>> compound_interest(1000, 0.05, 4, 10)\n    1648.5960857350588\n    \"\"\"\n    compounded_amount = principal * (1 + annual_rate / periods_per_year) ** (periods_per_year * years)\n    return compounded_amount", "def compound_interest_annually(principal, annual_rate, years):\n    \"\"\"\n    Calculate the compound interest accumulated over a certain number of years with annual compounding.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    years : float\n        The time the money is invested or borrowed for, in years.\n    Returns\n    -------\n    float\n        The accumulated amount after compounding annually.\n    \n    Examples\n    --------\n    >>> compound_interest_annually(1000, 0.05, 10)\n    1628.8946248160008\n    \"\"\"\n    return compound_interest(principal, annual_rate, 1, years)", "def interest_earned(principal, annual_rate, periods_per_year, years):\n    \"\"\"\n    Calculate the interest earned over a certain number of years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    periods_per_year : int\n        The number of times interest is compounded per year.\n    years : float\n        The time the money is invested or borrowed for, in years.\n    Returns\n    -------\n    float\n        The interest earned after compounding.\n    \n    Examples\n    --------\n    >>> interest_earned(1000, 0.05, 1, 10)\n    628.8946248160008\n    \n    >>> interest_earned(1000, 0.05, 4, 10)\n    648.5960857350588\n    \"\"\"\n    compounded_amount = compound_interest(principal, annual_rate, periods_per_year, years)\n    return compounded_amount - principal"], ["def simple_interest(principal, annual_rate, time_period):\n    \"\"\"\n    Calculates the simple interest for a given principal amount, annual interest rate, and time period.\n    Parameters:\n    - principal (float): The initial amount of money.\n    - annual_rate (float): The simple annual interest rate in decimal (e.g., 0.03 for 3%).\n    - time_period (int): The time period over which the money is invested or borrowed, in years.\n    Returns:\n    - float: The total amount after interest.\n    Example:\n    >>> simple_interest(1000, 0.03, 5)\n    1150.0\n    \"\"\"\n    total_amount = principal * (1 + annual_rate * time_period)\n    return round(total_amount, 2)", "def calculate_simple_interest(principal, rate, time):\n    \"\"\"\n    Calculate the total amount after applying simple interest to a principal over time.\n    Parameters:\n        principal (float): The initial amount of money.\n        rate (float): The annual interest rate (expressed as a decimal).\n        time (int or float): The time for which the money is borrowed or invested.\n    Returns:\n        float: The total amount after time years.\n    Examples:\n        >>> calculate_simple_interest(1000, 0.05, 3)\n        1150.0\n    \"\"\"\n    # Simple interest formula: \n    # Total Amount = Principal * (1 + rate * time)\n    total_amount = principal * (1 + rate * time)\n    return total_amount"], ["def custom_round(value, nearest):\n    \"\"\"\n    Custom round function to round the value to the nearest specified amount.\n    Parameters:\n        value (float): The numeric value to be rounded.\n        nearest (float): The increment to which to round the value.\n    Returns:\n        float: The rounded value.\n    Examples:\n        >>> custom_round(132.765, 0.01)  # round to nearest cent\n        132.77\n        >>> custom_round(132.765, 1)  # round to nearest dollar\n        133.0\n    \"\"\"\n    import math\n    return round(value / nearest) * nearest"], ["def financial_round(value, decimals=2):\n    \"\"\"\n    Rounds a value to a specified number of decimal places, typically used for financial purposes.\n    Parameters:\n    - value (float): The value to be rounded.\n    - decimals (int): The number of decimal places to round to.\n    Returns:\n    - float: The rounded value.\n    Examples:\n    - financial_round(123.4567)\n    - financial_round(123.4567, 4)\n    \"\"\"\n    rounded_value = round(value, decimals)\n    return rounded_value"], ["def compare_compounding_frequencies(principal, annual_rate, year_list, freq_list):\n    \"\"\"\n    Compare the accumulated amounts under different compounding frequencies over specified years.\n    Parameters\n    ----------\n    principal : float\n        The initial amount of money (the principal).\n    annual_rate : float\n        The annual interest rate (as a decimal, e.g., 0.05 for 5%).\n    year_list : list of float\n        A list of time periods (in years) to compare.\n    freq_list : list of int\n        A list of compounding frequencies to compare (e.g., 1 for annual, 12 for monthly).\n    Returns\n    -------\n    dict\n        A dictionary with keys as tuples representing the (years, frequency) and values as the compounded amounts.\n    \n    Examples\n    --------\n    >>> compare_compounding_frequencies(1000, 0.05, [10], [1, 4, 12])\n    {(10, 1): 1628.8946248160008, (10, 4): 1648.5960857350588, (10, 12): 1647.0094976902805}\n    \"\"\"\n    results = {}\n    for t in year_list:\n        for n in freq_list:\n            accumulated = compound_interest(principal, annual_rate, n, t)\n            results[(t, n)] = accumulated\n    return results"], ["def calculate_present_value(future_value, rate, periods):\n    \"\"\"\n    Calculate the present value given the future value, annual interest rate, and periods.\n    Parameters:\n        future_value (float): The value at a future date.\n        rate (float): Annual interest rate expressed as fraction (e.g., 0.05 for 5%).\n        periods (int or float): Number of periods into the future the value is considered.\n    Returns:\n        float: Present value based on given inputs.\n    Examples:\n        >>> calculate_present_value(2000, 0.05, 5)\n        1565.2891607605546\n    \"\"\"\n    # Present Value = Future Value / (1 + rate)^periods\n    present_value = future_value / (1 + rate) ** periods\n    return present_value"], ["def convert_annual_rate(annual_rate, target_frequency):\n    \"\"\"\n    Converts an annual interest rate to various compounding frequencies.\n    Parameters:\n    - annual_rate (float): The annual interest rate as a decimal.\n    - target_frequency (str): The frequency to convert to ('semiannual', 'quarterly', 'monthly', 'daily').\n    Returns:\n    - float: The converted interest rate for the specified frequency.\n    Examples:\n    - convert_annual_rate(0.05, 'monthly')\n    - convert_annual_rate(0.07, 'daily')\n    \"\"\"\n    freq_map = {'semiannual': 2, 'quarterly': 4, 'monthly': 12, 'daily': 365}\n    base = (1 + annual_rate)\n    power = 1 / freq_map[target.cfrequency]\n    converted_rate = base**power - 1\n    return converted_rate"]]}