{"Sine and Cosine Functions": [{"tool": "def sine(angle: float, radians: bool = True) -> float:\n    \n    if not radians:\n        angle = math.radians(angle)\n    return math.sin(angle)", "subfield": "Sine and Cosine Functions", "tool_name": "sine", "tool_type": "function", "description": "Calculate the sine of an angle provided in radians or degrees.", "docstring": "Calculate the sine of an angle provided in radians or degrees.\n    Parameters:\n    angle (float): The angle.\n    radians (bool): If True, the angle is in radians; if False, it's in degrees.\n    Returns:\n    float: The sine of the angle.", "Freq": 7, "TSR": 7, "experience_pool": "- Experience: The `to_radians` function is missing in the original tool code.\n- Solution: Modify the `sine` function to directly handle the conversion of degrees to radians using `math.radians` if the `radians` parameter is set to False.\n- Updated tool code with docstring provided."}, {"tool": "def simplify_trig_expression(exp):\n    \n    from sympy import simplify\n    simplified_expression = simplify(exp)\n    return simplified_expression", "subfield": "Sine and Cosine Functions", "tool_name": "simplify_trig_expression", "tool_type": "function", "description": "Use sympy to simplify the given trigonometric expression.", "docstring": "Use sympy to simplify the given trigonometric expression.\n    \n    Parameters\n    ----------\n    exp : sympy expression\n        The trigonometric expression to be simplified.\n    Returns\n    -------\n    simplified_expression: sympy expression\n        The simplified form of the input expression.\n    Example\n    --------\n    >> from sympy import symbols, cos, sin\n    >> x = symbols('x')\n    >> expression = sin(x)**2 + cos(x)**2\n    >> simplify_trig_expression(expression)", "Freq": 30, "TSR": 11, "experience_pool": "Experience 1:\nProblem: Find the phase shift of the graph of $y = 2 \\sin \\left( 2x + \\frac{\\pi}{3} \\right).$\nAnswer: -\\frac{\\pi}{6}\n\nSolution:\n```python\nfrom sympy import symbols, sin\n\ndef solution():\n    x = symbols('x')\n    expression = 2 * sin(2*x + (1/3)*pi)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: 2*sin(2*x + 1.0471975511966)\n\nExperience 2:\nProblem: As $x$ ranges over all real numbers, find the range of\n\\[f(x) = \\sin^4 x + \\cos ^2 x.\\]Enter your answer using interval notation.\nAnswer: \\left[ \\frac{3}{4}, 1 \\right]\n\nSolution:\n```python\nfrom sympy import symbols, sin, cos\n\ndef solution():\n    x = symbols('x')\n    expression = sin(x)**4 + cos(x)**2\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: sin(x)**4 + cos(x)**2\n\nExperience 3:\nProblem: Simplify\n\\[\\frac{\\cos x}{1 + \\sin x} + \\frac{1 + \\sin x}{\\cos x}.\\]\nAnswer: 2 \\sec x\n\nSolution:\n```python\nfrom sympy import symbols, sin, cos\n\ndef solution():\n    x = symbols('x')\n    expression = cos(x) / (1 + sin(x)) + (1 + sin(x)) / cos(x)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: 2/cos(x)\n\nExperience 4:\nProblem: Express $\\sin 4x + \\sin 6x$ as a product of trigonometric functions.\nAnswer: 2 \\sin 5x \\cos x\n\nSolution:\n```python\nfrom sympy import symbols, sin, cos\n\ndef solution():\n    x = symbols('x')\n    expression = sin(4*x) + sin(6*x)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nprint(solution())\n```\n\nOutput: sin(4*x) + sin(6*x)\n\nExperience 5:\nProblem: The expression $\\cos x + \\cos 3x + \\cos 7x + \\cos 9x$ can be written in the equivalent form\n\\[a \\cos bx \\cos cx \\cos dx\\]for some positive integers $a,$ $b,$ $c,$ and $d.$  Find $a + b + c + d.$\nAnswer: 13\n\nSolution:\n```python\nfrom sympy import symbols, cos\n\ndef solution():\n    x = symbols('x')\n    expression = cos(x) + cos(3*x) + cos(7*x) + cos(9*x)\n    simplified_expression = simplify_trig_expression(expression)\n    return simplified_expression\n\nresult = solution()\na = result.coeff(cos(x))\nb = result.coeff(x)\nc = result.coeff(3*x)\nd = result.coeff(7*x)\nsum_abcd = a + b + c + d\nprint(sum_abcd)\n```\n\nOutput: 1"}, {"tool": "def calculate_sine_cosine(opposite, adjacent, hypotenuse):\n    \n    if opposite is None or adjacent is None or hypotenuse is None:\n        raise ValueError(\"All sides of the triangle must be provided.\")\n    if opposite < 0 or adjacent < 0 or hypotenuse < 0:\n        raise ValueError(\"Side lengths cannot be negative.\")\n    if opposite**2 + adjacent**2 < hypotenuse**2:\n        raise ValueError(\"Invalid triangle.\")\n    sine = opposite / hypotenuse\n    cosine = adjacent / hypotenuse\n    return {\"sine\": sine, \"cosine\": cosine}", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_sine_cosine", "tool_type": "function", "description": "Calculate the sine and cosine of an angle in a triangle.", "docstring": "Calculate the sine and cosine of an angle in a triangle.\n    Parameters:\n    opposite (float): The length of the side opposite the angle.\n    adjacent (float): The length of the side adjacent to the angle.\n    hypotenuse (float): The length of the hypotenuse.\n    Returns:\n    dict: A dictionary with the sine and cosine of the angle.", "Freq": 8.0, "TSR": 1, "experience_pool": "- Experience: When using the calculate_sine_cosine function, make sure to provide valid values for the opposite, adjacent, and hypotenuse parameters. All sides of the triangle must be provided, and side lengths cannot be negative. If any of the parameters are missing or invalid, the function will raise a ValueError with an appropriate error message.\n- Experience: The calculate_sine_cosine function now handles all types of triangles, not just right triangles. If the sum of the squares of the two shorter sides is not greater than the square of the longest side, the function will raise a ValueError with the message \"Invalid triangle.\""}, {"tool": "def evaluate_sin_cos(angle, in_degrees=True):\n    \n    if in_degrees:\n        angle = math.radians(angle)\n        \n    sin_val = math.sin(angle)\n    cos_val = math.cos(angle)\n    \n    return sin_val, cos_val", "subfield": "Sine and Cosine Functions", "tool_name": "evaluate_sin_cos", "tool_type": "function", "description": "This function takes an angle and returns its sine and cosine.", "docstring": "This function takes an angle and returns its sine and cosine.\n    \n    Parameters\n    ----------\n    angle : float\n        The angle, measured in degrees by default, to compute the sine and cosine of.\n    in_degrees : bool, optional\n        A flag that specifies whether the input angle is in degrees. Default is True.\n        \n    Returns\n    -------\n    tuple\n        The sine and cosine of the angle as a tuple (sin, cos).", "Freq": 24.5, "TSR": 17.0, "experience_pool": "Experience 1:\nProblem: Compute $\\arccos (\\sin 2)$. All functions are in radians.\nAnswer: $2 - \\frac{\\pi}{2}$\nSolution:\n```python\nimport math\n\ndef solution():\n    angle = 2\n    sin_val, _ = evaluate_sin_cos(angle)\n    cos_angle = math.acos(sin_val)\n    result = cos_angle\n    return result\n\nprint(solution())\n```\nOutput: $1.5358897417550101$\n\nExperience 2:\nProblem: Compute $\\csc \\frac{\\pi}{14} - 4 \\cos \\frac{2 \\pi}{7}$.\nAnswer: $2$\nSolution:\n```python\nimport math\n\ndef solution():\n    angle1 = math.pi / 14\n    angle2 = 2 * math.pi / 7\n\n    sin_val1, cos_val1 = evaluate_sin_cos(angle1, in_degrees=False)\n    sin_val2, cos_val2 = evaluate_sin_cos(angle2, in_degrees=False)\n\n    result = (4 * cos_val1 * cos_val2 - 4 * sin_val2 * cos_val2) / sin_val2\n    return result\n\nprint(solution())\n```\nOutput: $0.615957056739808$\n\nExperience 3:\nProblem: In right triangle $ABC$ with $\\angle B = 90^\\circ$, we have $2\\sin A = 3\\cos A$. What is $\\sin A$?\nAnswer: $\\frac{3\\sqrt{13}}{13}$\nSolution:\n```python\ndef solution():\n    \"\"\"Find sin(A) in the right triangle ABC where 2sin(A) = 3cos(A).\"\"\"\n    sin_val, cos_val = evaluate_sin_cos(45)  # sin(45) = cos(45) = 1/sqrt(2)\n    sin_A = 3 / (2 * cos_val)\n    result = sin_A\n    return result\n\nprint(solution())\n```\nOutput: $2.1213203435596424$"}, {"tool": "def calculate_side_given_angle(angle, side, function, angle_unit=\"radians\"):\n    if angle_unit == \"degrees\":\n        angle = math.radians(angle)\n    \n    if function == \"sine\":\n        return side / math.sin(angle)\n    elif function == \"cosine\":\n        return side / math.cos(angle)\n    elif function == \"tangent\":\n        return side / math.tan(angle)\n    else:\n        raise ValueError(\"Invalid function parameter. Must be 'sine', 'cosine', or 'tangent'.\")", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_side_given_angle", "tool_type": "function", "description": "None", "docstring": null, "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The tool can handle cases where the angle is given in degrees by adding an optional angle_unit parameter. This allows for more flexibility in using the tool.\n- Experience: The tool can handle cases where the known side is the hypotenuse of the triangle. It accurately calculates the length of the other side using the appropriate trigonometric function.\n- Experience: The tool can handle cases where the function parameter is not provided or is not \"sine\" or \"cosine\". It raises a ValueError with a descriptive error message.\n- Experience: The tool has an improved docstring that explains the purpose of the function and the expected input parameters.\n- Experience: The tool has been modified to handle the \"tangent\" function as well. It accurately calculates the length of the other side using the tangent function."}, {"tool": "def calculate_angle_given_ratio(ratio, function):\n    \n    if function == \"sine\":\n        if -1 <= ratio <= 1:\n            return math.asin(ratio)\n        else:\n            raise ValueError(\"Invalid ratio. Ratio must be between -1 and 1.\")\n    elif function == \"cosine\":\n        if -1 <= ratio <= 1:\n            return math.acos(ratio)\n        else:\n            raise ValueError(\"Invalid ratio. Ratio must be between -1 and 1.\")\n    else:\n        raise ValueError(\"Invalid function. Function must be 'sine' or 'cosine'.\")", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_angle_given_ratio", "tool_type": "function", "description": "Calculate an angle given the sine or cosine ratio.", "docstring": "Calculate an angle given the sine or cosine ratio.\n    Parameters:\n    ratio (float): The sine or cosine ratio.\n    function (str): The function to use (\"sine\" or \"cosine\").\n    Returns:\n    float: The angle in radians.", "Freq": 19.5, "TSR": 15.5, "experience_pool": "Experience 1: The tool code now has a docstring that provides information on how to use the function and what it returns.\nExperience 2: The tool code now handles invalid inputs by raising ValueError with appropriate error messages.\nExperience 3: The tool code now handles the case when the ratio is outside the range [-1, 1] and raises ValueError with an appropriate error message."}, {"tool": "def calculate_sine_period(b: float) -> float:\n    \n    period = 2 * math.pi / b\n    return period", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_sine_period", "tool_type": "function", "description": "Calculate the period of a sine function given the value of b in the general form y = a*sin(bx + c) + d.", "docstring": "Calculate the period of a sine function given the value of b in the general form y = a*sin(bx + c) + d.\n    Parameters:\n    b (float): The value of b in the sine function.\n    Returns:\n    float: The period of the sine function.", "Freq": 6, "TSR": 3, "experience_pool": "- Problem: What is the period of $y = \\sin 3x $?\n  Answer: \\frac{2\\pi}{3}\n  ```python\n  def solution():\n      period = calculate_sine_period(3)\n      return period\n\n  print(solution())\n  ```\n  Output: 2.0943951023931953\n  \n- Problem: What is the period of $y = \\sin 2x $?\n  Answer: \\frac{2\\pi}{2} = \\pi\n  ```python\n  def solution():\n      period = calculate_sine_period(2)\n      return period\n\n  print(solution())\n  ```\n  Output: 3.141592653589793\n\n- Problem: What is the period of $y = \\sin 7x $?\n  Answer: \\frac{2\\pi}{7}\n  ```python\n  def solution():\n      period = calculate_sine_period(7)\n      return period\n\n  print(solution())\n  ```\n  Output: 0.8975979010256552"}, {"tool": "def calculate_triangle_area(side1: float, side2: float, side3: float) -> float:\n    \n    # Check if the given side lengths can form a valid triangle\n    if side1 + side2 <= side3 or side1 + side3 <= side2 or side2 + side3 <= side1:\n        raise ValueError(\"Invalid side lengths. Cannot form a triangle.\")\n    # Calculate the semi-perimeter of the triangle\n    s = (side1 + side2 + side3) / 2\n    # Calculate the area of the triangle using Heron's formula\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_triangle_area", "tool_type": "function", "description": "Calculate the area of a triangle given the lengths of its sides.\n    Args:\n        side1 (float): Length of side 1.\n        side2 (float): Length of side 2.\n        side3 (float): Length of side 3.\n    Returns:\n        float: Area of the triangle.\n    Raises:\n        ValueError: If the given side lengths cannot form a valid triangle.", "docstring": "Calculate the area of a triangle given the lengths of its sides.\n    Args:\n        side1 (float): Length of side 1.\n        side2 (float): Length of side 2.\n        side3 (float): Length of side 3.\n    Returns:\n        float: Area of the triangle.\n    Raises:\n        ValueError: If the given side lengths cannot form a valid triangle.", "Freq": 0, "TSR": 0}], "Sine Function": [{"tool": "def sine_of_angle(angle, unit='radians'):\n    \n    if unit == 'degrees':\n        angle = np.deg2rad(angle)\n    return np.sin(angle)", "subfield": "Sine Function", "tool_name": "sine_of_angle", "tool_type": "function", "description": "Compute the sine of a given angle with the option to specify the angle's unit.", "docstring": "Compute the sine of a given angle with the option to specify the angle's unit.\n    Parameters:\n    - angle (float): The angle for which the sine value is calculated.\n    - unit (str): The unit of the angle ('radians' or 'degrees'). Default is 'radians'.\n    Returns:\n    - float: Sine of the given angle.\n    Examples:\n    >>> sine_of_angle(np.pi / 2)\n    1.0\n    >>> sine_of_angle(90, unit='degrees')\n    1.0", "Freq": 48, "TSR": 46}, {"tool": "def solution():\n    \n    value = -math.pi/2\n    result = math.sin(value)\n    return result", "subfield": "Sine Function", "tool_name": "solution", "tool_type": "function", "description": "Find the sine of -pi/2 and return the result.", "docstring": "Find the sine of -pi/2 and return the result.", "Freq": 8.0, "TSR": 7.5, "experience_pool": "Problem: Find the sine of -π/2.\nAnswer: -1.0\nSolution: To find the sine of -π/2, use the math.sin function as follows:\n```python\nimport math\n\ndef solution():\n    \"\"\"Find the sine of -pi/2 and return the result.\"\"\"\n    value = -math.pi/2\n    result = math.sin(value)\n    return result\n\nprint(solution())\n```\nOutput: -1.0"}, {"tool": "def solution():\n    \n    value = -math.pi/2\n    result = math.sin(value)\n    return result", "subfield": "Sine Function", "tool_name": "solution", "tool_type": "function", "description": "Find sin(-pi/2) and return the result.", "docstring": "Find sin(-pi/2) and return the result.", "Freq": 7.0, "TSR": 6, "experience_pool": "- Problem: Find $\\sin \\left( -\\frac{\\pi}{2} \\right)$.\n  Answer: -1\n  Solution: The correct way to find the sine of $-\\frac{\\pi}{2}$ is to use the math.sin function, not the arcsine function. The arcsine function calculates the inverse of the sine function. To find the sine of $-\\frac{\\pi}{2}$, use the following code:\n  ```python\n  import math\n  \n  def solution():\n      \"\"\"Find sin(-pi/2) and return the result.\"\"\"\n      value = -math.pi/2\n      result = math.sin(value)\n      return result\n  \n  print(solution())\n  ```\n  Output: -1.0"}, {"tool": "def area_of_isosceles_trapezoid(base1, base2, angle):\n    \n    # Calculate the height of the trapezoid\n    height = (base1 - base2) / (2 * np.sin(angle))\n    \n    # Calculate the area of the trapezoid\n    area = (base1 + base2) * height / 2\n    \n    return area", "subfield": "Sine Function", "tool_name": "area_of_isosceles_trapezoid", "tool_type": "function", "description": "Calculate the area of an isosceles trapezoid using the arcsin function.", "docstring": "Calculate the area of an isosceles trapezoid using the arcsin function.\n    Parameters:\n    - base1 (float): The length of the longer base of the trapezoid.\n    - base2 (float): The length of the shorter base of the trapezoid.\n    - angle (float): The angle in radians between the longer base and the slant side.\n    Returns:\n    - area (float): The area of the isosceles trapezoid.", "Freq": 1, "TSR": 1}, {"tool": "def transform_trigonometric_sum(expression):\n    \n    # Split the expression into individual terms\n    terms = expression.split(' + ')\n    \n    # Transform each term using the double-angle formula for sine\n    transformed_terms = []\n    for term in terms:\n        angle = term.split('^')[1][:-1]\n        transformed_term = f'(1 - cos({2 * angle})) / 2'\n        transformed_terms.append(transformed_term)\n    \n    # Join the transformed terms back into an expression\n    transformed_expression = ' + '.join(transformed_terms)\n    \n    return transformed_expression", "subfield": "Sine Function", "tool_name": "transform_trigonometric_sum", "tool_type": "function", "description": "Transform a trigonometric sum using identities.", "docstring": "Transform a trigonometric sum using identities.\n    Parameters:\n    - expression (str): The trigonometric sum in the form of 'sin^2(x) + sin^2(2x) + ... + sin^2(nx)'.\n    Returns:\n    - transformed_expression (str): The transformed trigonometric sum using identities.", "Freq": 2, "TSR": 1}], "Tangent Function": [], "Cosine Function": [], "Trigonometric Functions": [], "Polar Coordinates": []}