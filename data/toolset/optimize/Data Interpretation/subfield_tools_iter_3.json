{"Bar Graphs": [{"tool": "def find_min_max_difference(data):\n    \n    values = data.values()\n    min_value = min(values)\n    max_value = max(values)\n    difference = max_value - min_value\n    return min_value, max_value, difference", "subfield": "Bar Graphs", "tool_name": "find_min_max_difference", "tool_type": "function", "description": "Finds the minimum, maximum, and their difference from the bar graph data.", "docstring": "Finds the minimum, maximum, and their difference from the bar graph data.\n    Parameters:\n    - data (dict): A dictionary with numerical values from which min, max and their difference are calculated.\n    Returns:\n    - tuple: A tuple containing minimum value, maximum value, and their difference.\n    \n    Example:\n    >>> find_min_max_difference({'Jan': 50, 'Feb': 75, 'Mar': 65})\n    (50, 75, 25)", "Freq": 0, "TSR": 0}, {"tool": "def analyze_bar_graph_data(data):\n    \n    max_label = max(data, key=data.get)\n    min_label = min(data, key=data.get)\n    response = {\n        'max_value': data[max_label],\n        'max_label': max_label,\n        'min_value': data[min_label],\n        'min_label': min_label,\n        'total_sum': sum(data.values())\n    }\n    # Calculating differences\n    labels = list(data.keys())\n    response['differences'] = {}\n    for i, label1 in enumerate(labels):\n        for label2 in labels[i+1:]:\n            diff_key = f'{label2}-{label1}'\n            response['differences'][diff_key] = data[label2] - data[label1]\n    \n    return response", "subfield": "Bar Graphs", "tool_name": "analyze_bar_graph_data", "tool_type": "function", "description": "Conducts various analyses including max, min, and difference calculations on data extracted from a bar graph.", "docstring": "Conducts various analyses including max, min, and difference calculations on data extracted from a bar graph.\n    Parameters:\n    - data (dict): Dictionary with bar labels as keys and numeric values as values (extracted bar graph data).\n    \n    Returns:\n    - dict: A dictionary containing maximum, minimum, and cumulative sums of the data.\n    \n    Example:\n    >>> data = {'A': 10, 'B': 20, 'C': 15}\n    >>> analyze_bar_graph_data(data)\n    {'max_value': 20, 'max_label': 'B', 'min_value': 10, 'min_label': 'A', \n     'total_sum': 45, 'differences': {'B-A': 10, 'C-A': 5, 'C-B': -5}}", "Freq": 4, "TSR": 2, "experience_pool": "The correct key to access the difference between 'Aaron' and 'Zeb' in the analysis dictionary is 'Zeb-Aaron'."}, {"tool": "def percentages_from_counts(counts):\n    \n    counts = np.array(counts)\n    total = counts.sum()\n    if total == 0:\n        return np.zeros_like(counts)  # Avoid division by zero\n    percentages = 100 * counts / total\n    return percentages", "subfield": "Bar Graphs", "tool_name": "percentages_from_counts", "tool_type": "function", "description": "Given an array of counts, compute the percentage of each count relative to the total count.", "docstring": "Given an array of counts, compute the percentage of each count relative to the total count.\n    Parameters:\n    - counts (np.array): Array or list of counts.\n    Returns:\n    - np.array: Array of percentages corresponding to the given counts.\n    \n    Example:\n    >>> percentages_from_counts([100, 200, 300])\n    array([16.66666667, 33.33333333, 50.        ])", "Freq": 3, "TSR": 1}, {"tool": "def calculate_cumulative_total(data):\n    \n    keys = list(data.keys())\n    cumulative_total = 0\n    result = []\n    for key in keys:\n        cumulative_total += data[key]\n        result.append((key, cumulative_total))\n    return result", "subfield": "Bar Graphs", "tool_name": "calculate_cumulative_total", "tool_type": "function", "description": "Calculates the cumulative total of numerical values from the bar graph data, assuming the keys represent\n    sequential time periods or categories.", "docstring": "Calculates the cumulative total of numerical values from the bar graph data, assuming the keys represent\n    sequential time periods or categories.\n    Parameters:\n    - data (dict): A dictionary with numerical values to be cumulatively totaled.\n    Returns:\n    - list: A list of tuples where each tuple has a key and the cumulative total up to that key.\n    \n    Example:\n    >>> calculate_cumulative_total({'Jan': 50, 'Feb': 75, 'Mar': 65})\n    [('Jan', 50), ('Feb', 125), ('Mar', 190)]", "Freq": 6, "TSR": 3, "experience_pool": "- Problem: The double-bar graph shows the number of home runs hit by McGwire and Sosa during each month of the 1998 baseball season. At the end of which month were McGwire and Sosa tied in total number of home runs?\n  [solution code]\n  Output: Aug\n- Problem: Roger has exactly one of each of the first 22 states' new U.S. quarters. The quarters were released in the same order that the states joined the union. The graph below shows the number of states that joined the union in each decade. What fraction of Roger's 22 coins represents states that joined the union during the decade 1780 through 1789? Express your answer as a common fraction.\n  [solution code]\n  Output: 6/11\n- Problem: The double-bar graph shows the number of home runs hit by McGwire and Sosa during each month of the 1998 baseball season. At the end of which month were McGwire and Sosa tied in total number of home runs?\n  [solution code]\n  Output: Aug\n- Problem: Roger has exactly one of each of the first 22 states' new U.S. quarters. The quarters were released in the same order that the states joined the union. The graph below shows the number of states that joined the union in each decade. What fraction of Roger's 22 coins represents states that joined the union during the decade 1780 through 1789? Express your answer as a common fraction.\n  [solution code]\n  Output: 6/11"}, {"tool": "def plot_data_and_percentage(labels, values, chart_type='bar', figsize=(10, 7), title=\"Data Distribution\"):\n    \n    plt.figure(figsize=figsize)\n    total = sum(values)\n    percentages = [100 * v / total for v in values]\n    if chart_type.lower() == 'bar':\n        plt.bar(labels, values, color='skyblue')\n        plt.ylabel('Values')\n        for i, (value, percentage) in enumerate(zip(values, percentages)):\n            plt.text(i, value, '{:.1f}%'.format(percentage), ha='center', va='bottom')\n    elif chart_type.lower() == 'pie':\n        plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)\n    else:\n        raise ValueError(\"chart_type must be either 'bar' or 'pie'\")\n    plt.title(title)\n    plt.show()", "subfield": "Bar Graphs", "tool_name": "plot_data_and_percentage", "tool_type": "function", "description": "Plots a bar chart or a pie chart from given labels and values and annotates percentages.", "docstring": "Plots a bar chart or a pie chart from given labels and values and annotates percentages.\n    Parameters:\n    - labels (list): A list of labels for the data elements.\n    - values (list or np.array): Numerical data corresponding to the labels.\n    - chart_type (str): Type of chart to plot (\"bar\" or \"pie\"). Default is 'bar'.\n    - figsize (tuple): Figure size, passed as (width, height) in inches.\n    - title (str): Title of the plot.\n    Returns:\n    None. Displays a plot with annotated data percentages.\n    \n    Examples:\n    >>> labels = ['Apples', 'Oranges', 'Bananas']\n    >>> values = [93, 77, 54]\n    >>> plot_data_and_percentage(labels, values, 'bar', title=\"Fruit Sales Data\")\n    \n    >>> plot_data_and_tip_percentage(labels, values, 'pie', title=\"Fruit Market Share\")", "Freq": 1, "TSR": 1}, {"tool": "def extract_data(bar_values):\n    \n    return np.array(bar_values)", "subfield": "Bar Graphs", "tool_name": "extract_data", "tool_type": "function", "description": "Extract data from a given list of bar values representing heights of the bars in a bar graph.", "docstring": "Extract data from a given list of bar values representing heights of the bars in a bar graph.\n    Parameters:\n        bar_values (list or np.array): The numeric heights of the bars in the bar graph.\n    Returns:\n        np.array: An array of the extracted data numbers.\n    Example:\n        >>> extract_data([5, 10, 15, 20])\n        array([ 5, 10, 15, 20])", "Freq": 0, "TSR": 0}, {"tool": "def calculate_mean(data):\n    \n    values = list(data.values())\n    mean = sum(values) / len(values)\n    return mean", "subfield": "Bar Graphs", "tool_name": "calculate_mean", "tool_type": "function", "description": "Calculate the mean (average) of numerical values from the bar graph data.", "docstring": "Calculate the mean (average) of numerical values from the bar graph data.\n    Parameters:\n    data (dict): A dictionary representing the bar graph data, where the keys are the categories and the values are the numerical values.\n    Returns:\n    float: The mean (average) of the numerical values.", "Freq": 3, "TSR": 2}]}