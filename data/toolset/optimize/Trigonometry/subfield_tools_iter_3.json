{"Sine and Cosine Functions": [{"tool": "def sine(angle: float, radians: bool = True) -> float:\n    \n    if not radians:\n        angle = math.radians(angle)\n    return math.sin(angle)", "subfield": "Sine and Cosine Functions", "tool_name": "sine", "tool_type": "function", "description": "Calculate the sine of an angle provided in radians or degrees.", "docstring": "Calculate the sine of an angle provided in radians or degrees.\n    Parameters:\n    angle (float): The angle.\n    radians (bool): If True, the angle is in radians; if False, it's in degrees.\n    Returns:\n    float: The sine of the angle.", "Freq": 4, "TSR": 4, "experience_pool": "- Experience: The `to_radians` function is missing in the original tool code.\n- Solution: Modify the `sine` function to directly handle the conversion of degrees to radians using `math.radians` if the `radians` parameter is set to False.\n- Updated tool code with docstring provided."}, {"tool": "def simplify_trig_expression(exp):\n    \n    from sympy import simplify\n    simplified_expression = simplify(exp)\n    return simplified_expression", "subfield": "Sine and Cosine Functions", "tool_name": "simplify_trig_expression", "tool_type": "function", "description": "Use sympy to simplify the given trigonometric expression.", "docstring": "Use sympy to simplify the given trigonometric expression.\n    \n    Parameters\n    ----------\n    exp : sympy expression\n        The trigonometric expression to be simplified.\n    Returns\n    -------\n    simplified_expression: sympy expression\n        The simplified form of the input expression.\n    Example\n    --------\n    >> from sympy import symbols, cos, sin\n    >> x = symbols('x')\n    >> expression = sin(x)**2 + cos(x)**2\n    >> simplify_trig_expression(expression)", "Freq": 24, "TSR": 8, "experience_pool": "Tool: simplify_trig_expression\nField: Trigonometry\nSubfield: Sine and Cosine Functions\nTool Usage Frequency: 17\nTool Success Rate: 35.294117647058826%\nTool docstring : Use sympy to simplify the given trigonometric expression.\n    \n    Parameters\n    ----------\n    exp : sympy expression\n        The trigonometric expression to be simplified.\n    Returns\n    -------\n    simplified_expression: sympy expression\n        The simplified form of the input expression.\n    Example\n    --------\n    >> from sympy import symbols, cos, sin\n    >> x = symbols('x')\n    >> expression = sin(x)**2 + cos(x)**2\n    >> simplify_trig_expression(expression)"}, {"tool": "def calculate_sine_cosine(opposite, adjacent, hypotenuse):\n    \n    if opposite is None or adjacent is None or hypotenuse is None:\n        raise ValueError(\"All sides of the triangle must be provided.\")\n    \n    if opposite < 0 or adjacent < 0 or hypotenuse < 0:\n        raise ValueError(\"Side lengths cannot be negative.\")\n    \n    if opposite**2 + adjacent**2 != hypotenuse**2:\n        raise ValueError(\"Invalid right triangle.\")\n    \n    sine = opposite / hypotenuse\n    cosine = adjacent / hypotenuse\n    \n    return {\"sine\": sine, \"cosine\": cosine}", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_sine_cosine", "tool_type": "function", "description": "Calculate the sine and cosine of an angle in a right triangle.", "docstring": "Calculate the sine and cosine of an angle in a right triangle.\n    Parameters:\n    opposite (float): The length of the side opposite the angle.\n    adjacent (float): The length of the side adjacent to the angle.\n    hypotenuse (float): The length of the hypotenuse.\n    Returns:\n    dict: A dictionary with the sine and cosine of the angle.", "Freq": 6.0, "TSR": 1, "experience_pool": "- Experience: When using the calculate_sine_cosine function, make sure to provide valid values for the opposite, adjacent, and hypotenuse parameters. All sides of the triangle must be provided, and side lengths cannot be negative. If any of the parameters are missing or invalid, the function will raise a ValueError with an appropriate error message.\n- Experience: When calling the calculate_sine_cosine function, make sure to import the math module if it is needed in the calling code."}, {"tool": "def evaluate_sin_cos(angle, in_degrees=True):\n    \n    if in_degrees:\n        angle = math.radians(angle)\n        \n    sin_val = math.sin(angle)\n    cos_val = math.cos(angle)\n    \n    return sin_val, cos_val", "subfield": "Sine and Cosine Functions", "tool_name": "evaluate_sin_cos", "tool_type": "function", "description": "This function takes an angle and returns its sine and cosine.", "docstring": "This function takes an angle and returns its sine and cosine.\n    \n    Parameters\n    ----------\n    angle : float\n        The angle, measured in degrees by default, to compute the sine and cosine of.\n    in_degrees : bool, optional\n        A flag that specifies whether the input angle is in degrees. Default is True.\n        \n    Returns\n    -------\n    tuple\n        The sine and cosine of the angle as a tuple (sin, cos).", "Freq": 18.5, "TSR": 13.0, "experience_pool": "- Experience 1:\n    - Problem: Compute $\\arccos (\\sin 2)$. All functions are in radians.\n    - Answer: $2 - \\frac{\\pi}{2}$\n    - Solution:\n    ```python\n    import math\n\n    def solution():\n        angle = 2\n        sin_val, _ = evaluate_sin_cos(angle)\n        cos_angle = math.acos(sin_val)\n        result = cos_angle\n        return result\n\n    print(solution())\n    ```\n    - Output: $1.5358897417550101$\n- Experience 2:\n    - Problem: Compute $\\csc \\frac{\\pi}{14} - 4 \\cos \\frac{2 \\pi}{7}$.\n    - Answer: $2$\n    - Solution:\n    ```python\n    import math\n\n    def solution():\n        angle1 = math.pi / 14\n        angle2 = 2 * math.pi / 7\n\n        sin_val1, cos_val1 = evaluate_sin_cos(angle1, in_degrees=False)\n        sin_val2, cos_val2 = evaluate_sin_cos(angle2, in_degrees=False)\n\n        result = (4 * cos_val1 * cos_val2 - 4 * sin_val2 * cos_val2) / sin_val2\n        return result\n\n    print(solution())\n    ```\n    - Output: $0.615957056739808$\n- Experience 3:\n    - Problem: In right triangle $ABC$ with $\\angle B = 90^\\circ$, we have $2\\sin A = 3\\cos A$. What is $\\sin A$?\n    - Answer: $\\frac{3\\sqrt{13}}{13}$\n    - Solution:\n    ```python\n    def solution():\n        \"\"\"Find sin(A) in the right triangle ABC where 2sin(A) = 3cos(A).\"\"\"\n        sin_val, cos_val = evaluate_sin_cos(45)  # sin(45) = cos(45) = 1/sqrt(2)\n        sin_A = 3 / (2 * cos_val)\n        result = sin_A\n        return result\n\n    print(solution())\n    ```\n    - Output: $2.1213203435596424$"}, {"tool": "def calculate_parallelogram_area(base, height):\n    \n    return base * height", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_parallelogram_area", "tool_type": "function", "description": "Calculate the area of a parallelogram given the base and height.", "docstring": "Calculate the area of a parallelogram given the base and height.", "Freq": 2, "TSR": 1, "experience_pool": "Experience 1:\nProblem: One angle of a parallelogram is 120 degrees, and two consecutive sides have lengths of 8 inches and 15 inches. What is the area of the parallelogram? Express your answer in simplest radical form.\nAnswer: 60\\sqrt{3}\n\nSolution:\n```python\nimport math\n\n# Given angle in degrees\nangle = 120\n\n# Calculate the other angle in degrees\nother_angle = 180 - angle\n\n# Given side lengths\nside1 = 8\nside2 = 15\n\n# Calculate the height of the parallelogram using trigonometry\nheight = side1 * math.sin(math.radians(other_angle))\n\n# Calculate the area of the parallelogram using the height and side2\narea = calculate_parallelogram_area(side2, height)\n\nprint(area)\n```\n\nExperience 2:\nProblem: Two boards, one four inches wide and the other six inches wide, are nailed together to form an X. The angle at which they cross is 60 degrees. If this structure is painted and the boards are separated what is the area of the unpainted region on the four-inch board? (The holes caused by the nails are negligible.) Express your answer in simplest radical form.\nAnswer: 16\\sqrt{3}\n\nSolution:\n```python\n# Given side lengths\nbase = 6\nheight = 4\n\n# Calculate the area of the parallelogram\narea = calculate_parallelogram_area(base, height)\n\nprint(area)\n```"}, {"tool": "def evaluate_trig_function(fn, value):\n    \n    result = fn(value)\n    return result", "subfield": "Sine and Cosine Functions", "tool_name": "evaluate_trig_function", "tool_type": "function", "description": "Evaluate trigonometric function at a specific value.", "docstring": "Evaluate trigonometric function at a specific value.\n    Parameters\n    ----------\n    fn : function\n        The trigonometric function; could be sin, cos, etc.\n    value : number\n        The value at which to evaluate the function.\n    Returns\n    -------\n    result : float\n        The result of the function evaluation.\n    Example\n    --------\n    >> evaluate_trig_function(np.sin, np.pi/2)", "Freq": 0, "TSR": 0}, {"tool": "def evaluate_trig_expression(expr, value_dict):\n    \n    # Use np functions for trigonometric calculations\n    for var, value in value_dict.items():\n        exec(f\"{var} = {value}\")\n    return eval(expr, {'sin': np.sin, 'cos': np.cos, 'tan': np.tan, '__builtins__': None}, locals())", "subfield": "Sine and Cosine Functions", "tool_name": "evaluate_trig_expression", "tool_type": "function", "description": "Evaluates a trigonometric expression based on given angle values.", "docstring": "Evaluates a trigonometric expression based on given angle values.\n    \n    Parameters:\n    - expr (str): The trigonometric expression to evaluate (e.g., 'sin(x) + cos(y)').\n    - value_dict (dict): A dictionary with variable-angle mappings in radians (e.g., {'x': np.pi/4, 'y': np.pi/3}).\n    \n    Returns:\n    float: Evaluated result of the expression.\n    Examples:\n    >>> evaluate_trig_expression('sin(x) + cos(y)', {'x': np.pi/4, 'y': np.pi/3})\n    1.3660254037844386", "Freq": 0, "TSR": 0}, {"tool": "def calculate_side_given_angle(angle, side, function, angle_unit=\"radians\"):\n    \n    if angle_unit == \"degrees\":\n        angle = math.radians(angle)\n    \n    if function == \"sine\":\n        return side / math.sin(angle)\n    elif function == \"cosine\":\n        return side / math.cos(angle)\n    else:\n        raise ValueError(\"Invalid function parameter. Must be 'sine' or 'cosine'.\")", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_side_given_angle", "tool_type": "function", "description": "Calculate the length of a side in a right triangle given the length of\n    another side and the sine or cosine of an angle.", "docstring": "Calculate the length of a side in a right triangle given the length of\n    another side and the sine or cosine of an angle.\n    Parameters:\n    angle (float): The angle in radians or degrees, depending on the angle_unit parameter.\n    side (float): The length of a known side.\n    function (str): The function to use (\"sine\" or \"cosine\").\n    angle_unit (str, optional): The unit of the angle (\"radians\" or \"degrees\"). Defaults to \"radians\".\n    Returns:\n    float: The length of the other side.", "Freq": 2, "TSR": 1, "experience_pool": "- Experience: The tool can handle cases where the angle is given in degrees by adding an optional angle_unit parameter. This allows for more flexibility in using the tool.\n- Experience: The tool can handle cases where the known side is the hypotenuse of the triangle. It accurately calculates the length of the other side using the appropriate trigonometric function.\n- Experience: The tool can handle cases where the function parameter is not provided or is not \"sine\" or \"cosine\". It raises a ValueError with a descriptive error message.\n- Experience: The tool has an improved docstring that explains the purpose of the function and the expected input parameters."}, {"tool": "def calculate_angle_given_ratio(ratio, function):\n    \n    if function == \"sine\":\n        if -1 <= ratio <= 1:\n            return math.asin(ratio)\n        else:\n            raise ValueError(\"Invalid ratio. Ratio must be between -1 and 1.\")\n    elif function == \"cosine\":\n        if -1 <= ratio <= 1:\n            return math.acos(ratio)\n        else:\n            raise ValueError(\"Invalid ratio. Ratio must be between -1 and 1.\")\n    else:\n        raise ValueError(\"Invalid function. Function must be 'sine' or 'cosine'.\")", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_angle_given_ratio", "tool_type": "function", "description": "Calculate an angle given the sine or cosine ratio.", "docstring": "Calculate an angle given the sine or cosine ratio.\n    Parameters:\n    ratio (float): The sine or cosine ratio.\n    function (str): The function to use (\"sine\" or \"cosine\").\n    Returns:\n    float: The angle in radians.", "Freq": 13.5, "TSR": 10.5, "experience_pool": "Experience 1: The tool code now has a docstring that provides information on how to use the function and what it returns.\nExperience 2: The tool code now handles invalid inputs by raising ValueError with appropriate error messages.\nExperience 3: The tool code now handles the case when the ratio is outside the range [-1, 1] and raises ValueError with an appropriate error message."}, {"tool": "def calculate_sine_period(b: float) -> float:\n    \n    period = 2 * math.pi / b\n    return period", "subfield": "Sine and Cosine Functions", "tool_name": "calculate_sine_period", "tool_type": "function", "description": "Calculate the period of a sine function given the value of b in the general form y = a*sin(bx + c) + d.", "docstring": "Calculate the period of a sine function given the value of b in the general form y = a*sin(bx + c) + d.\n    Parameters:\n    b (float): The value of b in the sine function.\n    Returns:\n    float: The period of the sine function.", "Freq": 4, "TSR": 2, "experience_pool": "No specific issues or errors reported with the tool."}], "Sine Function": [{"tool": "def sine_of_angle(angle, unit='radians'):\n    \n    if unit == 'degrees':\n        angle = np.deg2rad(angle)\n    return np.sin(angle)", "subfield": "Sine Function", "tool_name": "sine_of_angle", "tool_type": "function", "description": "Compute the sine of a given angle with the option to specify the angle's unit.", "docstring": "Compute the sine of a given angle with the option to specify the angle's unit.\n    Parameters:\n    - angle (float): The angle for which the sine value is calculated.\n    - unit (str): The unit of the angle ('radians' or 'degrees'). Default is 'radians'.\n    Returns:\n    - float: Sine of the given angle.\n    Examples:\n    >>> sine_of_angle(np.pi / 2)\n    1.0\n    >>> sine_of_angle(90, unit='degrees')\n    1.0", "Freq": 21, "TSR": 20}, {"tool": "def calculate_phase_shift(b, c):\n    \n    phase_shift = -c / b\n    return phase_shift", "subfield": "Sine Function", "tool_name": "calculate_phase_shift", "tool_type": "function", "description": "Calculate the phase shift of the sine function of the form y = a * sin(b * x + c).", "docstring": "Calculate the phase shift of the sine function of the form y = a * sin(b * x + c).\n    Parameters:\n    - b (float): Frequency coefficient.\n    - c (float): The constant inside the sine function contributing to the phase shift.\n    Returns:\n    - phase_shift (float): Calculated phase shift. It's positive if the shift is to the left,\n      and negative if the shift is to the right.\n    \n    Examples:\n    - calculate_phase_shift(2, np.pi/4) # Returns inverse of the shift for sin(2x + pi/4)\n    - calculate_phase_shift(1, -np.pi/2) # Returns inverse of the shift for sin(x - pi/2)", "Freq": 8, "TSR": 0, "experience_pool": "Experience 1:\nProblem: Below is the graph of $y = a \\sin (bx + c)$ for some positive constants $a,$ $b,$ and $c.$  Find the smallest possible value of $c.$\nAnswer: $\\frac{\\pi}{2}$\nSolution code:\n```python\ndef solution():\n    c = calculate_phase_shift(4, np.pi/2)\n    return c\n\nprint(solution())\n```\nOutput: -0.39269908169872414\n\nExperience 2:\nProblem: Let $a$ and $b$ be nonnegative real numbers such that $\\sin (ax + b) = \\sin 29x$ for all integers $x.$  Find the smallest possible value of $a.$\nAnswer: $10 \\pi - 29$\nSolution code:\n```python\ndef solution():\n    # Calculate the phase shift of sin(ax + b) = sin(29x)\n    phase_shift = calculate_phase_shift(1, 29)\n    \n    # Find the smallest possible value of a\n    a1 = 29 - 8 * np.pi\n    a2 = -29 + 10 * np.pi\n    \n    # Return the smallest nonnegative real number of the form a\n    result = min(a1, a2)\n    return result\n\nprint(solution())\n```\nOutput: 2.415926535897931\n\nExperience 3:\nProblem: Find the phase shift of the graph of $y =  3 \\sin \\left( x - \\frac{\\pi}{5} \\right).$\nAnswer: $\\frac{\\pi}{5}$\nSolution code:\n```python\ndef solution():\n    \"\"\"Find the phase shift of the graph of y = 3 * sin(x - pi/5).\"\"\"\n    b = 1  # Frequency coefficient for sin(x)\n    c = np.pi/5  # Constant inside the sine function for the given function\n    phase_shift = calculate_phase_shift(b, c)\n    return phase_shift\n\nprint(solution())\n```\nOutput: -0.6283185307179586\n\nExperience 4:\nProblem: Below is the graph of $y = a \\sin (bx + c)$ for some positive constants $a,$ $b,$ and $c.$  Find the smallest possible value of $c.$\nAnswer: $\\frac{\\pi}{2}$\nSolution code:\n```python\ndef solution():\n    c = calculate_phase_shift(4, np.pi/2)\n    return c\n\nprint(solution())\n```\nOutput: -0.39269908169872414\n\nExperience 5:\nProblem: Find the phase shift of the graph of $y =  3 \\sin \\left( x - \\frac{\\pi}{5} \\right).$\nAnswer: $\\frac{\\pi}{5}$\nSolution code:\n```python\ndef solution():\n    \"\"\"Find the phase shift of the graph of y = 3 * sin(x - pi/5).\"\"\"\n    b = 1  # Frequency coefficient for sin(x)\n    c = np.pi/5  # Constant inside the sine function for the given function\n    phase_shift = calculate_phase_shift(b, c)\n    return phase_shift\n\nprint(solution())\n```\nOutput: -0.6283185307179586\n\nExperience 6:\nProblem: Let $a$ and $b$ be nonnegative real numbers such that $\\sin (ax + b) = \\sin 29x$ for all integers $x.$  Find the smallest possible value of $a.$\nAnswer: $10 \\pi - 29$\nSolution code:\n```python\ndef solution():\n    \"\"\"Find the smallest possible value of a in sin(ax + b) = sin(29x) for all integers x.\"\"\"\n    # Calculate the phase shift of sin(ax + b) = sin(29x)\n    phase_shift = calculate_phase_shift(1, 29)\n    \n    # Find the smallest possible value of a\n    a1 = 29 - 8 * np.pi\n    a2 = -29 + 10 * np.pi\n    \n    # Return the smallest nonnegative real number of the form a\n    result = min(a1, a2)\n    return result\n\nprint(solution())\n```\nOutput: 2.415926535897931"}, {"tool": "def arcsine_of_value(value):\n    \n    if not -1 <= value <= 1:\n        raise ValueError(\"Input value must be within the range -1 to 1.\")\n    return math.asin(value)", "subfield": "Sine Function", "tool_name": "arcsine_of_value", "tool_type": "function", "description": "Calculate the arcsine of a given value, ensuring the result is within the principal range [-π/2, π/2].", "docstring": "Calculate the arcsine of a given value, ensuring the result is within the principal range [-π/2, π/2].\n    Parameters:\n    - value: float\n      The value for which to compute the arcsine, where -1 <= value <= 1.\n    Returns:\n    - float\n      The arcsine of the value, in radians.\n    Raises:\n    - ValueError: If the input value is outside the valid range.\n    Examples:\n    >>> arcsine_of_value(1)\n    1.5707963267948966\n    >>> arcsine_of_value(0)\n    0.0", "Freq": 4, "TSR": 3}, {"tool": "def unit_circle_coordinates(angle, unit='degrees'):\n    \n    if unit == 'degrees':\n        angle = np.radians(angle)\n    x = np.cos(angle)\n    y = np.sin(angle)\n    return (x, y)", "subfield": "Sine Function", "tool_name": "unit_circle_coordinates", "tool_type": "function", "description": "Compute the coordinates of a point on a unit circle given an angle.", "docstring": "Compute the coordinates of a point on a unit circle given an angle.\n    Parameters\n    ----------\n    angle : float\n        The angle in the unit circle to find the coordinates for.\n    unit : str, optional\n        The unit of the angle ('degrees' or 'radians'). Default is 'degrees'.\n    Returns\n    -------\n    tuple\n        A tuple (x, y) representing coordinates of the point on the unit circle.\n    Examples\n    --------\n    >>> unit_circle_coordinates(90)\n    (0, 1)\n    >>> unit_circle_coordinates(np.pi/6, unit='radians')\n    (0.8660254037844386, 0.5)", "Freq": 2, "TSR": 2}, {"tool": "def solve_sine_equation(func, guess):\n    \n    return fsolve(func, guess)", "subfield": "Sine Function", "tool_name": "solve_sine_equation", "tool_type": "function", "description": "Solve an equation involving the sine function where the function crosses zero. \n    Note: User defines the function where sine is part of the equation in `func`.", "docstring": "Solve an equation involving the sine function where the function crosses zero. \n    Note: User defines the function where sine is part of the equation in `func`.\n    Parameters:\n    func : callable\n        The function to be solved, which must be defined by the user. It should take an angle in radians as input.\n    guess : float or list\n        Initial guess for the roots of the equation. Multiple guesses can be provided in a list for multiple solutions.\n    Returns:\n    float or np.array\n        The angle(s) in radians that are roots of the equation.\n    Examples:\n    >>> solve_sine_equation(lambda x: np.sin(x) - 0.5, [0, 2])\n    array([0.52359878, 2.61799388])", "Freq": 5, "TSR": 4}, {"tool": "def sine_value_properties(angle, in_degrees=True):\n    \n    sine_val = compute_sine_value(angle, in_degrees)\n    angle_supplementary = 180 - angle if in_degrees else np.pi - angle\n    sine_supplementary = compute_sine_value(angle_supplementary, in_degrees)\n    \n    properties = {\n        'periodic_value': sine_val,\n        'supplementary_value': sine_supplementary,\n        'angle_addition_identity': 'not calculated'  # Placeholder for actual computation if necessary\n    }\n    \n    return properties", "subfield": "Sine Function", "tool_name": "sine_value_properties", "tool_type": "function", "description": "Returns properties of the sine function including periodic repeats and other identities.", "docstring": "Returns properties of the sine function including periodic repeats and other identities.\n    Parameters:\n    - angle: float\n        The angle in question for which properties need to be evaluated.\n    - in_degrees: bool, optional\n        Specifies if the angle is given in degrees (default) or radians.\n    Returns:\n    - dict\n        Keys include 'periodic_value', 'supplementary_value', 'angle_addition_identity'.\n    \n    Examples:\n    >>> sine_value_properties(30)\n    {'periodic_value': 0.5, 'supplementary_value': 0.5, 'angle_addition_identity': not calculated}\n    >>> sine_value_properties(180)\n    {'periodic_value': 0.0, 'supplementary_value': 0.0, 'angle_addition_identity': not calculated}", "Freq": 0, "TSR": 0}, {"tool": "def determine_phase_shift_for_maximum_at_x0(amplitude=1, frequency=1):\n    \n    # To have a maximum at x=0, sin(frequency*x + phase_shift) should be 1 when x=0\n    # This requires frequency*0 + phase_shift = pi/2 (since sin(pi/2) = 1)\n    phase_shift = np.pi / 2\n    return phase_shift", "subfield": "Sine Function", "tool_name": "determine_phase_shift_for_maximum_at_x0", "tool_type": "function", "description": "Determines the phase shift needed for a sine function with given amplitude and frequency \n    to have a maximum value at x=0.", "docstring": "Determines the phase shift needed for a sine function with given amplitude and frequency \n    to have a maximum value at x=0.\n    Parameters:\n        amplitude (float): The amplitude of the sine wave.\n        frequency (float): The frequency of the sine wave.\n    Returns:\n        float: The phase shift required for the function to have a maximum at x=0.", "Freq": 0, "TSR": 0}, {"tool": "def sine_function_in_right_triangle(opposite, hypotenuse):\n    \n    return opposite / hypotenuse", "subfield": "Sine Function", "tool_name": "sine_function_in_right_triangle", "tool_type": "function", "description": "Calculate the sine function in a right triangle (opposite/hypotenuse).", "docstring": "Calculate the sine function in a right triangle (opposite/hypotenuse).\n    Parameters:\n    - opposite (float): The length of the side opposite to the angle in the right triangle.\n    - hypotenuse (float): The length of the hypotenuse in the right triangle.\n    Returns:\n    - float: The value of the sine function in the right triangle.", "Freq": 0, "TSR": 0}, {"tool": "def calculate_trapezoid_area(base1, base2, height):\n    \n    return (base1 + base2) * height / 2", "subfield": "Sine Function", "tool_name": "calculate_trapezoid_area", "tool_type": "function", "description": "Calculate the area of a trapezoid given the lengths of its bases and height.", "docstring": "Calculate the area of a trapezoid given the lengths of its bases and height.\n    Parameters:\n    base1 (float): Length of the first base of the trapezoid.\n    base2 (float): Length of the second base of the trapezoid.\n    height (float): Height of the trapezoid.\n    Returns:\n    float: Area of the trapezoid.", "Freq": 1, "TSR": 0}, {"tool": "def find_chord_intersection(radius, chord_length):\n    \n    angle = 2 * np.arcsin(chord_length / (2 * radius))\n    x1 = radius * np.cos(angle / 2)\n    y1 = radius * np.sin(angle / 2)\n    x2 = radius * np.cos(np.pi - angle / 2)\n    y2 = radius * np.sin(np.pi - angle / 2)\n    return (x1, y1), (x2, y2)", "subfield": "Sine Function", "tool_name": "find_chord_intersection", "tool_type": "function", "description": "Find the intersection points of two chords in a circle given the radius and length of one chord.", "docstring": "Find the intersection points of two chords in a circle given the radius and length of one chord.\n    Parameters:\n    radius (float): Radius of the circle.\n    chord_length (float): Length of one of the chords.\n    Returns:\n    tuple: Coordinates of the two intersection points.", "Freq": 0, "TSR": 0}], "Tangent Function": [{"tool": "def calculate_tangent(angle, in_degrees=True):\n    \n    angle_radians = np.deg2rad(angle) if in_degrees else angle\n    return np.tan(angle_radians)", "subfield": "Tangent Function", "tool_name": "calculate_tangent", "tool_type": "function", "description": "Calculate the tangent of an angle.", "docstring": "Calculate the tangent of an angle.\n    \n    Parameters:\n        angle (float): The angle for which to calculate the tangent.\n        in_degrees (bool): If True, the angle is in degrees, otherwise radians.\n    \n    Returns:\n        float: The tangent of the given angle.", "Freq": 11.0, "TSR": 9.5}, {"tool": "def tangent_half_angle(tan_x):\n    \n    return np.tan(np.arctan(tan_x) / 2)", "subfield": "Tangent Function", "tool_name": "tangent_half_angle", "tool_type": "function", "description": "Compute tan(x/2) from tan(x) using the half-angle formula derived from double angle identity.", "docstring": "Compute tan(x/2) from tan(x) using the half-angle formula derived from double angle identity.\n    Parameters:\n    tan_x (float): Tangent of the angle x.\n    Returns:\n    float: Tangent of half of the angle x.", "Freq": 3, "TSR": 2, "experience_pool": "The previous tool code was incorrect as it did not accurately compute the tangent of half of the angle. The formula used in the code was incorrect and did not match the half-angle formula for tangent. The evolved tool code uses the correct half-angle formula to compute the tangent of half of the angle. This will improve the accuracy of the tool."}, {"tool": "def calculate_tangent(angle, in_degrees=True):\n    \n    angle_radians = np.deg2rad(angle) if in_degrees else angle\n    return np.tan(angle_radians)", "subfield": "Tangent Function", "tool_name": "calculate_tangent", "tool_type": "function", "description": "Calculate the tangent of an angle.", "docstring": "Calculate the tangent of an angle.\n    Parameters:\n        angle (float): The angle for which to calculate the tangent.\n        in_degrees (bool): If True, the angle is in degrees, otherwise radians.\n    \n    Returns:\n        float: The tangent of the given angle.\n    Examples:\n        >>> calculate_tangent(45)\n        1.0\n        >>> calculate_tangent(np.pi/4, in_degrees=False)\n        1.0", "Freq": 9, "TSR": 8}, {"tool": "def calculate_trig_function(func, angle_degrees):\n    \n    angle_radians = math.radians(angle_degrees)\n    if func == 'sin':\n        return math.sin(angle_radians)\n    elif func == 'cos':\n        return math.cos(angle_radians)\n    elif func == 'tan':\n        return math.tan(angle_radians)\n    else:\n        raise ValueError(\"Invalid trigonometric function specified. Use 'sin', 'cos', or 'tan'.\")", "subfield": "Tangent Function", "tool_name": "calculate_trig_function", "tool_type": "function", "description": "Calculate trigonometric functions for a given angle in degrees.", "docstring": "Calculate trigonometric functions for a given angle in degrees.\n    Parameters:\n    - func (str): The trigonometric function to compute ('sin', 'cos', 'tan').\n    - angle_degrees (float): The angle in degrees for which to compute the trigonometric function.\n    Returns:\n    - float: The result of the trigonometric function.\n    Examples:\n    - calculate_trig_function('sin', 30) returns 0.5\n    - calculate_trig_function('cos', 90) returns approximately 0.0\n    - calculate_trig_function('tan', 45) returns approximately 1.0", "Freq": 9, "TSR": 8}, {"tool": "def find_equivalent_angle(target_angle, reference_angle):\n    \n    angle_difference = target_angle - reference_angle\n    equivalent_angle = angle_difference % 180 + reference_angle\n    return equivalent_angle", "subfield": "Tangent Function", "tool_name": "find_equivalent_angle", "tool_type": "function", "description": "Find an equivalent angle within a specific range based on the periodicity of the tangent function.", "docstring": "Find an equivalent angle within a specific range based on the periodicity of the tangent function.\n    Parameters:\n    target_angle (float): The target angle in degrees.\n    reference_angle (float): The reference angle in degrees.\n    Returns:\n    float: The equivalent angle within the specific range.", "Freq": 4, "TSR": 3}], "Cosine Function": [{"tool": "def calculate_cosine(adjacent, hypotenuse):\n    \n    if hypotenuse <= 0:\n        raise ValueError(\"Hypotenuse should be greater than zero.\")\n    return adjacent / hypotenuse", "subfield": "Cosine Function", "tool_name": "calculate_cosine", "tool_type": "function", "description": "Calculate the cosine of an angle in a right triangle based on the lengths\n    of the adjacent side and the hypotenuse.", "docstring": "Calculate the cosine of an angle in a right triangle based on the lengths\n    of the adjacent side and the hypotenuse.\n    Parameters:\n    adjacent (float): The length of the side adjacent to the angle.\n    hypotenuse (float): The length of the hypotenuse.\n    Returns:\n    float: The cosine of the angle.\n    Examples:\n    >>> calculate_cosine(3, 5)\n    0.6", "Freq": 1, "TSR": 0}, {"tool": "def cosine_identity(angle_degrees, identity_type='double'):\n    \n    x_rad = np.radians(angle_degrees)\n    if identity_type == 'double':\n        return np.cos(2 * x_rad)\n    elif identity_type == 'half':\n        return np.cos(x_rad / 2)\n    else:\n        raise ValueError(\"Unsupported identity type specified. Use 'double' or 'half'.\")", "subfield": "Cosine Function", "tool_name": "cosine_identity", "tool_type": "function", "description": "Calculate the cosine of an angle based on the specified trigonometric identity.", "docstring": "Calculate the cosine of an angle based on the specified trigonometric identity.\n    Parameters:\n        angle_degrees (float): The angle in degrees for which to calculate the cosine.\n        identity_type (str): Type of identity to use ('double', 'half', or 'sum_difference').\n                              'double' calculates cos(2x), 'half' calculates cos(x/2),\n                              and 'sum_difference' calculates cos(x + y) or cos(x - y),\n                              where additional parameters x and y are required.\n    \n    Returns:\n        float: The cosine of the angle based on the selected identity.\n        \n    Examples:\n        >>> cosine_identity(30, 'double')\n        0.5000000000000001\n        \n        >>> cosine_identity(45, 'half')\n        0.9238795325112867", "Freq": 0, "TSR": 0}, {"tool": "def cosine_rule(a, b, c=None, angle_C=None):\n    \n    if c and angle_C is None:\n        # Calculate the angle C using the cosine rule\n        angle_C_rad = math.acos((a**2 + b**2 - c**2) / (2 * a * b))\n        angle_C_deg = math.degrees(angle_C_rad)\n        return angle_C_deg\n    elif angle_C:\n        # Calculate side c using the cosine rule\n        angle_C_rad = math.radians(angle_C)\n        return math.sqrt(a**2 + b**2 - 2 * a * b * math.cos(angle_C_rad))\n    else:\n        raise ValueError(\"Either side c or angle C must be provided\")", "subfield": "Cosine Function", "tool_name": "cosine_rule", "tool_type": "function", "description": "Apply the cosine rule to find either a side length or an angle in a triangle.", "docstring": "Apply the cosine rule to find either a side length or an angle in a triangle.\n    \n    Parameters:\n    - a (float): length of side a.\n    - b (float): length of side b.\n    - c (float, optional): length of side c.\n    - angle_C (float, optional): angle C in degrees opposite side c.\n    \n    Returns:\n    - float: Depending on what input is given, returns the length of side c or the angle C.\n    \n    Examples:\n    >>> cosine_rule(5, 6, angle_C=60)\n    2.5\n    >>> cosine_rule(5, 6, c=7)\n    44.415308597193004", "Freq": 3, "TSR": 3}, {"tool": "def angle_from_cosine(cos_value):\n    \n    from numpy import arccos, pi\n    theta = arccos(cos_value)\n    return [theta, 2 * pi - theta] if cos_value != -1 else [pi]", "subfield": "Cosine Function", "tool_name": "angle_from_cosine", "tool_type": "function", "description": "Calculate the angles from the given cosine value using arccosine.", "docstring": "Calculate the angles from the given cosine value using arccosine.\n    Parameters\n    ----------\n    cos_value : float\n        The cosine value for which to determine the angles in the standard intervals.\n    Returns\n    -------\n    list of float\n        List of angles in radians corresponding to the given cosine value in the interval [0, 2*pi].\n    Examples\n    --------\n    >>> angle_from_cosine(1)\n    [0.0, 6.283185307179586]\n    >>> angle_from_cosine(0.5)\n    [1.0471975511965979, 5.2359877559829895]", "Freq": 7, "TSR": 4}, {"tool": "def cosine_addition(angle1, angle2):\n    \n    from math import cos, sin\n    return cos(angle1) * cos(angle2) - sin(angle1) * sin(angle2)", "subfield": "Cosine Function", "tool_name": "cosine_addition", "tool_type": "function", "description": "Compute the cosine of the sum of two angles.", "docstring": "Compute the cosine of the sum of two angles.\n    Parameters\n    ----------\n    angle1 : float\n        The first angle in radians.\n    angle2 : float\n        The second angle in radians.\n    Returns\n    -------\n    float\n        The cosine of the sum of the two angles.\n    Examples\n    --------\n    >>> cosine_addition(np.pi/3, np.pi/4)\n    0.3535533905932738", "Freq": 0, "TSR": 0}, {"tool": "def cosine_inverse(cos_value):\n    \n    return np.degrees(np.arccos(cos_value))", "subfield": "Cosine Function", "tool_name": "cosine_inverse", "tool_type": "function", "description": "Calculate the angle in degrees from a cosine value using the arccos function.", "docstring": "Calculate the angle in degrees from a cosine value using the arccos function.\n    \n    Parameters:\n        cos_value (float): The cosine value for which to find the angle.\n    \n    Returns:\n        float: The angle in degrees that has the given cosine value.\n    \n    Examples:\n        >>> cosine_inverse(0.5)\n        60.0\n        >>> cosine_inverse(1)\n        0.0", "Freq": 0, "TSR": 0}, {"tool": "def compute_cosine(angle, in_degrees=True):\n    \n    if in_degrees:\n        angle = np.deg2rad(angle)\n    return np.cos(angle)", "subfield": "Cosine Function", "tool_name": "compute_cosine", "tool_type": "function", "description": "Compute the cosine of the given angle which can be in degrees or radians.", "docstring": "Compute the cosine of the given angle which can be in degrees or radians.\n    Parameters:\n    angle : float\n        The angle for which the cosine is to be computed.\n    in_degrees : bool, optional\n        If True (default), the angle is assumed to be in degrees. If False, the angle is assumed to be in radians.\n    Returns:\n    float\n        The cosine of the given angle.\n    Examples:\n    >>> compute_cosine(60)\n    0.5\n    >>> compute_cosine(np.pi/3, in_degrees=False)\n    0.5", "Freq": 0, "TSR": 0}, {"tool": "def calculate_cosine(angle_degrees):\n    \n    angle_radians = np.radians(angle_degrees)\n    return np.cos(angle_radians)", "subfield": "Cosine Function", "tool_name": "calculate_cosine", "tool_type": "function", "description": "Calculate the cosine of an angle given in degrees.", "docstring": "Calculate the cosine of an angle given in degrees.\n    \n    Parameters:\n        angle_degrees (float): The angle in degrees for which to compute the cosine.\n    \n    Returns:\n        float: The cosine of the given angle.\n        \n    Examples:\n        >>> calculate_cosine(60)\n        0.5\n        >>> calculate_cosine(90)\n        0.0", "Freq": 2, "TSR": 2}, {"tool": "def simplify_angle(angle, in_degrees=True):\n    \n    if in_degrees:\n        return angle % 360\n    return angle % (2 * np.pi)", "subfield": "Cosine Function", "tool_name": "simplify_angle", "tool_type": "function", "description": "Simplify an angle using the periodicity of the cosine function.", "docstring": "Simplify an angle using the periodicity of the cosine function.\n    Parameters:\n    angle : float\n        The original angle, potentially outside the usual range.\n    in_degrees : bool, optional\n        If True (default), angles are handled in degrees. If False, angles are handled in radians.\n    Returns:\n    float\n        The angle simplified to within the fundamental period [0, 360) degrees or [0, 2π) radians.\n    Examples:\n    >>> simplify_angle(720)   # Simplifies to 0 degrees.\n    0\n    >>> simplify_angle(7*np.pi, in_degrees=False)   # Simplifies to π.\n    3.141592653589793", "Freq": 0, "TSR": 0}, {"tool": "def compute_cosine(angle):\n    \n    from math import cos\n    return cos(angle)", "subfield": "Cosine Function", "tool_name": "compute_cosine", "tool_type": "function", "description": "Compute the cosine of a given angle in radians.", "docstring": "Compute the cosine of a given angle in radians.\n    Parameters\n    ----------\n    angle : float\n        The angle in radians for which the cosine is to be calculated.\n    Returns\n    -------\n    float\n        The cosine of the given angle.\n    Examples\n    --------\n    >>> compute_cosine(np.pi)\n    -1.0\n    >>> compute_cosine(0)\n    1.0", "Freq": 0, "TSR": 0}, {"tool": "def solve_cosine_equation(a, b, c):\n    \n    # This is an example solving method demonstrating the application;\n    # it assumes solutions can be directly calculated for basic cases.\n    r = math.sqrt(a**2 + b**2)\n    phi = math.atan2(b, a)\n    possible_solutions = [math.acos(c / r) + phi, -math.acos(c / r) + phi]\n    return possible_solutions", "subfield": "Cosine Function", "tool_name": "solve_cosine_equation", "tool_type": "function", "description": "Solve a cosine equation of the form a*cos(x) + b*sin(x) = c using trigonometric identities.", "docstring": "Solve a cosine equation of the form a*cos(x) + b*sin(x) = c using trigonometric identities.\n    \n    Parameters:\n        a (float): Coefficient of cosine.\n        b (float): Coefficient of sine.\n        c (float): Right-hand side constant.\n    Returns:\n        list of floats: Possible values of x (in radians) that satisfy the equation.\n        \n    Examples:\n        >>> solve_cosine_equation(1, -1, 0)  # cos(x) - sin(x) = 0\n        [0.7853981633974483, 3.9269908169872414]", "Freq": 0, "TSR": 0}, {"tool": "def cosine_of_sum(angle1, angle2, in_degrees=True):\n    \n    if in_degrees:\n        angle1 = np.deg2rad(angle1)\n        angle2 = np.deg2rad(angle2)\n    return np.cos(angle1 + angle2)", "subfield": "Cosine Function", "tool_name": "cosine_of_sum", "tool_type": "function", "description": "Calculate the cosine of the sum of two angles using the cosine addition formula.", "docstring": "Calculate the cosine of the sum of two angles using the cosine addition formula.\n    Parameters:\n    angle1 : float\n        The first angle.\n    angle2 : float\n        The second angle.\n    in_degrees : bool, optional\n        If True (default), angles are given in degrees. If False, angles are given in radians.\n    Returns:\n    float\n        The cosine of the sum of the two angles.\n    Examples:\n    >>> cosine_of_sum(30, 45)\n    0.7071067811865477\n    >>> cosine_of_sum(np.pi/6, np.pi/4, in_degreddes=False)\n    0.7071067811865477", "Freq": 0, "TSR": 0}, {"tool": "def cosine_to_tangent_half_angle(cos_value):\n    \n    # tangent half-angle formula: tan(x/2) = sqrt((1 - cos(x)) / (1 + cos(x)))\n    return np.sqrt((1 - cos_value) / (1 + cos_value))", "subfield": "Cosine Function", "tool_name": "cosine_to_tangent_half_angle", "tool_type": "function", "description": "Convert a cosine value to its corresponding tangent of half the angle.", "docstring": "Convert a cosine value to its corresponding tangent of half the angle.\n    Parameters:\n        cos_value (float): The cosine value.\n    Returns:\n        float: The tangent of half the corresponding angle.\n    \n    Examples:\n        >>> cosine_to_tangent_half_angle(0.5)\n        1.7320508075688767", "Freq": 0, "TSR": 0}, {"tool": "def arccosine_value(cos_value):\n    \n    from numpy import arccos\n    return arccos(cos_value)", "subfield": "Cosine Function", "tool_name": "arccosine_value", "tool_type": "function", "description": "Compute the principal value of the arccosine of a given cosine value.", "docstring": "Compute the principal value of the arccosine of a given cosine value.\n    Parameters\n    ----------\n    cos_value : float\n        The cosine value for which to calculate the arccosine.\n    Returns\n    -------\n    float\n        The principal value of the arccosine of the given cosine value.\n    Examples\n    --------\n    >>> arccosine_value(1)\n    0.0\n    >>> arccosine_value(0)\n    1.5707963267948966", "Freq": 0, "TSR": 0}, {"tool": "def normalize_angle(angle_degrees):\n    \n    return angle_degrees % 360", "subfield": "Cosine Function", "tool_name": "normalize_angle", "tool_type": "function", "description": "Normalize an angle to [0, 360] degrees using cosine's periodicity properties.", "docstring": "Normalize an angle to [0, 360] degrees using cosine's periodicity properties.\n    \n    Parameters:\n        angle_degrees (float): The original angle in degrees that may exceed a single rotation.\n    \n    Returns:\n        float: Normalized angle within a 0 to 360 degree range.\n    \n    Examples:\n        >>> normalize_angle(450)\n        90.0\n        >>> normalize_angle(-30)\n        330.0", "Freq": 0, "TSR": 0}, {"tool": "def normalize_angle(angle):\n    \n    from numpy import pi\n    return angle % (2 * pi)", "subfield": "Cosine Function", "tool_name": "normalize_angle", "tool_type": "function", "description": "Normalize a given angle to the interval [0, 2*pi].", "docstring": "Normalize a given angle to the interval [0, 2*pi].\n    Parameters\n    ----------\n    angle : float\n        The angle in radians to be normalized.\n    Returns\n    -------\n    float\n        The normalized angle within the range [0, 2*np.pi].\n    Examples\n    --------\n    >>> normalize_angle(7 * np.pi)\n    3.141592653589793", "Freq": 0, "TSR": 0}], "Trigonometric Functions": [{"tool": "def trig_calculator(func_name, angle, degrees=False):\n    \n    if degrees:\n        angle = np.deg2rad(angle)\n    trig_functions = {\n        'sin': np.sin,\n        'cos': np.cos,\n        'tan': np.tan,\n        'csc': lambda x: 1 / np.sin(x),\n        'sec': lambda x: 1 / np.cos(x),\n        'cot': lambda x: 1 / np.tan(x)\n    }\n    if func_name not in trig_functions:\n        raise ValueError(\"Invalid trigonometric function specified.\")\n    return trig_functions[func_name](angle)", "subfield": "Trigonometric Functions", "tool_name": "trig_calculator", "tool_type": "function", "description": "Calculate the trigonometric function value for a given angle.", "docstring": "Calculate the trigonometric function value for a given angle.\n    Parameters:\n    - func_name (str): Name of the trigonometric function ('sin', 'cos', 'tan', 'csc', 'sec', 'cot').\n    - angle (float): The angle at which to compute the function.\n    - degrees (bool, optional): Set to True if the angle is in degrees, False if in radians.\n    Returns:\n    - float or sympy expression: Value of the trigonometric function at the specified angle.\n    Examples:\n    >>> trig_calculator('cos', 90, True)\n    6.123233995736766e-17\n    >>> trig_calculator('tan', sp.pi/4)\n    1.0", "Freq": 2, "TSR": 2}, {"tool": "def trig_identity_sinusoidal_properties(angle_radians, identity=\"pythagorean\"):\n    \n    if identity == \"pythagorean\":\n        return sin(angle_radians)**2 + cos(angle_radians)**2", "subfield": "Trigonometric Functions", "tool_name": "trig_identity_sinusoidal_properties", "tool_type": "function", "description": "Calculate trigonometric properties based on given identities.", "docstring": "Calculate trigonometric properties based on given identities.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians.\n    - identity: str, default \"pythagorean\"\n        The identity to use for calculations. Currently supports 'pythagorean'.\n        \n    Returns:\n    - float\n        The value calculated using the specified identity.\n    Examples:\n    >>> trig_identity_sinusoidal_properties(np.pi/4, 'pythagorean')\n    1.0", "Freq": 0, "TSR": 0}, {"tool": "def co_function_transformations(angle_radians, original='sin'):\n    \n    if original == 'sin':\n        return np.cos(angle_radians)\n    elif original == 'cos':\n        return np.sin(angle_radians)\n    else:\n        raise ValueError(\"Invalid function for co-function transformations. Use 'sin' or 'cos'.\")", "subfield": "Trigonometric Functions", "tool_name": "co_function_transformations", "tool_type": "function", "description": "Calculate the co-function value of an angle transformation.", "docstring": "Calculate the co-function value of an angle transformation.\n    \n    Parameters:\n    - angle_radians: float\n        The angle in radians for which the co-function value needs to be evaluated.\n    - original: str, default 'sin'\n        The original trigonometric function to transform. Options: 'sin' or 'cos'.\n        \n    Returns:\n    - float\n        The result of the co-function transformation.\n    Examples:\n    >>> co_function_transformations(np.pi/4, 'sin')\n    0.7071067811865476\n    >>> co_function_transformations(np.pi/4, 'cos')\n    0.7071067811865476", "Freq": 0, "TSR": 0}], "Polar Coordinates": []}