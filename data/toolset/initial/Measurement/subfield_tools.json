{"Unit Conversion": [["def convert_volume(value, from_unit, to_unit):\n    \"\"\"\n    Convert between different volume units based on the provided conversion factor.\n    \n    Parameters:\n    value (float): The volume value to be converted.\n    from_unit (str): The current unit of the volume (e.g., 'cubic_feet', 'cubic_yards').\n    to_unit (str): The desired unit to convert to (e.g., 'cubic_yards', 'cubic_feet').\n    \n    Returns:\n    float: The volume value in the desired unit.\n    \n    Examples:\n    >>> convert_volume(1, 'cubic_feet', 'cubic_yards')\n    0.037037037037037035\n    >>> convert_volume(1, 'cubic_yards', 'cubic_feet')\n    27.0\n    \"\"\"\n    conversion_factors = {\n        ('cubic_feet', 'cubic_yards'): 1 / 27,  # 1 cubic yard = 27 cubic feet\n        ('cubic_yards', 'cubic_feet'): 27       # 1 cubic feet = 1/27 cubic yards\n    }\n    \n    factor = conversion_factors.get((from_unit, to_unit))\n    if factor is None:\n        raise ValueError(f\"Conversion from {from_unit} to {to_unit} not supported.\")\n    \n    return value * factor", "def convert_measurement(value, from_unit, to_unit):\n    \"\"\"\n    Convert measurement units.\n    Parameters:\n    - value (float): The numeric value to be converted.\n    - from_unit (str): The unit of the given value.\n    - to_value (str): The unit of the desired output.\n    Returns:\n    - float: The value converted into the target unit.\n    Examples:\n    >>> convert_measurement(10, 'inches', 'feet')\n    0.8333333333333334\n    >>> convert_measurement(100, 'feet', 'cm')\n    3048.0\n    \"\"\"\n    # Dictionary holding conversion factors\n    conversion_factors = {\n        'feet': {'cm': 30.48, 'meters': 0.3048, 'inches': 12.0, 'feet': 1},\n        'inches': {'cm': 2.54, 'meters': 0.0254, 'feet': 1/12.0, 'inches': 1},\n        'cm': {'inches': 1/2.54, 'feet': 1/30.48, 'meters': 0.01, 'cm': 1},\n        'meters': {'cm': 100, 'inches': 39.3701, 'feet': 3.28084, 'meters': 1}\n    }\n    if from_unit not in conversion_factors or to_unit not in conversion_factors[from_unit]:\n        raise ValueError(f\"Conversion from {from_unit} to {to_unit} not supported.\")\n    # Calculate the converted measurement\n    conversion_factor = conversion_factors[from_unit][to_unit]\n    converted_value = value * conversion_factor\n    return converted_value", "def convert_volume(value, from_unit, to_unit):\n    \"\"\"\n    Converts a given volume value from one unit to another.\n    Parameters:\n    value (float): The volume value to be converted.\n    from_unit (str): The current unit of the volume ('liters', 'pints', 'quarts', etc.).\n    to_unit (str): The target unit to which the volume will be converted.\n    \n    Returns:\n    float: The volume in the target unit.\n    \n    Example:\n    >>> convert_volume(1, 'liters', 'pints')\n    2.11338\n    >>> convert_volume(2, 'quarts', 'pints')\n    4\n    \"\"\"\n    # Conversion factors based on 1 liter.\n    conversion_factors = {\n        'liters': 1, \n        'pints': 2.11338, \n        'quarts': 1.05669, \n        'gallons': 0.264172\n    }\n    \n    if from_unit not in conversion_factors or to_unit not in conversion_factors:\n        raise ValueError(\"Unsupported unit conversion. Available units: {}\".format(', '.join(conversion_factors.keys())))\n    \n    # Normalize input to 'liters' first\n    value_in_liters = value / conversion_factors[from_unit]\n    # Convert from 'liters' to the target unit\n    converted_value = value_in_liters * conversion_factors[to_unit]\n    \n    return converted_value", "def convert_mass(value, from_unit, to_unit):\n    \"\"\"\n    Convert a mass measurement from one unit to another.\n    Parameters:\n    value (float): The mass value to be converted.\n    from_unit (str): The unit of the input mass ('g', 'kg', 'lbs', 'oz').\n    to_unit (str): The unit for the output mass ('g', 'kg', 'lbs', 'oz').\n    Returns:\n    float: The converted mass value in the desired units.\n    Examples:\n    >>> convert_mass(1000, 'g', 'kg')\n    1.0\n    >>> convert_mass(1, 'kg', 'g')\n    1000.0\n    \"\"\"\n    unit_ratios = {\n        'g': {'g': 1, 'kg': 0.001, 'lbs': 0.00220462, 'oz': 0.035274},\n        'kg': {'g': 1000, 'kg': 1, 'lbs': 2.20462, 'oz': 35.274},\n        'lbs': {'g': 453.592, 'kg': 0.453592, 'lbs': 1, 'oz': 16},\n        'oz': {'g': 28.3495, 'kg': 0.0283495, 'lbs': 0.0625, 'oz': 1}\n    }\n    if from_unit not in unit_ratios or to_unit not in unit_ratrors:\n        raise ValueError(\"Unsupported unit provided.\")\n    result = value * unit_ratios[from_unit][to_unit]\n    return result", "def convert_time(value, from_unit, to_unit):\n    \"\"\"\n    Converts a time value from one unit (from_unit) to another unit (to_unit).\n    Supported units include: seconds, minutes, hours, days.\n    \n    Parameters:\n    value (float): Time measurement in the 'from_unit'.\n    from_unit (str): Unit of the input value, one of \"seconds\", \"minutes\", \"hours\", \"days\".\n    to_unit (str): Desired unit for the output value, one of \"seconds\", \"minutes\", \"hours\", \"days\".\n    \n    Returns:\n    float: Time in the desired 'to_unit'.\n    Example:\n    >>> convert_time(120, \"minutes\", \"hours\")\n    2.0\n    >>> convert_time(2, \"hours\", \"minutes\")\n    120.0\n    \"\"\"\n    time_factors = {\n        'seconds': {'minutes': 1/60, 'hours': 1/3600, 'days': 1/86400},\n        'minutes': {'seconds': 60, 'hours': 1/60, 'days': 1/1440},\n        'hours': {'seconds': 3600, 'minutes': 60, 'days': 1/24},\n        'days': {'seconds': 86400, 'minutes': 1440, 'hours': 24}\n    }\n    if from_unit == to_unit:\n        return value\n    conversion_factor = time_factors[from_unit][to_unit]\n    return value * conversion_factor", "def convert_volume(value, from_unit, to_unit, unit_conversion_factors):\n    \"\"\"\n    Convert a volume from one unit to another using a specified dictionary of conversion factors.\n    Parameters:\n    value (float): The volume value to be converted.\n    from_unit (str): The unit of the volume value provided.\n    to_unit (str): The unit to which the volume value should be converted.\n    unit_conversion_factors (dict): A dictionary containing conversion factors with keys as a tuple (from_unit, to_unit).\n    Returns:\n    float: The converted volume value.\n    Examples:\n    >>> unit_factors = {('quarts', 'pints'): 2, ('liters', 'pints'): 2.11338}\n    >>> convert_volume(1, 'quarts', 'pints', unit_factors)\n    2.0\n    >>> convert_volume(1, 'liters', 'pints', unit_factors)\n    2.11338\n    \"\"\"\n    if (from_unit, to_unit) not in unit_conversion_factors:\n        raise ValueError(f\"No conversion factor found for converting from {from_unit} to {to_unit}\")\n    # Retrieve the conversion factor\n    factor = unit_conversion_factors[(from_unit, to_unit)]\n    # Perform conversion\n    return value * factor", "def unit_converter(value, from_unit, to_unit, custom_factor=None):\n    \"\"\"\n    Converts a given value from one unit to another based on predefined or custom conversion factors.\n    \n    Parameters:\n    - value (float or int): The numerical value to be converted.\n    - from_unit (str): The unit of the input value.\n    - to_unit (str): The unit to which the value should be converted.\n    - custom_factor (float, optional): Custom conversion factor if the conversion is not predefined.\n    Returns:\n    - float: The converted value in the target unit.\n    Raises:\n    - ValueError: If no conversion is possible due to missing information.\n    Examples:\n    >>> unit_converter(1, 'meter', 'feet')\n    3.28084\n    >>> unit_converter(1, 'kg', 'pounds')\n    2.20462\n    >>> unit_converter(100, 'meter', 'kilometer', custom_factor=0.001)\n    0.1\n    \"\"\"\n    # Predefined conversion factors (some common conversions)\n    conversion_factors = {\n        ('meter', 'feet'): 3.28084,\n        ('feet', 'meter'): 1 / 3.28084,\n        ('kg', 'pounds'): 2.20462,\n        ('pounds', 'kg'): 1 / 2.20462,\n        # more can be added\n    }\n    \n    # Check if custom factor provided\n    if custom_factor:\n        return value * custom_factor\n    \n    # Try to get the conversion factor from the dictionary\n    try:\n        factor = conversion_factors[(from_unit, to_unit)]\n    except KeyError:\n        raise ValueError(f\"Conversion from {from_unit} to {to_unit} is not predefined. Please provide a custom_factor.\")\n    \n    # Convert the value using the factor\n    return value * factor", "def convert_mass(value, from_unit, to_unit):\n    \"\"\"\n    Convert between different mass units.\n    Parameters:\n    - value (float): The mass value to be converted.\n    - from_unit (str): The current unit of the mass ('g', 'kg', 'lb', etc.).\n    - to_unit (str): The target unit for the mass ('g', 'kg', 'lb', etc.).\n    Returns:\n    - float: The converted mass in the target unit.\n    Example:\n    >>> convert_mass(1000, 'g', 'kg')\n    1.0\n    >>> convert_mass(2.20462, 'lb', 'kg')\n    1.0\n    \"\"\"\n    units = {\n        'g': 1,\n        'kg': 1000,\n        'lb': 453.592\n    }\n    if from_unit not in units or to_unit not in units:\n        raise ValueError(\"Unsupported unit. Supported units are: 'g', 'kg', 'lb'\")\n    # Convert from `from_unit` to grams\n    grams = value * units[from_unit]\n    \n    # Convert from grams to `to_unit`\n    result = grams / units[to_unit]\n    return result", "def unit_converter(value, from_unit, to_unit, conversion_dict):\n    \"\"\"\n    General purpose unit converter using a dictionary of conversion rates.\n    Parameters:\n    - value (float): The value to be converted.\n    - from_unit (str): The unit of the input value.\n    - to_unit (str): The unit of the output target.\n    - conversion_dict (dict): A dictionary where keys are tuples (from_unit, to_unit)\n      and values are the conversion factors.\n    Returns:\n    - float: The converted value in the target unit.\n    Example:\n    >>> conversion_dict = {('m', 'cm'): 100, ('kg', 'g'): 1000}\n    >>> unit_converter(1, 'm', 'cm', conversion_dict)\n    100\n    \"\"\"\n    if (from_unit, to_unit) not in conversion_dict:\n        raise KeyError(f\"No conversion rule for: {from_unit} to {to_unit}\")\n    factor = conversion_dict[(from_unit, to_unit)]\n    return value * factor", "def convert_units(value, from_unit, to_unit):\n    \"\"\"\n    Converts a value from one unit to another using standardized conversion factors.\n    \n    Parameters:\n    value (float): The numerical value in the 'from_unit' to be converted.\n    from_unit (str): The unit you are converting from. Options: 'feet', 'inches'.\n    to_unit (str): The unit you are converting to. Options: 'feet', 'inches'.\n    \n    Returns:\n    float: The converted value in the 'to_unit'.\n    \n    Examples:\n    >>> convert_units(10, 'feet', 'inches')\n    120.0\n    >>> convert_units(120, 'inches', 'feet')\n    10.0\n    \"\"\"\n    conversion_factors = {\n        ('feet', 'inches'): 12,\n        ('inches', 'feet'): 1/12\n    }\n    if (from_unit, to_unit) not in conversion_factors:\n        raise ValueError(\"Conversion from {} to {} is not supported\".format(from_unit, to_unit))\n    # Get conversion factor\n    factor = conversion_factors[(from_unit, to_unit)]\n    # Convert value\n    converted_value = value * factor\n    return converted_value", "def convert_volume(value, conversion_factor):\n    \"\"\"\n    Convert the volume from one unit to another using a defined conversion factor.\n    \n    Parameters\n    ----------\n    value : float\n        The volume in the original unit.\n    conversion_factor : float\n        The factor used to convert the volume to the desired unit. This factor should be the ratio of one unit of volume in the old units to one unit of volume in the new units.\n        \n    Returns\n    -------\n    float\n        The volume in the new units.\n    \n    Examples\n    --------\n    Converting cubic feet to cubic yards (1 cubic yard = 27 cubic feet):\n    >>> convert_volume(54, 1/27)\n    2.0\n    \n    Converting cubic yards to cubic feet:\n    >>> convert_volume(2, 27)\n    54.0\n    \"\"\"\n    return value * conversion_factor", "def convert_units(value, from_unit, to_unit, conversion_factor):\n    \"\"\"\n    Convert a numerical value from one unit to another using a specified conversion factor.\n    \n    Parameters\n    ----------\n    value : float\n        The numeric value to convert.\n    from_unit : str\n        The unit of the input value.\n    to_unit : str\n        The unit of the output value after conversion.\n    conversion_factor : float\n       The factor to multiply by to convert from `from_unit` to `to_unit`.\n       \n    Returns\n    -------\n    float\n        The converted value in `to_unit`.\n    \n    Examples\n    --------\n    >>> convert_units(12, 'inches', 'centimeters', 2.54)\n    30.48\n    \"\"\"\n    converted_value = value * conversion.method\n    return converted_value", "def convert_volume(value, from_unit, to_unit):\n    \"\"\"\n    Convert a volume measurement from one unit to another.\n    Parameters\n    ----------\n    value : float\n        The numeric value in the original units that needs conversion.\n    from_unit : str\n        The unit of the `value` parameter. Supported units are \"quarts\", \"pints\", \"liters\".\n    to_unit : str\n        The target unit for the conversion. Supported units are the same as `from_unit`.\n    \n    Returns\n    -------\n    float\n        The value in the target units.\n    Examples\n    --------\n    >>> convert_volume(1, 'quarts', 'pints')\n    2.0\n    >>> convert_volume(1, 'liters', 'pints')\n    2.11338\n    \"\"\"\n    import numpy as np\n    \n    # Dictionary of conversion factors between units\n    conversion_factors = {\n        ('quarts', 'pints'): 2,\n        ('pints', 'quarts'): 0.5,\n        ('liters', 'pints'): 2.11338,\n        ('pints', 'liters'): 0.473176,\n        ('quarts', 'liters'): 0.946353,\n        ('liters', 'quarts'): 1.05669\n    }\n    \n    # Handle cases if conversion within the same unit or unsupported units\n    if from_unit == to_unit:\n        return value\n    elif (from_unit, to_unit) in conversion_factors:\n        return value * conversion_factors[(from_unit, to_unit)]\n    else:\n        raise ValueError(f\"Conversion from {from_unit} to {to_unit} not supported.\")", "def convert_units(value, from_unit, to_unit):\n    \"\"\"\n    Converts a value from one unit to another within the same dimension.\n    \n    Parameters:\n        value (float): The numerical value associated with the unit to convert.\n        from_unit (Quantity): The unit type of the input value. \n        to_unit (Quantity): The unit type to convert the value to.\n    \n    Returns:\n        float: The value converted to the 'to_unit'.\n        \n    Example:\n        # Converting grams to kilograms\n        >>> grams_to_kilograms = convert_units(1000, gram, kilogram)\n        >>> print(grams_to_kilograms)\n        1.0\n        \n        # Converting meters to centimeters\n        >>> meters_to_centimeters = convert_units(1, meter, centimeter)\n        >>> print(meters_to_centimeters)\n        100.0\n    \"\"\"\n    x = symbols('x')\n    return float(convert_to(x * from_unit, to_unit).subs(x, value).evalf())", "def convert_units(value, from_unit, to_unit):\n    \"\"\"\n    Convert a quantity from one unit to another.\n    Parameters:\n    - value (float): The value in the original unit.\n    - from_unit (str): The unit to convert from.\n    - to_unit (str): The unit to convert to.\n    Returns:\n    - float: The value in the desired unit.\n    Examples:\n    >>> convert_units(300, 'seconds', 'minutes')\n    5.0\n    >>> convert_units(1, 'kilometer', 'meters')\n    1000.0\n    \"\"\"\n    from pint import UnitRegistry\n    ureg = UnitRegistry()\n    \n    original = value * ureg(from_unit)\n    converted = original.to(to_unit).magnitude\n    \n    return converted"], ["def convert_units(quantity, conversion_factor, offset=0):\n    \"\"\"\n    Convert a quantity from one unit to another using a specified conversion factor and an optional offset.\n    \n    Parameters:\n    - quantity (float or int): The numeric quantity in the original units to be converted.\n    - conversion_factor (float): The factor by which to multiply the original quantity to perform the conversion.\n    - offset (float, optional): An additional offset to be added after conversion (default is 0).\n    Returns:\n    - float: The converted quantity in the new units.\n    Examples:\n    >>> convert_units(10, 0.5)  # For example, 10 blocks to miles if 1 block equals 0.5 miles\n    5.0\n    >>> convert_units(15, 1/1.60934)  # For example, 15 kilometers to miles\n    9.32056788356075\n    >>> convert_units(32, 1.8, 32)  # Converting 32°C to °F\n    89.6\n    \"\"\"\n    return quantity * conversion_factor + offset", "def universal_unit_converter(value, conversion_factor):\n    \"\"\"\n    Converts a value from one unit to another by applying the given conversion factor.\n    Parameters:\n    value (float): The numerical value in the source unit.\n    conversion_factor (float): The factor to convert the source value to the target unit.\n    \n    Returns:\n    float: A numerical value converted into the target unit.\n    Example:\n    >>> # Convert hours to minutes (1 hour = 60 minutes)\n    >>> universal_unit_converter(2, 60)\n    120.0\n    \n    >>> # Convert kilometers to miles (1 km ≈ 0.621371 miles)\n    >>> universal_unit_converter(10, 0.621371)\n    6.21371\n    \"\"\"\n    return value * conversion_factor", "def convert_units(quantity, conversion_factor):\n    \"\"\"\n    Converts a quantity from one unit to another using a specified conversion factor.\n    \n    Parameters:\n    - quantity (float or int or numpy.array): The amount in the original units to be converted.\n    - conversion_factor (float): The factor to multiply the quantity by to convert to the new units.\n    \n    Returns:\n    float or numpy.array: The converted quantity in the new units.\n    \n    Examples:\n    - To convert 5 blocks to miles, where 1 block is 0.05 miles:\n      >>> convert_units(5, 0.05)\n      0.25\n    - To convert 3 kilometers into miles, where 1 kilometer is approximately 0.621371 miles:\n      >>> convert_units(3, 0.621371)\n      1.864113\n    \"\"\"\n    import numpy as np  # Import here to ensure function self-containment\n    \n    # The conversion step\n    converted_quantity = quantity * conversion_factor\n    return converted_quantity", "def convert_units(value, conversion_factor):\n    \"\"\"\n    Converts a measurement from one unit to another based on a provided conversion factor.\n    Parameters:\n    - value (float): The value in the original units that needs to be converted.\n    - conversion_factor (float): The factor by which to multiply the original value to convert it to the new units.\n    Returns:\n    - float: The value converted into the new units.\n    Examples:\n    - Converting 90 minutes to hours:\n        >>> convert_units(90, 1 / 60)\n        1.5\n    - Converting 1000 grams to kilograms:\n        >>> convert_units(1000, 1 / 1000)\n        1.0\n    - Converting 500 meters to kilometers:\n        >>> convert_units(500, 1 / 1000)\n        0.5\n    \"\"\"\n    return value * conversion_factor", "def unit_conversion(value, conversion_factor):\n    \"\"\"\n    Converts a value from one unit to another based on a given conversion factor.\n    Parameters:\n    - value (float or int): The numeric value in the initial unit that needs to be converted.\n    - conversion_factor (float): The factor used to convert the initial unit to the desired unit.\n    Returns:\n    - float: The value converted into the target unit.\n    Example:\n    >>> unit_conversion(10, 0.09144)  # Convert 10 blocks to miles, where 1 block = 0.09144 miles\n    0.9144\n    \"\"\"\n    return value * conversion_factor"], ["def calculate_circumference(radius, unit_in=\"m\", unit_out=None):\n    \"\"\"\n    Calculate the circumference of a circle given a radius and optionally\n    convert it to a different unit.\n    Parameters\n    ----------\n    radius : float\n        The radius of the circle.\n    unit_in : str, optional\n        The unit of measurement for the input radius (default is meters).\n    unit_out : str, optional\n        The target unit for the circumference result. If None, the output unit\n        will be the same as `unit_in`.\n    Returns\n    -------\n    float or Quantity\n        The circumference of the circle, possibly converted to the desired unit.\n    Examples\n    --------\n    >>> calculate_circumference(1)\n    6.283185307179586\n    \n    >>> calculate_circumference(1, unit_in='inch', unit_out='cm')\n    15.875000000000002 cm\n    Notes\n    -----\n    This function requires `numpy` for mathematical calculations and `pint` for unit handling.\n    If `pint` is not installed, unit conversion cannot be handled by this function.\n    \"\"\"\n    ureg = UnitRegistry()\n    radius = radius * ureg(unit_in)  # apply the unit to the input radius\n    \n    circumference = 2 * np.pi * radius  # calculate the circumference in the input unit\n    \n    if unit_out:\n        circumference = circumference.to(unit_out)  # convert to the output unit if necessary\n    \n    return circumference", "def compute_circumference(radius, unit='m'):\n    \"\"\"\n    Calculate the circumference of a circle given the radius.\n    Parameters:\n    radius : float\n        The radius of the circle.\n    unit : str, optional\n        The unit of measurement for the radius (default is meters).\n    Returns:\n    float\n        The circumference of the circle in the same units as the radius.\n    Examples:\n    >>> compute_circumference(1)\n    6.283185307179586\n    >>> compute_circumference(1, 'cm')\n    6.283185307179586\n    \"\"\"\n    from math import pi\n    return 2 * pi * radius"], ["def calculate_rectangular_area(length, width, length_unit=\"feet\", width_unit=\"feet\"):\n    \"\"\"\n    Calculate the area of a rectangle, converting units if necessary.\n    Parameters\n    ----------\n    length : float\n        The length of the rectangle.\n    width : float\n        The width of the rectangle.\n    length_unit : str, optional\n        The unit of the length, defaults to \"feet\".\n    width_unit : string, optional\n        The unit of the width, defaults to \"feet\".\n    Returns\n    -------\n    float\n        The area in square feet.\n    Examples\n    --------\n    >>> calculate_rectangular_area(10, 5)\n    50.0\n    >>> calculate_rectangular_area(120, 36, length_unit=\"inches\", width_unit=\"inches\")\n    30.0\n    \"\"\"\n    if length_unit != \"feet\":\n        length = convert_length(length, from_unit=length_unit, to_unit=\"feet\")\n    if width_unit != \"feet\":\n        width = convert_length(width, from_unit=width_unit, to_unit=\"feet\")\n    \n    return length * width", "def calculate_area(length, width, unit='inches'):\n    \"\"\"\n    Calculates the area of a rectangle given length and width in a specified unit.\n    \n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n    unit (str): Unit in which the dimensions are given. Default is 'inches'.\n               Supported units: 'feet', 'inches'. The area will be calculated\n               in the unit's square (e.g., square feet if the unit is feet).\n    \n    Returns:\n    float: The area of the rectangle in the square of the provided unit.\n    \n    Examples:\n    >>> calculate_area(10, 20, unit='feet')\n    200.0 # area in square feet\n    >>> calculate_area(120, 240)\n    28800.0 # area in square inches\n    \"\"\"\n    area = length * width\n    return area"], ["def convert_length(value, from_unit, to_unit):\n    \"\"\"\n    Convert length between different units, specifically between inches and feet.\n    Parameters:\n    - value (float): The numerical value of the length to convert.\n    - from_unit (str): The unit of the input value ('inches' or 'feet').\n    - to_unit (str): The unit of the length into which the value should be converted ('inches' or 'feet').\n    Returns:\n    - float: The converted value in the target unit.\n    Examples:\n    >>> convert_length(12, 'inches', 'feets')\n    1.0\n    >>> convert_length(3, 'feet', 'inches')\n    36.0\n    Raises:\n    - ValueError: If the 'from_unit' or 'to_unit' is neither 'inches' nor 'feet'.\n    - ValueError: If the 'value' is negative, as length cannot be negative.\n    \"\"\"\n    if value < 0:\n        raise ValueError(\"Length value cannot be negative.\")\n    \n    units = ['inches', 'feet']\n    if from_unit not in units or to_unit not in units:\n        raise ValueError(\"Invalid units. Only 'inches' and 'feet' are supported.\")\n    \n    if from_unit == to_unit:\n        return value\n    conversion_factors = {\n        ('inches', 'feet'): 1 / 12,\n        ('feet', 'inches'): 12\n    }\n    \n    return value * conversion_factors[(from_unit, to_unit)]", "def convert_length(value, from_unit=\"feet\", to_unit=\"inches\"):\n    \"\"\"\n    Convert lengths between feet and inches.\n    Parameters\n    ----------\n    value : float or int\n        The length value to convert.\n    from_unit : str, optional\n        The unit to convert from, defaults to \"feet\".\n    to_unit : str, optional\n        The unit to convert to, defaults to \"inches\".\n    Returns\n    -------\n    float\n        The converted length value in the target units.\n    Examples\n    --------\n    >>> convert_length(10, from_unit=\"feet\", to_unit=\"inches\")\n    120.0\n    \n    >>> convert_length(36, from_unit=\"inches\", to_unit=\"feet\")\n    3.0\n    \"\"\"\n    if from_unit == \"feet\" and to_unit == \"inches\":\n        return value * 12\n    elif from_unit == \"inches\" and to_unit == \"feet\":\n        return value / 12\n    else:\n        raise ValueError(\"Unsupported unit conversion requested.\")", "def convert_length_units(length, from_unit, to_unit):\n    \"\"\"\n    Convert a length from one unit to another.\n    Parameters:\n    length : float\n        The length value to be converted.\n    from_unit : str\n        The unit of measurement of the input length.\n    to_unit : str\n        The unit of measurement for the output length.\n    Returns:\n    float\n        The converted length value in the target unit.\n    Examples:\n    >>> convert_length_units(1000, 'm', 'km')\n    1.0\n    >>> convert_length_units(1, 'in', 'cm')\n    2.54\n    \"\"\"\n    units = {\n        'm': 1,  # base unit is meter\n        'km': 1000,\n        'cm': 0.01,\n        'mm': 0.001,\n        'mi': 1609.34,\n        'yd': 0.9144,\n        'ft': 0.3048,\n        'in': 0.0254\n    }\n    \n    if from_unit not in units or to_unit not in units:\n        raise ValueError(\"Unsupported unit provided.\")\n    \n    # Convert the length to meters first\n    base_length = length * units[from_unit]\n    \n    # Now convert from meters to the target unit\n    converted_length = base_length / units[to_unit]\n    \n    return converted_length"], ["def convert_area(value, from_unit, to_unit):\n    \"\"\"\n    Convert between different area units based on the provided conversion factor.\n    \n    Parameters:\n    value (float): The area value to be converted.\n    from_unit (str): The current unit of the area (e.g., 'square_feet', 'square_yards').\n    to_unit (str): The desired unit to convert to (e.g., 'square_yards', 'square_feet').\n    \n    Returns:\n    float: The area value in the desired unit.\n    \n    Examples:\n    >>> convert_area(1, 'square_feet', 'square_yards')\n    0.1111111111111111\n    >>> convert_area(1, 'square_yards', 'square_feet')\n    9\n    \"\"\"\n    conversion_factors = {\n        ('square_feet', 'square_yards'): 1 / 9,  # 1 square yard = 9 square feet\n        ('square_yards', 'square_feet'): 9       # 1 square feet = 1/9 square yards\n    }\n    \n    factor = conversion_factors.get((from_unit, to_unit))\n    if factor is None:\n        raise ValueError(f\"Conversion from {from_unit} to {to_unit} not supported.\")\n    \n    return value * factor", "def convert_area(value, from_unit, to_unit):\n    \"\"\"\n    Convert area units.\n    Parameters:\n    - value (float): The area value to be converted.\n    - from_unit (str): The unit of the given area value.\n    - to_unit (str): The unit of the desired output area.\n    Returns:\n    - float: The area value converted into the target unit.\n    Examples:\n    >>> convert_area(10000, 'sq_cm', 'sq_m')\n    1.0\n    >>> convert_area(1, 'sq_km', 'sq_m')\n    1000000\n    \"\"\"\n    # Dictionary holding area conversion factors, directly squaring linear conversion factors\n    area_conversion_factors = {\n        'sq_cm': {'sq_m': 0.0001, 'sq_km': 1e-10, 'sq_cm': 1},\n        'sq_m': {'sq_cm': 10000, 'sq_km': 1e-6, 'sq_m': 1},\n        'sq_km': {'sq_cm': 1e10, 'sq_m': 1e6, 'sq_km': 1}\n    }\n    if from_unit not in area_conversion_factors or to_unit not in area_conversion_factors[from_unit]:\n        raise ValueError(f\"Conversion from {from_body} to {to_body} not supported.\")\n    # Calculate the converted area measurement\n    conversion_factor = area_conversion_factors[from_unit][to_unit]\n    converted_value = value * conversion_factor\n    return converted_value", "def convert_units(value, source_unit, target_unit, conversion_dict):\n    \"\"\"\n    Convert a measurement from one unit to another using a specified conversion dictionary.\n    Parameters:\n    value (float): The numerical value associated with the source unit.\n    source_unit (str): The unit of the input value.\n    target_unit (str): The unit of the value after conversion.\n    conversion_dict (dict): A dictionary containing conversion factors,\n        where keys are tuples (source_unit, target_unit) and values are conversion factors.\n    Returns:\n    float: The converted value in the target unit.\n    Examples:\n    >>> conversion_factors = {('meters', 'feet'): 3.28084, ('feet', 'inches'): 12}\n    >>> convert_units(1, 'meters', 'feet', conversion_factors)\n    3.28084\n    >>> convert_units(10, 'feet', 'inches', conversion_factors)\n    120\n    \"\"\"\n    if (source_unit, target_unit) in conversion_dict:\n        return value * conversion_dict[(source_unit, target_unit)]\n    elif (target_unit, source_unit) in conversion_dict:\n        return value / conversion_dict[(target_unit, source_unit)]\n    else:\n        raise ValueError(\"Conversion from {} to {} not supported.\".format(source_unit, target_unit))", "def convert_area_units(value, source_unit, target_unit, area_conversion_dict):\n    \"\"\"\n    Convert a measurement of area from one unit to another using a specified area conversion dictionary.\n    Parameters:\n    value (float): The numerical value associated with the source area unit.\n    source_unit (str): The area unit of the input value.\n    target_unit (str): The area unit of the value after conversion.\n    area_conversion_dict (dict): A dictionary containing conversion factors for area units,\n        where keys are tuples (source_unit, target_unit) and values are area conversion factors.\n    Returns:\n    float: The converted value in the target area unit.\n    Examples:\n    >>> area_conversion_factors = {('square_km', 'square_mile'): 0.386102}\n    >>> convert_area_units(1, 'square_km', 'square_mile', area_conversion_factors)\n    0.386102\n    \"\"\"\n    if (source_unit, target_unit) in area_conversion_dict:\n        return value * area_conversion_dict[(source_unit, target_unit)]\n    elif (target_unit, source_unit) in area_conversion_dict:\n        return value / area_conversion_dict[(target_unit, source_unit)]\n    else:\n        raise ValueError(\"Conversion from {} to {} not supported.\".format(source_unit, target_unit))", "def convert_area(value, conversion_factor):\n    \"\"\"\n    Convert the area from one square unit to another using a defined conversion factor.\n    \n    Parameters\n    ----------\n    value : float\n        The area in the original square units.\n    conversion_factor : float\n        The factor used to convert the area to the desired square units. This factor should be the ratio of one unit of area in the old units to one unit of area in the new units.\n        \n    Returns\n    -------\n    float\n        The area in the new square units.\n    \n    Examples\n    --------\n    Converting square feet to square yards (1 square yard = 9 square feet):\n    >>> convert_area(18, 1/9)\n    2.0\n    \n    Converting square yards to square feet:\n    >>> convert_area(2, 9)\n    18.0\n    \"\"\"\n    return value * conversion_factor", "def convert_area(value, from_unit, to_unit, linear_conversion_factor):\n    \"\"\"\n    Convert a numerical value corresponding to an area from one unit to another.\n    This function automatically squares the linear conversion factor to get the area conversion factor.\n    Parameters\n    ----------\n    value : float\n        The area value to convert.\n    from_unit : str\n        The from area unit (e.g., 'square centimeters', 'square feet').\n    to_unit : str\n        The to area unit (e.g., 'square miles', 'acres').\n    linear_conversion_factor : float\n        The linear conversion factor between the base units (e.g., from 'centimeters' to 'miles').\n    \n    Returns\n    -------\n    float\n        The converted area value in `to_unit`.\n    \n    Examples\n    --------\n    >>> convert_area(1000000, 'square centimeters', 'square miles', 0.00000621371)\n    0.0386102\n    \"\"\"\n    area_conversion_factor = linear_conversion_factor ** 2\n    converted_area = value * area_conversion_factor\n    return converted_area"], ["def currency_exchanger(amount, from_currency_rate, to_currency_rate):\n    \"\"\"\n    Convert an amount from one currency to another using respective exchange rates.\n    \n    Parameters:\n        amount (float): The amount in the 'from' currency.\n        from_currency_rate (float): Exchange rate from the base currency to the 'from' currency.\n        to_currency_rate (float): Exchange rate from the base currency to the 'to' currency.\n    \n    Returns:\n        float: The converted amount in the 'to' currency.\n    \n    Example:\n        >>> currency_exchanger(100, 1, 0.893)  # From USD to EUR where 1 USD = 0.893 EUR\n        89.3\n        >>> currency_exchanger(50, 0.745, 1.35)  # From CAD to AUD where 1 CAD = 0.745 USD and 1 AUD = 1.35 USD\n        60.9081\n    \"\"\"\n    amount_in_base_currency = amount * from_currency_rate\n    amount_in_target_currency = amount_in_base_currency / to_currency_rate\n    return amount_in_target_currency", "def convert_currency_with_rate(amount, exchange_rate):\n    \"\"\"\n    Convert a monetary amount from one currency to another using an exchange rate.\n    \n    Parameters\n    ----------\n    amount : float\n        The amount of money in the original currency.\n    exchange_rate : float\n        The exchange rate to the target currency. Defined as units of target currency per unit of original currency.\n    Returns\n    -------\n    float\n        The amount in the new currency.\n    Examples\n    --------\n    >>> convert_currency_with_rate(100, 1.2)  # 100 USD to another currency where 1 USD = 1.2 units of that currency\n    120.0\n    \"\"\"\n    return amount * exchange_rate", "def convert_currency(amount, from_currency, to_currency, exchange_rate):\n    \"\"\" Converts the given amount from one currency to another using a specified exchange rate.\n    \n    Parameters:\n    amount (float): The amount of money to convert.\n    from_currency (str): The currency code of the input amount (e.g., 'USD', 'EUR').\n    to\n    to_currency (str): The currency code of the target currency (e.g., 'EUR', 'USD').\n    exchange_rate (float): The exchange rate from 'from_currency' to 'to_currency'.\n    Returns:\n    float: The converted amount in the target currency.\n    Example:\n    >>> convert_currency(50, 'USD', 'EUR', 0.92)\n    46.0\n    \"\"\"\n    return amount * exchange_rate"], ["def convert_minutes_to_hours(minutes):\n    \"\"\"\n    Convert a quantity from minutes to hours.\n    \n    Parameters:\n    - minutes (float): The number of minutes to be converted.\n    Returns:\n    - float: The corresponding number of hours.\n    Examples:\n    >>> convert_minutes_to_hours(90)\n    1.5\n    >>> convert_minutes_to_hours(60)\n    1.0\n    \"\"\"\n    return convert_units(minutes, 'minutes', 'hours')"], ["def convert_length_to_area(length, width, length_unit, area_unit):\n    \"\"\"\n    Calculate the area from given length and width in specified units, and convert it into a different unit for area.\n    Parameters:\n    length (float): The length measurement.\n    width (float): The width measurement.\n    length_unit (str): The input unit for length and width ('m', 'cm', 'mm', 'in', 'ft').\n    area_unit (str): The output unit for area ('m2', 'cm2', 'mm2', 'in2', 'ft2').\n    Returns:\n    float: The area in the desired unit.\n    Examples:\n    >>> convert_length_to_area(10, 20, 'm', 'm2')\n    200.0\n    >>> convert_length_to_area(100, 200, 'cm', 'm2')\n    2.0\n    \"\"\"\n    length_to_meter = {'m': 1.0, 'cm': 0.01, 'mm': 0.001, 'in': 0.0254, 'ft': 0.3048}\n    area_conversion = {'m2': 1, 'cm2': 10000, 'mm2': 1000000, 'in2': 1550, 'ft2': 10.7639}\n    if length_unit not in length_to_meter or area_unit not in area_conversion:\n        raise ValueError(\"Unsupported unit provided.\")\n    length_in_meters = length * length_to_meter[length_util]\n    width_in_meters = width * length_to_meter[width_unit]\n    area_in_m2 = length_in_meters * width_in_meters\n    return area_in_m2 * area_conversion[area_unit]"], ["def convert_volume(volume, initial_unit='cubic_feet', target_unit='cubic_yards'):\n    \"\"\"\n    Converts volume from one unit to another between cubic feet and cubic yards.\n    Parameters:\n    volume : float\n        The volume quantity to be converted.\n    initial_unit : str, optional\n        The initial unit of the volume, default is 'cubic_feet'. Must be either 'cubic_feet' or 'cubic_yards'.\n    target_unit : str, optional\n        The target unit to convert the volume into, default is 'cubic_yards'. Must be either 'cubic_feet' or 'cubic_yards'.\n    \n    Returns:\n    float\n        The volume converted into the target unit.\n    \n    Raises:\n    ValueError:\n        If 'initial_unit' or 'target_unit' is not recognized.\n    Examples:\n    >>> convert_volume(1, 'cubic_yards', 'cubic_feets')\n    27.0\n    >>> convert_volume(54, 'cubic_feets', 'cubic_yards')\n    2.0\n    \"\"\"\n    if initial_unit == 'cubic_feet' and target_unit == 'cubic_yards':\n        return volume / 27\n    elif initial_unit == 'cubic_yards' and target_unit == 'cubic_feet':\n        return volume * 27\n    else:\n        raise ValueError(\"Unrecognized unit. Use 'cubic_feet' or 'cubic_yards'.\")", "def convert_area(area, initial_unit='square_feet', target_unit='square_yards'):\n    \"\"\"\n    Converts area from one unit to another between square feet and square yards.\n    Parameters:\n    area : float\n        The area quantity to be converted.\n    initial_unit : str, optional\n        The initial unit of the area, default is 'square_feet'. Must be either 'square_feet' or 'square_yards'.\n    target_unit : str, optional\n        The target unit to convert the area into, default is 'square_yards'. Must be either 'square_feet' or 'square_yards'.\n    \n    Returns:\n    float\n        The area converted into the target unit.\n    \n    Raises:\n    ValueError:\n        If 'initial_unit' or 'target_unit' is not recognized.\n    Examples:\n    >>> convert_area(1, 'square_yards', 'square_feet')\n    9.0\n    >>> convert_area(18, 'square_feet', 'square_yards')\n    2.0\n    \"\"\"\n    if initial_unit == 'square_feet' and target_unit == 'square_yards':\n        return area / 9\n    elif initial_unit == 'square_yards' and target_unit == 'square_feet':\n        return area * 9\n    else:\n        raise ValueError(\"Unrecognized unit. Use 'square_feet' or 'square_yards'.\")"], ["def currency_unit_converter(amount, from_unit, to_unit, factor=100):\n    \"\"\"\n    Convert monetary values between different units of the same currency.\n    \n    Parameters:\n        amount (float): The amount of money in the `from_unit`.\n        from_unit (str): The initial unit of currency ('cents' or 'dollars')\n        to_unit (str): The target unit of currency to convert to ('cents' or 'dollars')\n        factor (int or float, optional): The conversion factor between units. Defaults to 100, as there are 100 cents in a dollar.\n    \n    Returns:\n        float: The amount of money converted into the `to_unit`.\n    \n    Example:\n        >>> currency_unit_converter(124, 'dollars', 'cents')\n        12400.0\n        >>> currency_unit_converter(12345, 'cents', 'dollars')\n        123.45\n    \"\"\"\n    import decimal\n    # Safe initialization of Decimal for precise financial calculations\n    amount_d = decimal.Decimal(amount)\n    factor_d = decimal.Decimal(factor)\n    \n    if from_unit == \"dollars\" and to_unit == \"cents\":\n        return float(amount_d * factor_d)\n    elif from_unit == \"cents\" and to_unit == \"dollars\":\n        return float(amount_d / factor_d)\n    else:\n        raise ValueError(\"Unsupported unit conversion. Use only 'cents' or 'dollars'.\")", "def convert_monetary_units(amount, from_unit, to_unit):\n    \"\"\"\n    Convert a monetary amount from one unit to another.\n    \n    Parameters\n    ----------\n    amount : float\n        The quantity of money to convert.\n    from_unit : str\n        The unit of currency to convert from (e.g., 'dollar', 'cent').\n    to_unit : str\n        The unit of currency to convert to (e.g., 'dollar', 'cent').\n    Returns\n    -------\n    float\n        The converted amount in the target unit.\n    Examples\n    --------\n    >>> convert_monetary_units(1, 'dollar', 'cent')\n    100.0\n    >>> convert_monetary_units(100, 'cent', 'dollar')\n    1.0\n    \"\"\"\n    conversion_factors = {\n        ('dollar', 'cent'): 100,\n        ('cent', 'dollar'): 0.01\n    }\n    if (from_unit, to_unit) in conversion_factors:\n        return amount * conversion_factors[(from_unit, to_unit)]\n    else:\n        raise ValueError(\"Unsupported conversion types.\")", "def convert_monetary_units(amount, from_unit, to_unit):\n    \"\"\" Converts monetary amounts between different units within the same currency.\n    Parameters:\n    amount (float): The amount of money to convert.\n    from_unit (str): The unit of the input amount ('dollars' or 'cents').\n    to_unit (str): The unit to convert the amount to ('dollars' or 'cents').\n    Returns:\n    float: The converted amount in the target unit.\n    Examples:\n    >>> convert_monetary_units(100, 'dollars', 'cents')\n    10000.0\n    >>> convert_monetary_units(1000, 'cents', 'dollars')\n    10.0\n    \"\"\"\n    unit_mapping = {\n        'dollars': {'cents': 100},\n        'cents': {'dollars': 1/100}\n    }\n    \n    if from_unit not in unit_mapping or to_unit not in unit_mapping[from_unit]:\n        raise ValueError(\"Invalid units or no conversion path between units.\")\n    \n    conversion_factor = unit_mapping[from_unit][to_unit]\n    return amount * conversion_factor"], ["def area_from_perimeter(perimeter, num_sides):\n    \"\"\"\n    Given the perimeter of a regular shape and the number of sides, compute the side length,\n    then calculates the area assuming it's a square for simplicity. This can be extended to different shapes.\n    Parameters:\n        perimeter (float): The total perimeter of the regular shape.\n        num_sides (int): The number of sides of the shape.\n    \n    Returns:\n        float: The area calculated assuming the given shape is a square.\n    \n    Example:\n        # Calculate area of a square from its perimeter\n        >>> area = area_from_perimeter(40, 4)\n        >>> print(area)\n        100.0\n    \"\"\"\n    side_length_for_square = perimeter / num_sides\n    area_of_square = side_length_for_square * side_length_for_square\n    return area_of_square"]]}