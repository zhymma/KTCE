{"Circles": [], "Coordinate Geometry": [], "Rectangles": [{"tool": "def rectangle_area(length, width):\n    \n    return length * width", "subfield": "Rectangles", "tool_name": "rectangle_area", "tool_type": "function", "description": "Calculate the area of a rectangle.", "docstring": "Calculate the area of a rectangle.\n    Parameters:\n    length (float): the length of the rectangle.\n    width (float): the width of the rectangle.\n    Returns:\n    float: the calculated area of the rectangle.\n    \n    Example:\n    >>> rectangle_area(5, 3)\n    15", "Freq": 8, "TSR": 6}, {"tool": "def calculate_square_perimeter(side_length):\n    \n    return 4 * side_length", "subfield": "Rectangles", "tool_name": "calculate_square_perimeter", "tool_type": "function", "description": "Calculate the perimeter of a square given the side length.", "docstring": "Calculate the perimeter of a square given the side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the square.\n    \n    Returns:\n    float: The perimeter of the square.", "Freq": 5, "TSR": 3, "experience_pool": "Experience 1:\n- Problem: The area of a square plot of land is 325 square meters. What is the perimeter of the square, in meters? Express your answer in simplest radical form.\n- Solution: \n    ```python\n    import math\n\n    def solution():\n        \"\"\"The area of a square plot of land is 325 square meters. What is the perimeter of the square, in meters?\"\"\"\n        area = 325\n        side_length = math.sqrt(area)\n        perimeter = calculate_square_perimeter(side_length)\n        return perimeter\n\n    # Calculate the perimeter of the square\n    print(solution())\n    ```\n- Output: 72.11102550927978\n- Feedback: The tool accurately calculates the perimeter of the square."}, {"tool": "def solve_rectangle_dimensions(perimeter, area=None, aspect_ratio=None, use_integers=False):\n    import sympy\n    \n    length, width = sympy.symbols('length width')\n    eq1 = sympy.Eq(2 * (length + width), perimeter)\n    \n    solutions = []\n    \n    if area is not None:\n        eq2 = sympy.Eq(length * width, area)\n        sol = sympy.solve((eq1, eq2), (length, width))\n        solutions.extend(sol)\n    \n    if aspect_ratio is not None:\n        eq2 = sympy.Eq(length / width, aspect_ratio)\n        sol = sympy.solve((eq1, eq2), (length, width))\n        solutions.extend(sol)\n    \n    if not solutions:\n        solutions = sympy.solve(eq1, (length, width))\n    \n    # Filter for integer solutions if requested\n    if use_integers:\n        solutions = [(l, w) for l, w in solutions if l.is_integer and w.is_integer()]\n    \n    return solutions", "subfield": "Rectangles", "tool_name": "solve_rectangle_dimensions", "tool_type": "function", "description": "None", "docstring": null, "Freq": 12.5, "TSR": 3.0}, {"tool": "def area_of_rectangle_divided_into_squares(length, width, num_squares):\n    \n    area_of_squares = (length * width) / num_squares\n    return area_of_squares", "subfield": "Rectangles", "tool_name": "area_of_rectangle_divided_into_squares", "tool_type": "function", "description": "Calculates the area of a rectangle divided into identical squares.\n    Args:\n        length (float): The length of the rectangle.\n        width (float): The width of the rectangle.\n        num_squares (int): The number of squares dividing the rectangle.\n    Returns:\n        float: The area of the rectangle in square units.", "docstring": "Calculates the area of a rectangle divided into identical squares.\n    Args:\n        length (float): The length of the rectangle.\n        width (float): The width of the rectangle.\n        num_squares (int): The number of squares dividing the rectangle.\n    Returns:\n        float: The area of the rectangle in square units.", "Freq": 1, "TSR": 0}], "Midpoint Formula": [{"tool": "def compute_midpoint(point1, point2):\n    \n    # Ensure input is in the correct format and same dimension\n    if len(point1) != len(point2):\n        raise ValueError(\"Both points must have the same number of dimensions\")\n    # Calculate midpoint using tuple/list comprehension\n    midpoint = tuple((p1 + p2) / 2 for p1, p2 in zip(point1, point2))\n    \n    return midpoint", "subfield": "Midpoint Formula", "tool_name": "compute_midpoint", "tool_type": "function", "description": "Compute the midpoint between two points in n-dimensional space.", "docstring": "Compute the midpoint between two points in n-dimensional space.\n    Parameters:\n    point1 (tuple or list): Coordinates of the first point.\n    point2 (tuple or list): Coordinates of the second point.\n    Returns:\n    tuple: Coordinates of the midpoint.\n    Examples:\n    >>> compute_midpoint((1, 2), (3, 4))\n    (2.0, 3.0)\n    >>> compute_midpoint([0, 0, 0], [6, 8, 10])\n    (3.0, 4.0, 5.0)\n    Raises:\n    ValueError: If the dimensions of the two points are not equal.", "Freq": 28, "TSR": 27, "experience_pool": "- To calculate the value of b using the midpoint and one of the endpoints, you can directly access the coordinates of the midpoint tuple and add them together. There is no need to use the non-existent function find_endpoint_from_midpoint.\n\nExample:\nmidpoint = compute_midpoint((1, 3), (5, 7))\nb = midpoint[0] + midpoint[1]"}, {"tool": "def find_endpoint_from_midpoint(midpoint, known_point):\n    \n    import numpy as np\n    midpoint, known_point = np.array(midpoint), np.array(known_point)\n    unknown_point = 2 * midpoint - known_point\n    return unknown_point.tolist()", "subfield": "Midpoint Formula", "tool_name": "find_endpoint_from_midpoint", "tool_type": "function", "description": "Calculate the unknown endpoint of a line segment given the midpoint and the known endpoint.", "docstring": "Calculate the unknown endpoint of a line segment given the midpoint and the known endpoint.\n    Parameters:\n        midpoint (list or tuple of floats): Coordinates of the midpoint.\n        known_point (list or tuple of floats): Coordinates of the known endpoint.\n    Returns:\n        list: The coordinates of the unknown endpoint as a list of floats.\n    \n    Examples:\n        >>> find_endpoint_from_midpoint([1.0, 1.0], [0, 0])\n        [2.0, 2.0]\n        >>> find_endpoint_from_midpoint([4.0, 7.0, 9.0], [1, 3, 5])\n        [7.0, 11.0, 13.0]", "Freq": 10, "TSR": 8, "experience_pool": "- Problem: The graph of the line $x+y=b$ is a perpendicular bisector of the line segment from $(1,3)$ to $(5,7)$. What is the value of b?\n  - Answer: 8\n  - Solution:\n    ```python\n    def solution():\n        # Calculate the midpoint of the line segment\n        midpoint = compute_midpoint((1, 3), (5, 7))\n        \n        # Find the value of b using the midpoint and one of the endpoints\n        b = find_endpoint_from_midpoint(midpoint, [1, 3])[0] + find_endpoint_from_midpoint(midpoint, [1, 3])[1]\n        \n        return b\n\n    # Calculate the value of b\n    print(solution())\n    ```\n  - Output: 12.0\n\n- Problem: Let $\\mathbf{a}$ and $\\mathbf{b}$ be vectors, and let $\\mathbf{m}$ be the midpoint of $\\mathbf{a}$ and $\\mathbf{b}.$  Given $\\mathbf{m} = \\begin{pmatrix} 3 \\\\ 7 \\end{pmatrix}$ and $\\mathbf{a} \\cdot \\mathbf{b} = 6,$ find $\\|\\mathbf{a}\\|^2 + \\|\\mathbf{b}\\|^2.$\n  - Answer: 220\n  - Solution:\n    ```python\n    def solution():\n        # Given values\n        m = [3, 7]\n        ab_dot = 6\n        \n        # Calculate the known endpoint\n        a_plus_b = find_endpoint_from_midpoint(m, m)\n        \n        # Calculate the norm squared of a + b\n        norm_squared_a_plus_b = sum([x**2 for x in a_plus_b])\n        \n        # Calculate the norm squared of a + norm squared of b\n        norm_squared_a_plus_norm_squared_b = norm_squared_a_plus_b - 2 * ab_dot\n        \n        return norm_squared_a_plus_norm_squared_b\n\n    # Calculate the result\n    print(solution())\n    ```\n  - Output: 46\n\n- Problem: Let $\\mathbf{a}$ and $\\mathbf{b}$ be vectors, and let $\\mathbf{m}$ be the midpoint of $\\mathbf{a}$ and $\\mathbf{b}.$  Given $\\mathbf{m} = \\begin{pmatrix} 3 \\\\ 7 \\end{pmatrix}$ and $\\mathbf{a} \\cdot \\mathbf{b} = 6,$ find $\\|\\mathbf{a}\\|^2 + \\|\\mathbf{b}\\|^2.$\n  - Answer: 220\n  - Solution:\n    ```python\n    def solution():\n        # Given values\n        m = [3, 7]\n        ab_dot = 6\n        \n        # Calculate the known endpoint\n        a = find_endpoint_from_midpoint(m, [1, 3])\n        b = find_endpoint_from_midpoint(m, [5, 7])\n        \n        # Calculate the norm squared of a + norm squared of b\n        norm_squared_a_plus_norm_squared_b = sum([x**2 for x in a]) + sum([x**2 for x in b])\n        \n        return norm_squared_a_plus_norm_squared_b\n\n    # Calculate the result\n    print(solution())\n    ```\n  - Output: 196"}, {"tool": "def find_vector_sum(midpoint, proportion):\n    \n    import numpy as np\n    \n    # Convert midpoint to numpy array\n    midpoint = np.array(midpoint)\n    \n    # Compute the difference vector between the midpoint and one of the vectors\n    difference_vector = proportion * (midpoint - np.zeros_like(midpoint))\n    \n    # Compute the sum of the vectors\n    sum_vectors = midpoint + difference_vector\n    \n    return sum_vectors.tolist()", "subfield": "Midpoint Formula", "tool_name": "find_vector_sum", "tool_type": "function", "description": "Find the sum of vectors when the midpoint and proportion are known.", "docstring": "Find the sum of vectors when the midpoint and proportion are known.\n    Parameters:\n    midpoint (tuple/list): The coordinates of the midpoint of the vectors.\n    proportion (float): The proportion of the distance from the midpoint to one of the vectors.\n    Returns:\n    sum_vectors (tuple/list): The sum of the vectors.", "Freq": 1, "TSR": 1}], "Distance Formula": [{"tool": "def distance_formula_symbolic(point1, point2):\n    \n    if len(point1) != len(point2):\n        raise ValueError(\"Points must have the same dimensions\")\n    distance_expr = sqrt(sum((p1 - p2)**2 for p1, p2 in zip(point1, point2)))\n    return simplify(distance_expr)", "subfield": "Distance Formula", "tool_name": "distance_formula_symbolic", "tool_type": "function", "description": "Construct a symbolic distance formula between two points, supporting symbolic and numerical computation.", "docstring": "Construct a symbolic distance formula between two points, supporting symbolic and numerical computation.\n    Parameters:\n    - point1: array-like, the coordinates of the first point, can contain symbols or numbers\n    - point2: array-like, the coordinates of the second point, can contain symbols or numbers\n    Returns:\n    - distance_expr: sympy expression, the symbolic expression for the distance between point1 and point2\n    Examples:\n    - Using numerical coordinates:\n    >>> distance_formula_symbolic((1, 2), (4, 6))\n    sqrt(13)\n    \n    - Using symbolic coordinates:\n    >>> x, y = symbols('x y')\n    >>> distance_formula_symbolic((x, 0), (0, y))\n    sqrt(x**2 + y**2)", "Freq": 82, "TSR": 54, "experience_pool": "- To use the solve function, you need to import it from sympy: `from sympy import solve`\n- To use the pi constant, you need to import it from sympy: `from sympy import pi`\n- To use the Eq function, you need to import it from sympy: `from sympy import Eq`\n- To use the symbols function, you need to import it from sympy: `from sympy import symbols`"}, {"tool": "def pythagorean_theorem(leg_a=None, leg_b=None, hypotenuse=None):\n    \n    if hypotenuse is None and leg_a is not None and leg_b is not None:\n        return math.sqrt(leg_a**2 + leg_b**2)\n    elif leg_a is None and hypotenuse is not None and leg_b is not None:\n        return math.sqrt(hypotenuse**2 - leg_b**2)\n    elif leg_b is None and hypotenuse is not None and leg_a is not None:\n        return math.sqrt(hypotenuse**2 - leg_a**2)\n    elif leg_a is not None and leg_b is not None and hypotenuse is None:\n        return math.sqrt(leg_a**2 + leg_b**2)\n    else:\n        raise ValueError(\"Invalid input: provide exactly one missing side.\")", "subfield": "Distance Formula", "tool_name": "pythagorean_theorem", "tool_type": "function", "description": "Calculate the missing side of a right triangle using the Pythagorean theorem.", "docstring": "Calculate the missing side of a right triangle using the Pythagorean theorem.\n    Parameters:\n    -----------\n    leg_a : float, optional\n        The length of one leg of the triangle.\n    leg_b : float, optional\n        The length of the other leg of the triangle.\n    hypotenuse : float, optional\n        The length of the hypotenuse of the triangle.\n    \n    Returns:\n    --------\n    float\n        The length of the missing side of the triangle.\n    \n    Examples:\n    ---------\n    >>> pythagorean_theorem(leg_a=3, leg_b=4)\n    5.0\n    >>> pythagorean_theorem(hypotenuse=5, leg_b=4)\n    3.0\n    \n    Raises:\n    -------\n    ValueError\n        If insufficient data is provided or too many sides are known.", "Freq": 6.0, "TSR": 3.0, "experience_pool": "Experience 1:\nProblem: Adam and Simon start on bicycle trips from the same point at the same time. Adam travels east at 8mph and Simon travels south at 6mph. After how many hours are they 60 miles apart?\nAnswer: 6\n\nExperience 2:\nProblem: In convex quadrilateral $ABCD$, $AB=BC=13$, $CD=DA=24$, and $\\angle D=60^\\circ$.  Points $X$ and $Y$ are the midpoints of $\\overline{BC}$ and $\\overline{DA}$ respectively.  Compute $XY^2$ (the square of the length of $XY$).\nAnswer: \\frac{1033}{4}+30\\sqrt{3}\n\nExperience 3:\nProblem: A circle of radius $2$ has center at $(2,0)$. A circle of radius $1$ has center at $(5,0)$.  A line is tangent to the two circles at points in the first quadrant.  What is the $y$-intercept of the line?\nAnswer: 2\\sqrt{2}\n\nExperience 4:\nProblem: What is the $x$-coordinate of the point on the $x$-axis that is equidistant from points $A( -2, 0)$ and $B(0,4)$?\nAnswer: 3"}, {"tool": "def calculate_median_length(side_a, side_b):\n    \n    hypotenuse = math.sqrt(side_a**2 + side_b**2)\n    return hypotenuse / 2", "subfield": "Distance Formula", "tool_name": "calculate_median_length", "tool_type": "function", "description": "Calculate the length of the median to the hypotenuse of a right triangle, based on the other two sides.\n    The median on the hypotenuse divides it into two equal segments, each half the length of the hypotenuse.", "docstring": "Calculate the length of the median to the hypotenuse of a right triangle, based on the other two sides.\n    The median on the hypotenuse divides it into two equal segments, each half the length of the hypotenuse.\n    \n    Parameters:\n    - side_a (float): Length of one side of the right triangle.\n    - side_b (float): Length of the other side of the right triangle.\n    \n    Returns:\n    - float: The length of the median to the hypotenuse.\n    \n    Example:\n    >>> calculate_median_length(3, 4)\n    2.5", "Freq": 1, "TSR": 1}, {"tool": "def distance_formula_3D(point1, point2):\n    \n    x1, y1, z1 = point1\n    x2, y2, z2 = point2\n    distance = sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)\n    return distance", "subfield": "Distance Formula", "tool_name": "distance_formula_3D", "tool_type": "function", "description": "Calculate the distance between two points in three-dimensional space using the distance formula.\n    Args:\n        point1 (tuple): The coordinates of the first point (x1, y1, z1).\n        point2 (tuple): The coordinates of the second point (x2, y2, z2).\n    Returns:\n        float: The distance between the two points.", "docstring": "Calculate the distance between two points in three-dimensional space using the distance formula.\n    Args:\n        point1 (tuple): The coordinates of the first point (x1, y1, z1).\n        point2 (tuple): The coordinates of the second point (x2, y2, z2).\n    Returns:\n        float: The distance between the two points.", "Freq": 13, "TSR": 11, "experience_pool": "- Experience: Calculating the distance between two points in three-dimensional space.\n  - Problem: In coordinate space, a particle starts at the point $(2,3,4)$ and ends at the point $(-1,-3,-3),$ along the line connecting the two points. Along the way, the particle intersects the unit sphere centered at the origin at two points. Then the distance between these two points can be expressed in the form $\\frac{a}{\\sqrt{b}},$ where $a$ and $b$ are positive integers, and $b$ is not divisible by the square of a prime. Find $a + b.$\n  - Solution: The distance between the two points can be calculated using the distance_formula_3D function.\n    ```python\n    def solution():\n        point1 = (2, 3, 4)\n        point2 = (-1, -3, -3)\n        \n        distance = distance_formula_3D(point1, point2)\n        \n        result = distance\n        return result\n    \n    print(solution())\n    ```\n  - Output: 12*sqrt(47)/47"}, {"tool": "def solve_for_x(a, b, c, d, point):\n    \n    x0, y0, z0 = point\n    x = (d - b*y0 - c*z0) / a\n    return x", "subfield": "Distance Formula", "tool_name": "solve_for_x", "tool_type": "function", "description": "Solve for x in the equation ax + by + cz = d, given the coefficients and a point.\n    Args:\n        a (float): The coefficient of x.\n        b (float): The coefficient of y.\n        c (float): The coefficient of z.\n        d (float): The constant term.\n        point (tuple): The coordinates of the given point (x0, y0, z0).\n    Returns:\n        float: The value of x.", "docstring": "Solve for x in the equation ax + by + cz = d, given the coefficients and a point.\n    Args:\n        a (float): The coefficient of x.\n        b (float): The coefficient of y.\n        c (float): The coefficient of z.\n        d (float): The constant term.\n        point (tuple): The coordinates of the given point (x0, y0, z0).\n    Returns:\n        float: The value of x.", "Freq": 0, "TSR": 0}, {"tool": "def solve_for_y(a, b, c, d, point):\n    \n    x0, y0, z0 = point\n    y = (d - a*x0 - c*z0) / b\n    return y", "subfield": "Distance Formula", "tool_name": "solve_for_y", "tool_type": "function", "description": "Solve for y in the equation ax + by + cz = d, given the coefficients and a point.\n    Args:\n        a (float): The coefficient of x.\n        b (float): The coefficient of y.\n        c (float): The coefficient of z.\n        d (float): The constant term.\n        point (tuple): The coordinates of the given point (x0, y0, z0).\n    Returns:\n        float: The value of y.", "docstring": "Solve for y in the equation ax + by + cz = d, given the coefficients and a point.\n    Args:\n        a (float): The coefficient of x.\n        b (float): The coefficient of y.\n        c (float): The coefficient of z.\n        d (float): The constant term.\n        point (tuple): The coordinates of the given point (x0, y0, z0).\n    Returns:\n        float: The value of y.", "Freq": 0, "TSR": 0}, {"tool": "def solve_for_z(a, b, c, d, point):\n    \n    x0, y0, z0 = point\n    z = (d - a*x0 - b*y0) / c\n    return z", "subfield": "Distance Formula", "tool_name": "solve_for_z", "tool_type": "function", "description": "Solve for z in the equation ax + by + cz = d, given the coefficients and a point.\n    Args:\n        a (float): The coefficient of x.\n        b (float): The coefficient of y.\n        c (float): The coefficient of z.\n        d (float): The constant term.\n        point (tuple): The coordinates of the given point (x0, y0, z0).\n    Returns:\n        float: The value of z.", "docstring": "Solve for z in the equation ax + by + cz = d, given the coefficients and a point.\n    Args:\n        a (float): The coefficient of x.\n        b (float): The coefficient of y.\n        c (float): The coefficient of z.\n        d (float): The constant term.\n        point (tuple): The coordinates of the given point (x0, y0, z0).\n    Returns:\n        float: The value of z.", "Freq": 0, "TSR": 0}], "Area Calculation": [], "Triangles": [], "Parabolas": [], "Polygons": [], "Right Triangles": [], "Lines and Angles": [], "Volume of Solids": [], "Perimeter": [], "3D Shapes": [], "Transformations": [], "Squares": [], "Planes in Three Dimensions": [], "Similar Triangles": [], "Pythagorean Theorem": [], "Reflections": [], "Trapezoids": [], "Angles": [], "Similarity": [], "Parallelograms": [], "Coordinate Systems": [], "Conic Sections": [], "Quadrilaterals": [], "Ellipse": []}