{"Infinite Series": [{"tool": "def recursive_series_sum(a, b, c, recursive_formula):\n    \n    terms = [a, b, c]\n    sum = a + b + c\n    while True:\n        next_term = recursive_formula(terms[-3], terms[-2], terms[-1])\n        if next_term == 0:\n            break\n        terms.append(next_term)\n        sum += next_term\n    return sum", "subfield": "Infinite Series", "tool_name": "recursive_series_sum", "tool_type": "function", "description": "Calculate the sum of a recursive series given the initial terms and the recursive formula.", "docstring": "Calculate the sum of a recursive series given the initial terms and the recursive formula.\n    Parameters:\n    a (float): The first term of the series.\n    b (float): The second term of the series.\n    c (float): The third term of the series.\n    recursive_formula (function): A function that takes three terms of the series as input and returns the next term.\n    Returns:\n    float: The sum of the recursive series.\n    Examples:\n    >>> recursive_series_sum(1, 1, 0, lambda a, b, c: (1/3) * a + (1/4) * b)\n    4.0\n    >>> recursive_series_sum(5/(3**2 * 7**2), 9/(7**2 * 11**2), 13/(11**2 * 15**2), lambda a, b, c: a / ((4*c + 1)**2 * (4*c + 5)**2))\n    0.013888888888888888", "Freq": 4.0, "TSR": 3.0, "experience_pool": "Problem: A sequence $a_1,$ $a_2,$ $a_3,$ $\\dots,$ is defined recursively by $a_1 = 1,$ $a_2 = 1,$ and for $k \\ge 3,$\n\\[a_k = \\frac{1}{3} a_{k - 1} + \\frac{1}{4} a_{k - 2}.\\]Evaluate $a_1 + a_2 + a_3 + \\dotsb.$\nAnswer: 4\n```python\ndef solution():\n    \"\"\"Calculate the sum of the infinite geometric series.\"\"\"\n    a = 1\n    b = 1\n    c = 0\n    recursive_formula = lambda a, b, c: (1/3) * a + (1/4) * b\n    result = recursive_series_sum(a, b, c, recursive_formula)\n    return result\n\n# Print the result\nprint(solution())\n```\nOutput: 4.0"}, {"tool": "def generate_sequence(kind, initial_terms, common_diff=None, common_ratio=None, recursive_rule=None, n_terms=10):\n    \n    import numpy as np\n    \n    if kind == 'arithmetic':\n        return [initial_terms[0] + i * common_diff for i in range(n_terms)]\n    elif kind == 'geometric':\n        return [initial_terms[0] * (common_ratio ** i) for i in range(n_terms)]\n    elif kind == 'recursive':\n        terms = initial_terms[:]\n        while len(terms) < n_terms:\n            next_term = recursive_rule(terms)\n            terms.append(next_term)\n        return terms\n    else:\n        raise ValueError(\"Unsupported sequence type\")", "subfield": "Infinite Series", "tool_name": "generate_sequence", "tool_type": "function", "description": "Generates sequences of various kinds including arithmetic, geometric, recursive, and custom types.", "docstring": "Generates sequences of various kinds including arithmetic, geometric, recursive, and custom types.\n    \n    Parameters:\n    - kind (str): Type of sequence ('arithmetic', 'geometric', 'recursive').\n    - initial_terms (list of numeric): Initial terms of the sequence. Length should fit the recursive rule if applied.\n    - common_diff (numeric, optional): Common difference for arithmetic sequences.\n    - common_ratio (numeric, optional): Common ratio for geometric sequences.\n    - recursive_rule (function, optional): A function that defines the next term based on previous terms for recursive sequences.\n    - n_terms (int, optional): Number of terms to generate.\n    \n    Returns:\n    - list: List containing the first `n_terms` of the sequence.", "Freq": 5, "TSR": 3, "experience_pool": "- Experience 1:\n    - Field: Sequences and Series\n    - Subfield: Infinite Series\n    - Tool Usage Frequency: 3\n    - Tool Success Rate: 66.66666666666666%\n    - Tool docstring: Generates sequences of various kinds including arithmetic, geometric, recursive, and custom types.\n    - Solution: Express u_16 in terms of a for the given recursive sequence.\n    - Calling code:\n    ```python\n    def solution():\n        \"\"\"Express u_16 in terms of a for the given recursive sequence.\"\"\"\n        \n        # Define the recursive rule function\n        def recursive_rule(terms):\n            return -1 / (terms[-1] + 1)\n        \n        # Generate the sequence with initial term a and recursive rule\n        sequence = generate_sequence(kind='recursive', initial_terms=[a], recursive_rule=recursive_rule, n_terms=16)\n        \n        # Extract the 16th term\n        u_16 = sequence[15]\n        \n        return u_16\n    \n    # Given initial term a\n    a = 3\n    print(solution())\n    ```\n    - Output: 3.000000000000001\n- Experience 2:\n    - Field: Sequences and Series\n    - Subfield: Infinite Series\n    - Tool Usage Frequency: 1\n    - Tool Success Rate: 100%\n    - Tool docstring: Generates sequences of various kinds including arithmetic, geometric, recursive, and custom types.\n    - Solution: Find the sum of the first 10 terms of the arithmetic sequence with an initial term of 2 and a common difference of 3.\n    - Calling code:\n    ```python\n    def solution():\n        \"\"\"Find the sum of the first 10 terms of the arithmetic sequence.\"\"\"\n        \n        # Generate the arithmetic sequence with initial term 2 and common difference 3\n        sequence = generate_sequence(kind='arithmetic', initial_terms=[2], common_diff=3, n_terms=10)\n        \n        # Calculate the sum of the sequence\n        sequence_sum = sum(sequence)\n        \n        return sequence_sum\n    \n    print(solution())\n    ```\n    - Output: 155"}, {"tool": "def series_sum(a, r, series_type):\n    \n    import numpy as np\n    if series_type == 'geometric':\n        if np.abs(r) >= 1:\n            raise ValueError(\"The series does not converge because |r| >= 1.\")\n        return a / (1 - r)\n    elif series_type == 'arithmetic':\n        if np.abs(r) >= 1:\n            raise ValueError(\"The series does not converge because |r| >= 1.\")\n        return a / (1 - r)\n    else:\n        raise ValueError(\"Invalid series type. Supported types are 'geometric' and 'arithmetic'.\")", "subfield": "Infinite Series", "tool_name": "series_sum", "tool_type": "function", "description": "Calculate the sum of a series or sequence based on the given type.", "docstring": "Calculate the sum of a series or sequence based on the given type.\n    Parameters:\n    a (float): The first term of the series.\n    r (float): The common ratio or difference of the series.\n    series_type (str): The type of the series or sequence. Can be 'geometric' or 'arithmetic'.\n    Returns:\n    float: The sum of the series if the series converges; otherwise, raises a ValueError.\n    Examples:\n    >>> series_sum(1, 0.5, 'geometric')\n    2.0\n    >>> series_sum(2, -0.5, 'geometric')\n    1.3333333333333333\n    >>> series_sum(1, 1/3, 'arithmetic')\n    4.0\n    >>> series_sum(1/8, 1/72, 'geometric')\n    0.1267605633802817", "Freq": 7.0, "TSR": 6, "experience_pool": "- Problem: A sequence $a_1,$ $a_2,$ $a_3,$ $\\dots,$ is defined recursively by $a_1 = 1,$ $a_2 = 1,$ and for $k \\ge 3,$\n\\[a_k = \\frac{1}{3} a_{k - 1} + \\frac{1}{4} a_{k - 2}.\\]Evaluate $a_1 + a_2 + a_3 + \\dotsb.$\nAnswer: 4\n\n```python\ndef solution():\n    \"\"\"Calculate the sum of the infinite geometric series.\"\"\"\n    a = 1\n    r = 1/3\n    result = series_sum(a, r, 'arithmetic')\n    return result\n\n# Print the result\nprint(solution())\n```\n- Problem: Compute\n\\[\\frac{5}{3^2 \\cdot 7^2} + \\frac{9}{7^2 \\cdot 11^2} + \\frac{13}{11^2 \\cdot 15^2} + \\dotsb.\\]\nAnswer: \\frac{1}{72}\n\n```python\ndef solution():\n    \"\"\"Compute the sum of the infinite series.\"\"\"\n    \n    # Define the first term and common ratio\n    a = 1/8\n    r = 1/72\n    \n    # Call the function to calculate the sum of the infinite geometric series\n    result = series_sum(a, r, 'geometric')\n    \n    return result\n\n# Print the result\nprint(solution())\n```"}, {"tool": "def sum_arithmetic_series(a, d, n):\n    \n    return n / 2 * (2 * a + (n - 1) * d)", "subfield": "Infinite Series", "tool_name": "sum_arithmetic_series", "tool_type": "function", "description": "Calculates the sum of the first n terms of an arithmetic series.", "docstring": "Calculates the sum of the first n terms of an arithmetic series.\n    Parameters:\n        a (int/float/sympy.Symbol): The first term of the series.\n        d (int/float/sympy.Symbol): The common difference of the series.\n        n (int): The number of terms to sum.\n    Returns:\n        sympy.Symbol/int/float: The sum of the first n terms of the arithmetic series.\n    Examples:\n        >>> sum_arithmetic_series(1, 2, 5)\n        25", "Freq": 0, "TSR": 0}], "Geometric Sequences": [{"tool": "def geometric_nth_term(a, r, n):\n    \n    return a * (r ** (n - 1))", "subfield": "Geometric Sequences", "tool_name": "geometric_nth_term", "tool_type": "function", "description": "Calculate the nth term of a geometric sequence.", "docstring": "Calculate the nth term of a geometric sequence.\n    \n    Parameters\n    ----------\n    a : float\n        The first term of the geometric sequence.\n    r : float\n        The common ratio of the sequence.\n    n : int\n        The term number to calculate (1-indexed).\n    \n    Returns\n    -------\n    float\n        The nth term of the sequence.\n    \n    Examples\n    --------\n    >>> geometric_nth_term(2, 3, 4)\n    54.0", "Freq": 10, "TSR": 4, "experience_pool": "- Problem: The seventh and tenth terms of a geometric sequence are $7$ and $21$, respectively. What is the $13$th term of this progression?\n  - Answer: 63\n  - Code:\n    ```python\n    def solution():\n        \"\"\"Calculate the 13th term of a geometric sequence given the 7th and 10th terms.\"\"\"\n        a7 = 7\n        a10 = 21\n        r = a10 / a7\n        n = 13\n        result = geometric_nth_term(a7, r, n)\n        return result\n\n    # Calculate and print the result\n    print(solution())\n    ```\n  - Output: 63\n\n- Problem: A geometric sequence starts $16$, $-24$, $36$, $-54$. What is the common ratio of this sequence?\n  - Answer: -\\frac{3}{2}\n  - Code:\n    ```python\n    def solution():\n        \"\"\"A geometric sequence starts $16$, $-24$, $36$, $-54$. What is the common ratio of this sequence?\"\"\"\n        a = 16\n        r = -24 / 16\n        n = 3  # We are calculating the common ratio between the first and second terms, so n = 2 - 1 = 1\n        common_ratio = geometric_nth_term(a, r, n)\n        return common_ratio\n\n    print(solution())\n    ```\n  - Output: -1.5\n\n- Problem: Anton has two species of ants, Species A and Species B, in his ant farm. The two species are identical in appearance, but Anton knows that every day, there are twice as many ants of Species A than before, while there are three times as many ants of Species B. On Day 0, Anton counts that there are 30 ants in his ant farm. On Day 5, Anton counts that there are 3281 ants in his ant farm. How many of these are of Species A?\n  - Answer: 608\n  - Code:\n    ```python\n    def solution():\n        \"\"\"Anton has two species of ants, Species A and Species B, in his ant farm. The two species are identical in appearance, but Anton knows that every day, there are twice as many ants of Species A than before, while there are three times as many ants of Species B. On Day 0, Anton counts that there are 30 ants in his ant farm. On Day 5, Anton counts that there are 3281 ants in his ant farm. How many of these are of Species A?\"\"\"\n        \n        # Total number of ants on Day 0\n        total_ants_day_0 = 30\n        \n        # Total number of ants on Day 5\n        total_ants_day_5 = 3281\n        \n        # Solving the system of equations to find the number of ants of Species A and Species B\n        b = (total_ants_day_5 - 32 * total_ants_day_0) / (243 - 32)\n        a = total_ants_day_0 - b\n        \n        # Calculating the number of ants of Species A on Day 5\n        ants_species_A_day_5 = geometric_nth_term(a, 2, 5)\n        \n        return ants_species_A_day_5\n\n    print(solution())\n    ```\n  - Output: 608.0"}, {"tool": "def geometric_sum(a, r, n):\n    \n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) / (1 - r)", "subfield": "Geometric Sequences", "tool_name": "geometric_sum", "tool_type": "function", "description": "Calculate the sum of the first n terms of a geometric sequence.", "docstring": "Calculate the sum of the first n terms of a geometric sequence.\n    Parameters:\n    a (float): The first term of the geometric sequence.\n    r (float): The common ratio of the geometric sequence.\n    n (int): The number of terms to be summed.\n    Returns:\n    float: The sum of the first n terms of the geometric sequence.", "Freq": 0, "TSR": 0}], "Arithmetic Sequences": [{"tool": "def arithmetic_term(a1, d, n):\n    \n    return a1 + (n - 1) * d", "subfield": "Arithmetic Sequences", "tool_name": "arithmetic_term", "tool_type": "function", "description": "Calculate the nth term of an arithmetic sequence.", "docstring": "Calculate the nth term of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        d (float): The common difference in the arithmetic sequence.\n        n (int): The term index to find (1-based index).\n    Returns:\n        float: The nth term of the sequence.\n    Examples:\n        >>> arithmetic_term(3, 2, 5)\n        11", "Freq": 3, "TSR": 3}, {"tool": "def extract_params_and_nth_term(sequence, n):\n    \n    import numpy as np\n    \n    if len(sequence) < 2:\n        raise ValueError(\"The input sequence must include at least two elements to determine a common difference.\")\n    \n    first_term = sequence[0]\n    common_difference = sequence[1] - sequence[0]\n    \n    nth_term = first_term + (n - 1) * common_difference\n    return first_term, common_difference, nth_term", "subfield": "Arithmetic Sequences", "tool_name": "extract_params_and_nth_term", "tool_type": "function", "description": "Extracts the first term and the common difference from the beginning of a given arithmetic sequence and calculates the nth term.", "docstring": "Extracts the first term and the common difference from the beginning of a given arithmetic sequence and calculates the nth term.\n    Parameters:\n    - sequence (list of int/float): The initial portion of the arithmetic sequence.\n    - n (int): The term position to calculate.\n    Returns:\n    - tuple:\n        - first_term (int/float): The first term of the sequence.\n        - common_difference (int/float): The common difference of the sequence.\n        - nth_term (int/float): The value of the nth term in the sequence.\n    Examples:\n    >>> extract_params_and_nth_term([3, 5, 7, 9], 5)\n    (3, 2, 11)\n    >>> extract_params_and_nth_term([10, 7, 4], 10)\n    (10, -3, -17)", "Freq": 1, "TSR": 1}, {"tool": "def calculate_common_difference(term1, position1, term2, position2):\n    \n    if position1 == position2:\n        raise ValueError(\"The two positional arguments must be different to compute a common difference.\")\n    common_difference = (term2 - term1) / (position2 - position1)\n    return common_difference", "subfield": "Arithmetic Sequences", "tool_name": "calculate_common_difference", "tool_type": "function", "description": "Calculate the common difference of an arithmetic sequence given two terms and their positions.", "docstring": "Calculate the common difference of an arithmetic sequence given two terms and their positions.\n    \n    Parameters\n    ----------\n    term1 : int or float\n        The value of the term at the first position.\n    position1 : int\n        The position of term1 in the sequence.\n    term2 : int or float\n        The value of the term at the second position.\n    position2 : int\n        The position of term2 in the sequence.\n    \n    Returns\n    -------\n    int or float\n        The common difference of the sequence.\n    \n    Raises\n    ------\n    ValueError\n        If position1 equals position2, as it would lead to division by zero.\n    Examples\n    --------\n    >>> calculate_common_difference(3, 1, 11, 5)\n    2\n    >>> calculate_common_difference(20, 2, 10, 1)\n    -10", "Freq": 0, "TSR": 0}, {"tool": "def arithmetic_sequence_properties(a1, an, n=None, d=None):\n    \n    if d is not None:\n        # Compute n using the formula an = a1 + (n-1)d\n        n_value = ((an - a1) / d) + 1\n        return {'number_of_terms': int(n_value)}\n    elif n is not None:\n        # Compute d using the formula d = (an - a1) / (n-1)\n        d_value = (an - a1) / (n - 1)\n        return {'common_difference': d_value}\n    else:\n        raise ValueError(\"Either 'n' or 'd' must be provided.\")", "subfield": "Arithmetic Sequences", "tool_name": "arithmetic_sequence_properties", "tool_type": "function", "description": "Determine the missing properties (common difference or number of terms) of an arithmetic sequence.", "docstring": "Determine the missing properties (common difference or number of terms) of an arithmetic sequence.\n    Parameters:\n        a1 (float): The first term of the arithmetic sequence.\n        an (float): Any known term other than the first term, recommended to be the last for best results.\n        n (int, optional): The term position of 'an' if 'd' is unknown.\n        d (float, optional): The common difference if 'n' is unknown.\n    Returns:\n        dict: Contains the computed number of terms (n), or common difference (d).\n    Examples:\n        >>> arithmetic_sequence_properties(3, 15, n=7)\n        {'common_difference': 2.0}\n        >>> arithmetic_sequence_properties(3, 15, d=2)\n        {'number_of_terms': 7}", "Freq": 1, "TSR": 1}, {"tool": "def number_of_terms_given_sum(a, d, total_sum):\n    \n    import math\n    # using derived quadratic formula from the sum formula: n^2 + n(2a - 1)/d - 2S/d = 0\n    discriminant = ((2 * a - d) ** 2) + 8 * d * total_sum\n    n = (-2 * a + d + math.sqrt(discriminant)) / (2 * d)\n    return round(n)", "subfield": "Arithmetic Sequences", "tool_name": "number_of_terms_given_sum", "tool_type": "function", "description": "Calculate the number of terms in an arithmetic sequence given the sum.", "docstring": "Calculate the number of terms in an arithmetic sequence given the sum.\n    Parameters:\n    a : int or float\n        The first term of the arithmetic sequence.\n    d : int or float\n        The common difference.\n    total_sum : int or float\n        The total sum of the sequence.\n    Returns:\n    int\n        The number of terms in the sequence whose sum is total_sum.\n    Examples:\n    >>> number_of_terms_given_sum(3, 2, 75)\n    10", "Freq": 1, "TSR": 0}], "Sequences and Series": [{"tool": "def sum_of_geometric_series(a, r, n):\n    \n    if r == 1:\n        return n * a\n    return a * (1 - r**n) / (1 - r)", "subfield": "Sequences and Series", "tool_name": "sum_of_geometric_series", "tool_type": "function", "description": "Calculate the sum of the first n terms of a geometric series.", "docstring": "Calculate the sum of the first n terms of a geometric series.\n    \n    Parameters:\n    - a: float. The first term of the series.\n    - r: float. The common ratio.\n    - n: int. The number of terms to sum.\n    \n    Returns:\n    - float. The sum of the first n terms of the geometric series.\n    \n    Example:\n    >>> sum_of_geometric_series(3, 2, 4)\n    45", "Freq": 10, "TSR": 10}, {"tool": "def calculate_geometric_term(a, r, n):\n    \n    return a * (r ** (n - 1))", "subfield": "Sequences and Series", "tool_name": "calculate_geometric_term", "tool_type": "function", "description": "Calculate the nth term of a geometric sequence.", "docstring": "Calculate the nth term of a geometric sequence.\n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric in teh sequence.\n    - n (int): The nth term to be found in the sequence.\n    Returns:\n    - float: The nth term of the sequence.\n    Examples:\n    >>> calculate_geometric_term(2, 3, 4)\n    54.0\n    >>> calculate_geometric_term(5, 2, 5)\n    80.0", "Freq": 3, "TSR": 2, "experience_pool": "- To calculate the maximum height reached by a ball after each bounce, you need to consider that the ball bounces back up only half the distance it fell. This means that the height after each bounce can be calculated using the formula: `height = initial_height * common_ratio`, where `initial_height` is the initial height of the ball and `common_ratio` is the ratio at which the ball bounces back up (in this case, 1/2)."}, {"tool": "def geometric_series_sum(first_term, ratio, number_of_terms):\n    \n    if number_of_terms <= 0:\n        raise ValueError(\"The number of terms must be positive.\")\n    \n    return first_term * (1 - ratio ** number_of_terms) / (1 - ratio)", "subfield": "Sequences and Series", "tool_name": "geometric_series_sum", "tool_type": "function", "description": "Calculate the sum of the first n terms of a geometric series.", "docstring": "Calculate the sum of the first n terms of a geometric series.\n    Parameters:\n    - first_term : float or sympy.Symbol\n        The first term of the geometric series.\n    - ratio : float or sympy.Symbol\n        The common ratio of the geometric series.\n    - number_of_terms : int\n        The number of terms of the series to sum up.\n    Returns:\n    - float or sympy.Expr\n        The sum of the first n terms of the geometric series.\n    Examples:\n    >>> geometric_series_sum(1, 0.5, 3)\n    1.75\n    >>> geometric_series_sum(3, 2, 4)\n    45\n    >>> a, r = sp.symbols('a r')\n    >>> geometric_series_sum(a, r, 5)\n    a*(1 - r**5)/(1 - r)\n    Raises:\n    - ValueError: If number_of_terms is non-positive.", "Freq": 2, "TSR": 2}, {"tool": "def geometric_sequence_term(first_term, ratio, n):\n    \n    return first_term * (ratio ** (n - 1))", "subfield": "Sequences and Series", "tool_name": "geometric_sequence_term", "tool_type": "function", "description": "Calculate the nth term of a geometric sequence.", "docstring": "Calculate the nth term of a geometric sequence.\n    Parameters:\n    - first_term (float): The first term of the geometric sequence.\n    - ratio (float): The common ratio between consecutive terms.\n    - n (int): The term index (1-based) to compute.\n    Returns:\n    - float: The nth term of the geometric sequence.\n    \n    Examples:\n    >>> geometric_sequence_term(1, 2, 4)\n    8\n    >>> geometric_sequence_term(3, 3, 5)\n    243", "Freq": 6, "TSR": 5}, {"tool": "def sum_of_first_n_integers(n):\n    \n    return n * (n + 1) // 2", "subfield": "Sequences and Series", "tool_name": "sum_of_first_n_integers", "tool_type": "function", "description": "Calculates the sum of the first n positive integers.", "docstring": "Calculates the sum of the first n positive integers.\n    Parameters\n    ----------\n    n : int\n        The number of the last term in the sequence of positive integers starting from 1.\n    \n    Returns\n    -------\n    int\n        The sum of the first n positive integers calculated using the formula n(n + 1) / 2.\n    \n    Examples\n    --------\n    >>> sum_of_first_n_integers(10)\n    55\n    >>> sum_of_first_n_integers(100)\n    5050", "Freq": 3, "TSR": 2}, {"tool": "def calculate_common_ratio(term1, term2):\n    \n    # Ensure we are dealing with float precision\n    term1 = float(term1)\n    term2 = float(term2)\n    \n    # Calculate and return the common ratio; (term2/term1)\n    return term2 / term1", "subfield": "Sequences and Series", "tool_name": "calculate_common_ratio", "tool_type": "function", "description": "Calculate the common ratio of a geometric sequence from two consecutive terms.", "docstring": "Calculate the common ratio of a geometric sequence from two consecutive terms.\n    Parameters:\n    term1 (float): The first term in the sequence.\n    term2 (float): The second term in the sequence, which immediately follows the first term.\n    Returns:\n    float: The common ratio.\n    Examples:\n    >>> calculate_common_ratio(2, 6)\n    3.0\n    >>> calculate_common_ratio(5, 15)\n    3.0", "Freq": 2, "TSR": 0}, {"tool": "def geometric_series_details(a, r, n):\n    \n    nth_term = a * r**(n-1)\n    return {\n        'first_term': a,\n        'common_ratio': r,\n        'nth_term': nth_term\n    }", "subfield": "Sequences and Series", "tool_name": "geometric_series_details", "tool_type": "function", "description": "Get details of a geometric series, specifically the nth term.", "docstring": "Get details of a geometric series, specifically the nth term.\n    \n    Parameters:\n        a (float or int): The first term of the series.\n        r (float or int): The common ratio of the series.\n        n (int): The nth term being queried.\n    Returns:\n        dict: Details including the first term, common ratio, and nth term.\n    \n    Examples:\n        >>> geometric_series_details(1, 2, 4)\n        {'first_term': 1, 'common_ratio': 2, 'nth_term': 8}\n        >>> geometric_series_details(3, -2, 3)\n        {'first_term': 3, 'common_ratio': -2, 'nth_term': -12}", "Freq": 0, "TSR": 0}, {"tool": "def generate_geometric_sequence(a, r, n):\n    \n    return [a * (r ** i) for i in range(n)]", "subfield": "Sequences and Series", "tool_name": "generate_geometric_sequence", "tool_type": "function", "description": "Generate the first n terms of a geometric sequence.", "docstring": "Generate the first n terms of a geometric sequence.\n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the sequence.\n    - n (int): The number of terms to generate from the sequence.\n    Returns:\n    - list of floats: A list containing the first n terms of the geometric sequence.\n    Examples:\n    >>> generate_geometricSequence(1, 2, 4)\n    [1, 2, 4, 8]\n    >>> generate_geometric_sequence(3, 3, 3)\n    [3, 9, 27]", "Freq": 0, "TSR": 0}, {"tool": "def min_terms_for_sum(a, r, S):\n    \n    if r == 1:\n        return math.ceil(S / a)\n    else:\n        n = math.log(1 + (S * (r - 1) / a), r)\n        return math.ceil(n)", "subfield": "Sequences and Series", "tool_name": "min_terms_for_sum", "tool_type": "function", "description": "Determines the minimum number of terms 'n' required in a geometric sequence \n    for the sum to be at least 'S'.", "docstring": "Determines the minimum number of terms 'n' required in a geometric sequence \n    for the sum to be at least 'S'.\n    \n    Parameters:\n        a (float): The first term of the geometric sequence.\n        r (float): The common ratio.\n        S (float): The minimum sum required.\n    Returns:\n        int: The minimum number of terms needed for the sum to meet or exceed 'S'.\n    Examples:\n        >>> min_terms_for_sum(1, 2, 31)\n        5\n        >>> min_terms_for_sum(100, 0.5, 150)\n        3", "Freq": 1, "TSR": 0}, {"tool": "def find_term_for_geometric_inequality(a, r, threshold, direction='greater'):\n    \n    import math\n    \n    if direction not in ['greater', 'less']:\n        return -1  # Invalid direction input\n    if r <= 0 or a == 0:\n        return -1  # Invalid ratio or initial term\n    \n    if direction == 'greater':\n        # Solve a*r^(n-1) > threshold\n        # taking logarithm both sides: (n-1) * log(r) > log(threshold / a)\n        if r > 1:\n            n = math.ceil((math.log(threshold / a) / math.log(r)) + 1)\n            return n\n        return -1  # No solution exists if r <= 1\n    elif direction == 'less':\n        # Solve a*r^(n-1) < threshold\n        # taking logarithm both sides: (n-1) * log(r) < log(threshold / a)\n        if r < 1 and r > 0:\n            n = math.ceil((math.log(threshold / a) / math.log(r)) + 1)\n            return n\n        return -1  # No solution exists if r >= 1\n    return -1  # Should not reach here", "subfield": "Sequences and Series", "tool_name": "find_term_for_geometric_inequality", "tool_type": "function", "description": "Find the smallest term number n in a geometric sequence where the nth term satisfies an inequality condition.", "docstring": "Find the smallest term number n in a geometric sequence where the nth term satisfies an inequality condition.\n    \n    Parameters:\n    - a (float): The first term of the geometric sequence.\n    - r (float): The common ratio of the geometric sequence.\n    - threshold (float): The value to compare the nth term against.\n    - direction (str): Determines the type of inequality; either 'greater' if the term should be greater than the threshold, or 'less' for less than the threshold.\n    \n    Returns:\n    - int: The smallest term number n meeting the condition or -1 if no such term exists (e.g., for wrong input parameters).\n    \n    Examples:\n    >>> find_term_for_geometric_inequality(3, 2, 100, 'greater')\n    7\n    >>> find_term_for_geometric_inequality(100, 0.5, 1, 'less')\n    8", "Freq": 5, "TSR": 2, "experience_pool": "- Problem: Let the first term of a geometric sequence be $\\frac{3}{4}$, and let the second term be $15$. What is the smallest $n$ for which the $n$th term of the sequence is divisible by one million?\n  - Answer: 7\n  - Calling code:\n    ```python\n    def solution():\n        # Given values\n        first_term = 3/4\n        second_term = 15\n        target_divisor = 10**6\n\n        # Calculate the common ratio\n        ratio = second_term / first_term\n\n        # Find the smallest n for which the nth term is divisible by the target divisor\n        n = find_term_for_geometric_inequality(first_term, ratio, target_divisor, 'greater')\n\n        return n\n\n    # Calculate and print the result\n    print(solution())\n    ```"}, {"tool": "def geometric_common_ratio(terms):\n    \n    if len(terms) < 2:\n        raise ValueError(\"At least two terms are required to determine the common ratio.\")\n    return terms[1] / terms[0]", "subfield": "Sequences and Series", "tool_name": "geometric_common_ratio", "tool_type": "function", "description": "Determine the common ratio of a geometric sequence given at least two terms.", "docstring": "Determine the common ratio of a geometric sequence given at least two terms.\n    Parameters:\n    terms (list of int/float): A list containing at least two terms of the geometric sequence in order.\n    Returns:\n    float: The common ratio of the sequence.\n    Example:\n    >>> geometric_common_ratio([2, 6, 18])\n    3.0", "Freq": 1, "TSR": 1}, {"tool": "def is_geometric_sequence(sequence):\n    \n    if len(sequence) < 2:\n        return False\n    ratios = set(sequence[i] / sequence[i-1] for i in range(1, len(sequence)))\n    return len(ratios) == 1", "subfield": "Sequences and Series", "tool_name": "is_geometric_sequence", "tool_type": "function", "description": "Determine whether a given sequence of numbers is a geometric sequence.", "docstring": "Determine whether a given sequence of numbers is a geometric sequence.\n    \n    Parameters:\n        sequence (list of float|int): The sequence to be checked.\n    \n    Returns:\n        bool: True if the sequence is geometric, False otherwise.\n    \n    Examples:\n        >>> is_geometric_sequence([2, 4, 8, 16])\n        True\n        >>> is_geometric_sequence([2, 4, 6, 8])\n        False", "Freq": 0, "TSR": 0}, {"tool": "def filter_series_by_term_parity(first_term, common_ratio, num_terms, parity='even'):\n    \n    terms = [first_term * (common_ratio ** i) for i in range(num_terms)]\n    if parity == 'even':\n        return terms[1::2]  # Selecting terms at even indices, zero-based index means odd powers\n    else:\n        return terms[0::2]  # Selecting terms at odd indices, zero-based index means even powers", "subfield": "Sequences and Series", "tool_name": "filter_series_by_term_parity", "tool_type": "function", "description": "Extract and list the terms from a geometric series that are either even-powered or odd-powered.", "docstring": "Extract and list the terms from a geometric series that are either even-powered or odd-powered.\n    Parameters:\n    - first_term (float): The first term of the series.\n    - common_ratio (float): The common ratio of the series.\n    - num_terms (int): The number of terms to consider from the series.\n    - parity (str): 'even' if even-powered terms are desired, 'odd' for odd-powered terms.\n    Returns:\n    - list: A list of terms from the geometric series corresponding to the specified parity.\n    Examples:\n    >>> filter_series_by_term_parity(1, 2, 5, 'even')\n    [2, 8]\n    >>> filter_series_by_term_parity(1, 3, 5, 'odd')\n    [1, 9, 81]", "Freq": 0, "TSR": 0}, {"tool": "def geometric_series_operations(terms, operation='product'):\n    \n    if operation == 'product':\n        result = np.prod(terms)\n    elif operation == 'factorial_product':\n        result = np.prod([factorial(int(term)) for term in terms])\n    else:\n        raise ValueError(\"Unsupported operation provided.\")\n    \n    return result", "subfield": "Sequences and Series", "tool_name": "geometric_series_operations", "tool_type": "function", "description": "Perform operations such as product or factorial manipulation on terms of a geometric series.", "docstring": "Perform operations such as product or factorial manipulation on terms of a geometric series.\n    \n    Parameters:\n    terms : list of float or int\n        The terms of the geometric series on which to perform the operation.\n    operation : str, optional\n        The type of operation to perform, supported operations are 'product' and 'factorial_product'.\n        Default is 'product'.\n        \n    Returns:\n    float\n        The result of the specified operation on the given sequence terms.\n    \n    Examples:\n    >>> geometric_series_operations([2, 4, 8])\n    64\n    >>> geometric_series_operations([2, 4, 8], operation='factorial_product')\n    10321920", "Freq": 0, "TSR": 0}, {"tool": "def series_after_multiplication_by_ratio(first_term, common_ratio, num_terms):\n    \n    initial_terms = [first_term * (common_ratio ** i) for i in range(num_terms)]\n    return [x * common_ratio for x in initial_terms]", "subfield": "Sequences and Series", "tool_name": "series_after_multiplication_by_ratio", "tool_type": "function", "description": "Compute the new series obtained by multiplying each term of an initial geometric series by the common ratio.", "docstring": "Compute the new series obtained by multiplying each term of an initial geometric series by the common ratio.\n    Parameters:\n    - first_term (float): The first term of the series.\n    - common_ratio (float): The common ratio of the series.\n    - num_terms (int): The number of terms to consider from the series.\n    Returns:\n    - list: A new series produced by multiplying each term of the original by the common ratio.\n    Examples:\n    >>> series_after_multiplication_by_ratio(1, 2, 5)\n    [2, 4, 8, 16, 32]", "Freq": 0, "TSR": 0}, {"tool": "def arithmetic_term_finder(a1, d, n):\n    \n    # nth term formula: an = a1 + (n - 1) * d\n    return a1 + (n - 1) * d", "subfield": "Sequences and Series", "tool_name": "arithmetic_term_finder", "tool_type": "function", "description": "Calculates the nth term of an arithmetic sequence.", "docstring": "Calculates the nth term of an arithmetic sequence.\n    \n    Parameters:\n    - a1 (int or float): The first term of the arithmetic sequence.\n    - d (int or float): The common difference of the sequence.\n    - n (int): The term number to find (1-based index).\n    \n    Returns:\n    - int or float: The nth term of the arithmetic sequence.\n    \n    Examples:\n    >>> arithmetic_term_finder(1, 2, 5)\n    9\n    >>> arithmetic_term_finder(3, -1, 10)\n    -6", "Freq": 0, "TSR": 0}, {"tool": "def calculate_infinite_geometric_common_ratio(terms):\n    \n    if len(terms) < 2:\n        raise ValueError(\"At least two terms are required to determine the common ratio.\")\n    \n    # Calculate the common ratio by dividing a term by its preceding term\n    common_ratio = terms[-1] / terms[-2]\n    \n    return common_ratio", "subfield": "Sequences and Series", "tool_name": "calculate_infinite_geometric_common_ratio", "tool_type": "function", "description": "Calculate the common ratio of an infinite geometric series.", "docstring": "Calculate the common ratio of an infinite geometric series.\n    \n    Parameters:\n    terms (list): A list of terms in the geometric series.\n    \n    Returns:\n    float: The common ratio of the infinite geometric series.", "Freq": 2, "TSR": 2}]}